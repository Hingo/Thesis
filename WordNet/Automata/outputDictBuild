1
The set of strings w such that the symbol at every odd position in w is "a"
FORALLINT(ISODDP(), STREQUALS(SYMBOLATP(), STRING(a)))
additions -**##**- [['set', 'SYMBOLATP', 1.0], ['is', 'STREQUALS', 1.0], ['odd', 'ISODDP', 1.0], ['every', 'FORALLINT', 1.0]]

2
The set of strings w such that the number of occurrences of the substring "ab" in w equals the number of occurrences of the substring "ba" in w.
INTEQUALS(COUNT(STRING(ab)), COUNT(STRING(ba)))
additions -**##**- [['equals', 'INTEQUALS', 1.0], ['number', 'COUNT', 1.0]]

3
Consider the language L consisting of strings w such that w has odd number of "a" symbols and even number of "b" symbols.
AND(ISODD(COUNT(STRING(a))), ISEVEN(COUNT(STRING(b))))
additions -**##**- [['odd', 'ISODD', 1.0], ['even', 'ISEVEN', 1.0], ['has', 'COUNT', 1.0], ['and', 'AND', 1.0]]

4
Consider the set L of strings w such that the last symbol of w has not appeared before.
NOT(APPEAREDBEFOREP(LASTSYMBOL()))
additions -**##**- [['not', 'NOT', 1.0], ['last', 'LASTSYMBOL', 1.0]]

5
Consider the language L consisting of words that contain "010"
CONTAINSP(STRING(010))
additions -**##**- [['contain', 'CONTAINSP', 1.0]]

6
consider the language L containing words that begin with "a" and end with "b".
AND(STARTSWITHP(STRING(a)), ENDSWITHP(STRING(b)))
additions -**##**- [['begin', 'STARTSWITHP', 1.0], ['end', 'ENDSWITHP', 1.0], ['and', 'AND', 1.0]]

7
Let L1 be the set of words w that contain an even number of "a", let L2 be the set of words w that end with "b", let L3 = L1 intersect L2.
AND(ISEVEN(COUNT(STRING(a))), ENDSWITHP(STRING(b)))
additions -**##**- [['even', 'ISEVEN', 1.0], ['end', 'ENDSWITHP', 1.0], ['let', 'COUNT', 1.0], ['intersect', 'AND', 1.0]]

8
A string w belongs to the language L precisely when w contains at least #1 "a" symbol and does not contain any "b" symbols.
AND(GEQ(COUNT(STRING(a)), INTEGER(1)), NOT(CONTAINSP(STRING(b))))
additions -**##**- [['not', 'NOT', 1.0], ['least', 'GEQ', 1.0], ['contains', 'CONTAINSP', 1.0], ['and', 'AND', 1.0]]

9
The set of all strings ending in "00"
ENDSWITHP(STRING(00))
additions -**##**- [['ending', 'ENDSWITHP', 1.0]]

10
The set of all strings with #3 consecutive "0" (not necessarily at the end)
CONTAINSP(REPEAT(STRING(0), INTEGER(3), REQ()))
additions -**##**- [['consecutive', 'REPEAT', 1.0], ['with', 'CONTAINSP', 1.0]]

11
The set of strings with "011" as a substring
CONTAINSP(STRING(011))
additions -**##**- [['with', 'CONTAINSP', 1.0]]

12
Set of all strings whose #10th symbol from the right end is a "1".
STREQUALS(SYMBOLAT(MINUS(INTEGER(10))), STRING(1))
additions -**##**- [['symbol', 'SYMBOLAT', 1.0], ['is', 'STREQUALS', 1.0], ['right', 'MINUS', 1.0]]

13
Set of strings that either begin with "01" or end with "01".
OR(STARTSWITHP(STRING(01)), ENDSWITHP(STRING(01)))
additions -**##**- [['begin', 'STARTSWITHP', 1.0], ['or', 'OR', 1.0], ['end', 'ENDSWITHP', 1.0]]

14
The set of strings over alphabet 0 to 9 such that the final digit has not appeared before.
NOT(APPEAREDBEFOREP(LASTSYMBOL()))
additions -**##**- [['not', 'NOT', 1.0], ['final', 'LASTSYMBOL', 1.0]]

15
The set of strings of "0" and "1" such that at least one of the last #10 positions is a "1"
EXISTSINT(LASTFEW(INTEGER(10)), STREQUALS(SYMBOLATP(), STRING(1)))
additions -**##**- [['set', 'SYMBOLATP', 1.0], ['is', 'STREQUALS', 1.0], ['last', 'LASTFEW', 1.0], ['least', 'EXISTSINT', 1.0]]

16
The set of strings over alphabet a, b, c containing at least #1 "a" and containing at least #1 "b".
AND(GEQ(COUNT(STRING(a)), INTEGER(1)), GEQ(COUNT(STRING(b)), INTEGER(1)))
additions -**##**- [['least', 'GEQ', 1.0], ['containing', 'COUNT', 1.0], ['and', 'AND', 1.0]]

17
The set of strings of 0s and 1s whose #10th symbol form the right end is "1".
STREQUALS(SYMBOLAT(MINUS(INTEGER(10))), STRING(1))
additions -**##**- [['symbol', 'SYMBOLAT', 1.0], ['is', 'STREQUALS', 1.0], ['right', 'MINUS', 1.0]]

18
The set of strings of 0s and 1s with at most #1 pair of consecutive "1".
LEQ(COUNT(REPEAT(STRING(1), TWICE(), REQ())), INTEGER(1))
additions -**##**- [['pair', 'TWICE', 1.0], ['consecutive', 'REPEAT', 1.0], ['most', 'LEQ', 1.0], ['with', 'COUNT', 1.0]]

19
The set of all strings of 0s and 1s such that every pair of adjacent "0" appears before any pair of adjacent "1".
APPEAREDBEFORESTR(REPEAT(STRING(0), TWICE(), REQ()), REPEAT(STRING(1), TWICE(), REQ()), ANYWHERE())
additions -**##**- [['pair', 'TWICE', 1.0], ['adjacent', 'REPEAT', 1.0], ['before', 'APPEAREDBEFORESTR', 1.0]]

20
The set of strings of 0s and 1s whose number of "0" is divisible by #5.
ISDIVISIBLEBY(COUNT(STRING(0)), INTEGER(5))
additions -**##**- [['divisible', 'ISDIVISIBLEBY', 1.0], ['number', 'COUNT', 1.0]]

21
The set of all strings of 0s and 1s not containing "101" as a substring.
NOT(CONTAINSP(STRING(101)))
additions -**##**- [['not', 'NOT', 1.0], ['containing', 'CONTAINSP', 1.0]]

22
The set of strings containing "ab" as a substring.
CONTAINSP(STRING(ab))
additions -**##**- [['containing', 'CONTAINSP', 1.0]]

23
The set of strings whose length is divisible by #6.
ISDIVISIBLEBY(LENP(), INTEGER(6))
additions -**##**- [['length', 'LENP', 1.0], ['divisible', 'ISDIVISIBLEBY', 1.0]]

24
The set of strings whose #5th last symbol is "b".
STREQUALS(SYMBOLAT(MINUS(INTEGER(5))), STRING(b))
additions -**##**- [['symbol', 'SYMBOLAT', 1.0], ['is', 'STREQUALS', 1.0], ['last', 'MINUS', 1.0]]

25
w is a binary string containing both substrings "010" and "101"
CONTAINSP(ANDSTRINGS(STRING(010), STRING(101)))
additions -**##**- [['containing', 'CONTAINSP', 1.0], ['both', 'ANDSTRINGS', 1.0]]

26
Consider the language consisting of all words that have neither consecutive "a" nor consecutive "b"
NOT(CONTAINSP(ANDSTRINGS(REPEAT(STRING(a), TWICE(), REQ()), REPEAT(STRING(b), TWICE(), REQ()))))
additions -**##**- [['consecutive', 'TWICE', 1.0], ['neither', 'NOT', 1.0], ['consisting', 'CONTAINSP', 0.3333333333333333], ['nor', 'ANDSTRINGS', 1.0]]

27
Draw a DFSA that rejects all words for which the last #2 letters match.
NOT(LASTFEWMATCH(INTEGER(2)))
additions -**##**- [['rejects', 'NOT', 1.0], ['draw', 'LASTFEWMATCH', 0.5]]

28
Draw a DFSA that rejects all words for which the first #2 letters match.
NOT(LASTFEWMATCH(INTEGER(2)))
additions -**##**- [['rejects', 'NOT', 1.0], ['draw', 'LASTFEWMATCH', 0.5]]

29
x contains an even number of "a".
ISEVEN(COUNT(STRING(a)))
additions -**##**- [['even', 'ISEVEN', 1.0], ['contains', 'COUNT', 1.0]]

30
x contains an odd number of "b".
ISODD(COUNT(STRING(b)))
additions -**##**- [['odd', 'ISODD', 1.0], ['contains', 'COUNT', 1.0]]

31
x contains an even number of "a" and an odd number of "b"
AND(ISEVEN(COUNT(STRING(a))), ISODD(COUNT(STRING(b))))
additions -**##**- [['odd', 'ISODD', 1.0], ['even', 'ISEVEN', 1.0], ['contains', 'COUNT', 1.0], ['and', 'AND', 1.0]]

32
x contains an even number of "a" or an odd number of "b"
OR(ISEVEN(COUNT(STRING(a))), ISODD(COUNT(STRING(b))))
additions -**##**- [['or', 'OR', 1.0], ['odd', 'ISODD', 1.0], ['even', 'ISEVEN', 1.0], ['contains', 'COUNT', 1.0]]

33
w contains substring "010" and "101"
CONTAINSP(ANDSTRINGS(STRING(010), STRING(101)))
additions -**##**- [['contains', 'CONTAINSP', 1.0], ['and', 'ANDSTRINGS', 1.0]]

34
w does not contain substring "0110"
NOT(CONTAINSP(STRING(0110)))
additions -**##**- [['not', 'NOT', 1.0], ['contain', 'CONTAINSP', 1.0]]

35
w has an even number of "0" and an even number of "1"
AND(ISEVEN(COUNT(STRING(0))), ISEVEN(COUNT(STRING(1))))
additions -**##**- [['even', 'ISEVEN', 1.0], ['has', 'COUNT', 1.0], ['and', 'AND', 1.0]]

36
w has the same number of occurrences of "10" and "01"
INTEQUALS(COUNT(STRING(10)), COUNT(STRING(01)))
additions -**##**- [['has', 'COUNT', 1.0]]

37
Consider the set of all binary strings where the difference between the number of "0" and the number of "1" is even.
ISEVEN(DIFF(COUNT(STRING(0)), COUNT(STRING(1))))
additions -**##**- [['set', 'ISEVEN', 0.3333333333333333], ['difference', 'DIFF', 1.0], ['number', 'COUNT', 1.0]]

38
The set of all binary strings having a substring "00" and  ending with "01".
AND(CONTAINSP(STRING(00)), ENDSWITHP(STRING(01)))
additions -**##**- [['ending', 'ENDSWITHP', 1.0], ['substring', 'CONTAINSP', 1.0], ['and', 'AND', 1.0]]

39
The set of all binary strings having a substring "00" but  not ending with "01".
AND(CONTAINSP(STRING(00)), NOT(ENDSWITHP(STRING(01))))
additions -**##**- [['not', 'NOT', 1.0], ['ending', 'ENDSWITHP', 1.0], ['substring', 'CONTAINSP', 1.0], ['but', 'AND', 1.0]]

40
The set of all binary strings with #3 consecutive "0".
CONTAINSP(REPEAT(STRING(0), INTEGER(3), REQ()))
additions -**##**- [['consecutive', 'REPEAT', 1.0], ['with', 'CONTAINSP', 1.0]]

41
The set of all strings over alphabet a, b of length up to  #3.
LEQ(LENP(), INTEGER(3))
additions -**##**- [['up', 'LEQ', 1.0], ['length', 'LENP', 1.0]]

42
The set of all strings of 0s and 1s such that #10th symbol  from the right end is a "1".
STREQUALS(SYMBOLAT(MINUS(INTEGER(10))), STRING(1))
additions -**##**- [['symbol', 'SYMBOLAT', 1.0], ['is', 'STREQUALS', 1.0], ['right', 'MINUS', 1.0]]

43
w begins with a "1" and ends with a "0"
AND(STARTSWITHP(STRING(1)), ENDSWITHP(STRING(0)))
additions -**##**- [['begins', 'STARTSWITHP', 1.0], ['ends', 'ENDSWITHP', 1.0], ['and', 'AND', 1.0]]

44
w contains at least #3 "1"
GEQ(COUNT(STRING(1)), INTEGER(3))
additions -**##**- [['least', 'GEQ', 1.0], ['contains', 'COUNT', 1.0]]

45
w contains at least #2 "0" and contains at most  #1 "1"
AND(GEQ(COUNT(STRING(0)), INTEGER(2)), LEQ(COUNT(STRING(1)), INTEGER(1)))
additions -**##**- [['most', 'LEQ', 1.0], ['least', 'GEQ', 1.0], ['contains', 'COUNT', 1.0], ['and', 'AND', 1.0]]

46
every odd position of w is a "1"
FORALLINT(ISODDP(), STREQUALS(SYMBOLATP(), STRING(1)))
additions -**##**- [['position', 'SYMBOLATP', 1.0], ['is', 'STREQUALS', 1.0], ['odd', 'ISODDP', 1.0], ['every', 'FORALLINT', 1.0]]

47
The set of all strings ending in "00".
ENDSWITHP(STRING(00))
additions -**##**- [['ending', 'ENDSWITHP', 1.0]]

48
The set of all strings such that the #4th symbol from the  right is "1".
STREQUALS(SYMBOLAT(MINUS(INTEGER(4))), STRING(1))
additions -**##**- [['symbol', 'SYMBOLAT', 1.0], ['is', 'STREQUALS', 1.0], ['right', 'MINUS', 1.0]]

49
W contains at least #3 "0"
GEQ(COUNT(STRING(0)), INTEGER(3))
additions -**##**- [['least', 'GEQ', 1.0], ['contains', 'COUNT', 1.0]]

50
Every odd position of w is a "1".
FORALLINT(ISODDP(), STREQUALS(SYMBOLATP(), STRING(1)))
additions -**##**- [['position', 'SYMBOLATP', 1.0], ['is', 'STREQUALS', 1.0], ['odd', 'ISODDP', 1.0], ['every', 'FORALLINT', 1.0]]

51
W contains at least #2 "a" and contains at most #1 "b".
AND(GEQ(COUNT(STRING(a)), INTEGER(2)), LEQ(COUNT(STRING(b)), INTEGER(1)))
additions -**##**- [['most', 'LEQ', 1.0], ['least', 'GEQ', 1.0], ['contains', 'COUNT', 1.0], ['and', 'AND', 1.0]]

52
w starts with the string "10" or ends with the string "01"
OR(STARTSWITHP(STRING(10)), ENDSWITHP(STRING(01)))
additions -**##**- [['starts', 'STARTSWITHP', 1.0], ['or', 'OR', 1.0], ['ends', 'ENDSWITHP', 1.0]]

53
Binary strings in which every substring "010" is followed  immediately by substring "111".
APPEAREDBEFORESTR(STRING(010), STRING(111), IMM())
additions -**##**- [['immediately', 'IMM', 1.0], ['is', 'APPEAREDBEFORESTR', 1.0]]

54
w has neither "aa" nor "bb" as a substring.
NOT(CONTAINSP(ANDSTRINGS(STRING(aa), STRING(bb))))
additions -**##**- [['neither', 'NOT', 1.0], ['w', 'CONTAINSP', 0.3333333333333333], ['nor', 'ANDSTRINGS', 1.0]]

55
w has an even number of "a" and an odd number of "b".
AND(ISEVEN(COUNT(STRING(a))), ISODD(COUNT(STRING(b))))
additions -**##**- [['odd', 'ISODD', 1.0], ['even', 'ISEVEN', 1.0], ['has', 'COUNT', 1.0], ['and', 'AND', 1.0]]

56
Draw a 4-state DFA that accepts the set of all bitstrings  ending with "11".
ENDSWITHP(STRING(11))
additions -**##**- [['ending', 'ENDSWITHP', 1.0]]

57
Draw a DFA for bitstrings with at least #1 "0" and with at  least #1 "1".
AND(GEQ(COUNT(STRING(0)), INTEGER(1)), GEQ(COUNT(STRING(1)), INTEGER(1)))
additions -**##**- [['least', 'GEQ', 1.0], ['with', 'COUNT', 1.0], ['and', 'AND', 1.0]]

58
Draw an NFA that matches all strings that contain  either a multiple of #3 "1" or contain a multiple of #5 "1".
OR(ISMULTIPLEOF(COUNT(STRING(1)), INTEGER(3)), ISMULTIPLEOF(COUNT(STRING(1)), INTEGER(5)))
additions -**##**- [['or', 'OR', 1.0], ['multiple', 'ISMULTIPLEOF', 1.0], ['contain', 'COUNT', 1.0]]

59
Draw an NFA that recognize the language of all strings  that end in "aaab".
ENDSWITHP(STRING(aaab))
additions -**##**- [['end', 'ENDSWITHP', 1.0]]

60
Draw an NFA that recognize the language of all strings  whose #4th to the last character is "a".
STREQUALS(SYMBOLAT(MINUS(INTEGER(4))), STRING(a))
additions -**##**- [['character', 'SYMBOLAT', 0.3333333333333333], ['is', 'STREQUALS', 1.0], ['last', 'MINUS', 1.0]]

61
Draw an NFA that recognize the language of all strings  whose #5th to the last character is "a".
STREQUALS(SYMBOLAT(MINUS(INTEGER(5))), STRING(a))
additions -**##**- [['character', 'SYMBOLAT', 0.333333333333], ['is', 'STREQUALS', 1.0], ['last', 'MINUS', 1.0]]

62
w does not end in "ba"
NOT(ENDSWITHP(STRING(ba)))
additions -**##**- [['not', 'NOT', 1.0], ['end', 'ENDSWITHP', 1.0]]

63
w does not have "001" as a substring.
NOT(CONTAINSP(STRING(001)))
additions -**##**- [['not', 'NOT', 1.0], ['w', 'CONTAINSP', 0.333333333333]]

64
w contains exactly #2 occurrences of the substring "aa".
INTEQUALS(COUNT(STRING(aa)), INTEGER(2))
additions -**##**- [['exactly', 'INTEQUALS', 1.0], ['contains', 'COUNT', 1.0]]

65
w contains no more than #2 occurrences of the substring "aa".
NOT(GREATER(COUNT(STRING(aa)), INTEGER(2)))
additions -**##**- [['no', 'NOT', 1.0], ['more', 'GREATER', 1.0], ['contains', 'COUNT', 1.0]]

66
Give a regular expression for all binary numbers including the substring "101"
CONTAINSP(STRING(101))
additions -**##**- [['substring', 'CONTAINSP', 1.0]]

67
Give a regular expression for all binary numbers with  an even number of "1"
ISEVEN(COUNT(STRING(1)))
additions -**##**- [['regular', 'ISEVEN', 1.0], ['give', 'COUNT', 1.0]]

68
Give a regular expression for all binary numbers that  do not include "000"
NOT(CONTAINSP(STRING(000)))
additions -**##**- [['not', 'NOT', 1.0], ['include', 'CONTAINSP', 0.5]]

69
Give a regular expression for all binary numbers that  begin and end with the same digit.
STREQUALS(FIRSTSYMBOL(), LASTSYMBOL())
additions -**##**- [['same', 'STREQUALS', 1.0], ['end', 'LASTSYMBOL', 1.0], ['begin', 'FIRSTSYMBOL', 1.0]]

70
Give a NFA that only accepts binary numbers that  include either "00" or "11"
CONTAINSP(ORSTRINGS(STRING(00), STRING(11)))
additions -**##**- [['or', 'ORSTRINGS', 1.0], ['include', 'CONTAINSP', 0.5]]

71
Give a NFA that only accepts binary numbers that  include both "00" and "11"
CONTAINSP(ANDSTRINGS(STRING(00), STRING(11)))
additions -**##**- [['include', 'CONTAINSP', 0.5], ['both', 'ANDSTRINGS', 1.0]]

72
Give a NFA that only accepts strings such that x either  has the substring "01" or has the substring "021".
OR(CONTAINSP(STRING(01)), CONTAINSP(STRING(021)))
additions -**##**- [['or', 'OR', 1.0], ['substring', 'CONTAINSP', 1.0]]

73
Give the set of all strings that end with "ing"
ENDSWITHP(STRING(ing))
additions -**##**- [['end', 'ENDSWITHP', 1.0]]

74
Consider the DFA that accepts all strings which have  "01" as a substring.
CONTAINSP(STRING(01))
additions -**##**- [['strings', 'CONTAINSP', 0.5]]

75
Consider the DFA accepting all and only strings with  an even number of "0" and an even number of "1"
AND(ISEVEN(COUNT(STRING(0))), ISEVEN(COUNT(STRING(1))))
additions -**##**- [['even', 'ISEVEN', 1.0], ['accepting', 'COUNT', 1.0], ['and', 'AND', 1.0]]

76
Give a DFA such that it contains all strings that have  "aba" as a substring
CONTAINSP(STRING(aba))
additions -**##**- [['contains', 'CONTAINSP', 1.0]]

77
A language with words with equal number of "0" and "1"
EQ(COUNTBOTH(ANDSTR(STRING(0), STRING(1))))
additions -**##**- [['number', 'COUNTBOTH', 0.3333333333333333], ['a', 'ANDSTR', 1.0]]

78
A language with words with more number of "0" than "1"s
MORE(COUNTBOTH(ANDSTR(STRING(0), STRING(1))))
additions -**##**- [['more', 'MORE', 1.0], ['number', 'COUNTBOTH', 0.333333333333], ['a', 'ANDSTR', 1.0]]

79
A language with words of form RegX
MATCHFORMAT(EXPRESSION(RegX))
additions -**##**- [['language', 'MATCHFORMAT', 0.5], ['regx', 'EXPRESSION', 1.0]]

80
A language with words of form RegX
MATCHFORMAT(EXPRESSION(RegX))
additions -**##**- [['language', 'MATCHFORMAT', 0.5], ['regx', 'EXPRESSION', 1.0]]

81
A language with words of form RegX
MATCHFORMAT(EXPRESSION(RegX))
additions -**##**- [['language', 'MATCHFORMAT', 0.5], ['regx', 'EXPRESSION', 1.0]]

82
A language with words of the form RegX
MATCHFORMAT(EXPRESSION(RegX))
additions -**##**- [['language', 'MATCHFORMAT', 0.5], ['regx', 'EXPRESSION', 1.0]]

83
A language with words with equal number of "0" and "1"
EQ(COUNTBOTH(ANDSTR(STRING(0), STRING(1))))
additions -**##**- [['number', 'COUNTBOTH', 0.333333333333], ['a', 'ANDSTR', 1.0]]

84
A language with words of the form RegX
MATCHFORMAT(EXPRESSION(RegX))
additions -**##**- [['language', 'MATCHFORMAT', 0.5], ['regx', 'EXPRESSION', 1.0]]

85
A language with words of the form RegX
MATCHFORMAT(EXPRESSION(RegX))
additions -**##**- [['language', 'MATCHFORMAT', 0.5], ['regx', 'EXPRESSION', 1.0]]

86
A language with words with equal number of "0" and "1"
EQ(COUNTBOTH(ANDSTR(STRING(0), STRING(1))))
additions -**##**- [['number', 'COUNTBOTH', 0.333333333333], ['a', 'ANDSTR', 1.0]]

87
The set of strings whose #5th symbol from the end is "b".
STREQUALS(SYMBOLAT(MINUS(INTEGER(5))), STRING(b))
additions -**##**- [['symbol', 'SYMBOLAT', 1.0], ['is', 'STREQUALS', 1.0], ['end', 'MINUS', 1.0]]

88
Design a DFA that accepts the language over the alphabet  0, 1, 2 where the decimal equivalent of the language is divisible by #3.
ISDIVISIBLEBY(DECIMALOFSTRING(), INTEGER(3))
additions -**##**- [['divisible', 'ISDIVISIBLEBY', 1.0], ['decimal', 'DECIMALOFSTRING', 1.0]]

89
the language is accepted only if the number is divisible by #3.
ISDIVISIBLEBY(DECIMALOFSTRING(), INTEGER(3))
additions -**##**- [['divisible', 'ISDIVISIBLEBY', 1.0], ['number', 'DECIMALOFSTRING', 1.0]]

90
The string contains equal number of "1" and "2" must be accepted.
EQ(COUNTBOTH(ANDSTR(STRING(1), STRING(2))))
additions -**##**- [['equal', 'EQ', 1.0], ['contains', 'COUNTBOTH', 1.0], ['and', 'ANDSTR', 1.0]]

91
Design a DFA for all strings over the alphabet $ a, b % that contain "aba" but contain not "abaa" as a substring.
AND(CONTAINSP(STRING(aba)), NOT(CONTAINSP(STRING(abaa))))
additions -**##**- [['not', 'NOT', 1.0], ['contain', 'CONTAINSP', 1.0], ['but', 'AND', 1.0]]

92
w contains at least #1 "0" and contains at most #1 "1"
AND(GEQ(COUNT(STRING(0)), INTEGER(1)), LEQ(COUNT(STRING(1)), INTEGER(1)))
additions -**##**- [['most', 'LEQ', 1.0], ['least', 'GEQ', 1.0], ['contains', 'COUNT', 1.0], ['and', 'AND', 1.0]]

93
w does not contain "100" as a substring
NOT(CONTAINSP(STRING(100)))
additions -**##**- [['not', 'NOT', 1.0], ['contain', 'CONTAINSP', 1.0]]

94
Design a DFA for all strings over the alphabet $ 0, 1 % where the #3rd symbol from the end is a "0".
STREQUALS(SYMBOLAT(MINUS(INTEGER(3))), STRING(0))
additions -**##**- [['symbol', 'SYMBOLAT', 1.0], ['is', 'STREQUALS', 1.0], ['end', 'MINUS', 1.0]]

95
Design a DFA all strings over the alphabet $ 0, 1 % where the leftmost and the rightmost symbols are different.
STRDIFFER(FIRSTSYMBOL(), LASTSYMBOL())
additions -**##**- [['rightmost', 'LASTSYMBOL', 1.0], ['leftmost', 'FIRSTSYMBOL', 1.0]]

96
Design a DFA all strings over $ a, b % in which every pair of adjacent "0" appears before any pair of adjacent "1".
APPEAREDBEFORESTR(REPEAT(STRING(0), TWICE(), REQ()), REPEAT(STRING(1), TWICE(), REQ()), ANYWHERE())
additions -**##**- [['pair', 'TWICE', 1.0], ['adjacent', 'REPEAT', 1.0], ['before', 'APPEAREDBEFORESTR', 1.0]]

97
Accepts just the string MURMUR by itself.
MATCHFORMAT(EXPRESSION(MURMUR))
additions -**##**- [['just', 'MATCHFORMAT', 1.0], ['murmur', 'EXPRESSION', 1.0]]

98
Accepts "FROG" with any prefix.
ENDSWITHP(STRING(FROG))
additions -**##**- [['accepts', 'ENDSWITHP', 0.3333333333333333]]

99
Accepts any string containing "FROG".
CONTAINSP(STRING(FROG))
additions -**##**- [['containing', 'CONTAINSP', 1.0]]

100
Accepts any string containing "MURMURS".
CONTAINSP(STRING(MURMURS))
additions -**##**- [['containing', 'CONTAINSP', 1.0]]

101
Accepts strings consisting of only #0 or more repetitions of "15211".
MATCHFORMAT(REPEAT(STRING(15211), INTEGER(0), RGEQ()))
additions -**##**- [['more', 'RGEQ', 1.0], ['repetitions', 'REPEAT', 1.0], ['only', 'MATCHFORMAT', 1.0]]

102
Accepts strings starting with #0 or more repetitions of "15211".
STARTSWITHP(REPEAT(STRING(15211), INTEGER(0), RGEQ()))
additions -**##**- [['starting', 'STARTSWITHP', 1.0], ['more', 'RGEQ', 1.0], ['repetitions', 'REPEAT', 1.0]]

103
Accepts strings containing "CAT" or "DOG" anywhere.
CONTAINSP(ORSTRINGS(STRING(CAT), STRING(DOG)))
additions -**##**- [['or', 'ORSTRINGS', 1.0], ['containing', 'CONTAINSP', 1.0]]

104
Accepts strings containing "ART" or "ARC" anywhere.
CONTAINSP(ORSTRINGS(STRING(ART), STRING(ARC)))
additions -**##**- [['or', 'ORSTRINGS', 1.0], ['containing', 'CONTAINSP', 1.0]]

105
Accepts strings of even length.
ISEVEN(LENP())
additions -**##**- [['even', 'ISEVEN', 1.0]]

106
Accepts strings with exactly #3 "A".
INTEQUALS(COUNT(STRING(A)), INTEGER(3))
additions -**##**- [['accepts', 'COUNT', 1.0]]

107
Accepts strings with at least #3 "A".
GEQ(COUNT(STRING(A)), INTEGER(3))
additions -**##**- [['least', 'GEQ', 1.0], ['accepts', 'COUNT', 1.0]]

108
Accepts strings where number of "a" is greater than number of "b".
GEQ(COUNT(STRING(a)), COUNT(STRING(b)))
additions -**##**- [['greater', 'GEQ', 1.0], ['accepts', 'COUNT', 1.0]]

109
Accepts strings where number of "a" is equal to number of "b".
INTEQUALS(COUNT(STRING(a)), COUNT(STRING(b)))
additions -**##**- [['accepts', 'COUNT', 1.0]]

110
A FSM in which the language recognized is composed of strings that start and finish with "0" and may contain any string formed from the set $ 0, 1 % between.
BOTH(START(), END(), STRING(0))
additions -**##**- [['start', 'START', 1.0], ['finish', 'END', 1.0], ['and', 'BOTH', 1.0]]

111
A machine in which the language recognized is composed of binary strings of length #4.
INTEQUALS(LENP(), INTEGER(4))
additions -**##**- [['length', 'LENP', 1.0], ['is', 'INTEQUALS', 1.0]]

112
The final example accepts binary strings of any length or composition provided that each contains at least #1 substring of "11"
GEQ(COUNT(STRING(11)), INTEGER(1))
additions -**##**- [['least', 'GEQ', 1.0], ['accepts', 'COUNT', 1.0]]

113
x in RegX and x has an even number of "b"
AND(MATCHFORMAT(EXPRESSION(RegX)), ISEVEN(COUNT(STRING(b))))
additions -**##**- [['in', 'MATCHFORMAT', 1.0], ['even', 'ISEVEN', 1.0], ['regx', 'EXPRESSION', 1.0], ['has', 'COUNT', 1.0], ['and', 'AND', 1.0]]

114
x begins and ends with the sequence "aab".
BOTH(START(), END(), STRING(aab))
additions -**##**- [['begins', 'START', 1.0], ['ends', 'END', 1.0], ['and', 'BOTH', 1.0]]

115
x has an even number of "a" and an odd number of "b".
AND(ISEVEN(COUNT(STRING(a))), ISODD(COUNT(STRING(b))))
additions -**##**- [['odd', 'ISODD', 1.0], ['even', 'ISEVEN', 1.0], ['has', 'COUNT', 1.0], ['and', 'AND', 1.0]]

116
all words over the alphabet $ 0, 1 % that begin with "0"
STARTSWITHP(STRING(0))
additions -**##**- [['begin', 'STARTSWITHP', 1.0]]

117
all words over the alphabet $ 0, 1 % that begin with "0" and end with "0"
AND(STARTSWITHP(STRING(0)), ENDSWITHP(STRING(0)))
additions -**##**- [['begin', 'STARTSWITHP', 1.0], ['end', 'ENDSWITHP', 1.0], ['and', 'AND', 1.0]]

118
all words that contain an even number of  "0"
ISEVEN(COUNT(STRING(0)))
additions -**##**- [['even', 'ISEVEN', 1.0], ['contain', 'COUNT', 1.0]]

119
w contains exactly #1 "0"
INTEQUALS(COUNT(STRING(0)), INTEGER(1))
additions -**##**- [['exactly', 'INTEQUALS', 1.0], ['contains', 'COUNT', 1.0]]

120
w  contains as many subwords "01" as subwords "10"
EQ(COUNTBOTH(ANDSTR(STRING(01), STRING(10))))
additions -**##**- [['contains', 'COUNTBOTH', 1.0], ['as', 'ANDSTR', 1.0]]

121
w contains as many "0" as "1"
EQ(COUNTBOTH(ANDSTR(STRING(0), STRING(1))))
additions -**##**- [['contains', 'COUNTBOTH', 1.0], ['as', 'ANDSTR', 1.0]]

122
w begins with "0"
STARTSWITHP(STRING(0))
additions -**##**- [['begins', 'STARTSWITHP', 1.0]]

123
w ends with "0"
ENDSWITHP(STRING(0))
additions -**##**- [['ends', 'ENDSWITHP', 1.0]]

124
w contains a positive even number of "0"
ISEVEN(COUNT(STRING(0)))
additions -**##**- [['even', 'ISEVEN', 1.0], ['contains', 'COUNT', 1.0]]

125
w is multiple of #3 when interpreted as a binary integer
ISMULTIPLEOFP(INTEGER(3))
additions -**##**- [['multiple', 'ISMULTIPLEOFP', 1.0]]

126
w is not a multiple of #3 when interpreted as a binary integer
NOT(ISMULTIPLEOFP(INTEGER(3)))
additions -**##**- [['not', 'NOT', 1.0], ['multiple', 'ISMULTIPLEOFP', 1.0]]

127
the set of strings in RegX containing the substring "481"
BoolCondition(MATCHFORMAT(EXPRESSION(RegX)), CONTAINSP(STRING(481)))
additions -**##**- [['regx', 'EXPRESSION', 1.0], ['in', 'CONTAINSP', 1.0]]

128
the set of strings in RegX whose length is divisible by either #2 or whose length is divisible by #7
BoolCondition(MATCHFORMAT(EXPRESSION(RegX)), OR(ISDIVISIBLEBY(LENP(), INTEGER(2)), ISDIVISIBLEBY(LENP(), INTEGER(7))))
additions -**##**- [['or', 'OR', 1.0], ['in', 'MATCHFORMAT', 1.0], ['length', 'LENP', 1.0], ['divisible', 'ISDIVISIBLEBY', 1.0], ['regx', 'EXPRESSION', 1.0]]

129
the automaton accepts only the empty string
EMPTYSET()
additions -**##**- [['empty', 'EMPTYSET', 1.0]]

130
An automaton that accepts strings with an even number of "1".
ISEVEN(COUNT(STRING(1)))
additions -**##**- [['even', 'ISEVEN', 1.0], ['accepts', 'COUNT', 1.0]]

131
An automaton that accepts all strings ending with a "0"
ENDSWITHP(STRING(0))
additions -**##**- [['ending', 'ENDSWITHP', 1.0]]

132
An automaton that accepts multiples of #5.
ISMULTIPLEOFP(INTEGER(5))
additions -**##**- [['multiples', 'ISMULTIPLEOFP', 1.0]]

133
The set of all strings that contain the substring "010".
CONTAINSP(STRING(010))
additions -**##**- [['contain', 'CONTAINSP', 1.0]]

134
The set of all strings that do not contain the substring "000".
NOT(CONTAINSP(STRING(000)))
additions -**##**- [['not', 'NOT', 1.0], ['contain', 'CONTAINSP', 1.0]]

135
The set of all strings that either contain an even number of "0" or contain at most #3 "0"
OR(ISEVEN(COUNT(STRING(0))), LEQ(COUNT(STRING(0)), INTEGER(3)))
additions -**##**- [['or', 'OR', 1.0], ['most', 'LEQ', 1.0], ['even', 'ISEVEN', 1.0], ['contain', 'COUNT', 1.0]]

136
The set of all strings such that the #5th symbol from the end of the string is a "1".
STREQUALS(SYMBOLAT(MINUS(INTEGER(5))), STRING(1))
additions -**##**- [['symbol', 'SYMBOLAT', 1.0], ['is', 'STREQUALS', 1.0], ['end', 'MINUS', 1.0]]

137
The set of all strings with at most #1 #3 of adjacent "0".
LEQ(COUNT(REPEAT(STRING(0), INTEGER(3), REQ())), INTEGER(1))
additions -**##**- [['adjacent', 'REPEAT', 1.0], ['most', 'LEQ', 1.0], ['with', 'COUNT', 1.0]]

138
The set of all strings not containing the substring "110".
NOT(CONTAINSP(STRING(110)))
additions -**##**- [['not', 'NOT', 1.0], ['containing', 'CONTAINSP', 1.0]]

139
The set of all strings in which every pair of adjacent "0" appears before any pair of adjacent "1"
APPEAREDBEFORESTR(REPEAT(STRING(0), TWICE(), REQ()), REPEAT(STRING(1), TWICE(), REQ()), ANYWHERE())
additions -**##**- [['pair', 'TWICE', 1.0], ['adjacent', 'REPEAT', 1.0], ['before', 'APPEAREDBEFORESTR', 1.0]]

140
The set of all strings over RegX that have the same number of occurrences of the substring "01" as of the substring "10".
BoolCondition(MATCHFORMAT(EXPRESSION(RegX)), EQ(COUNTBOTH(ANDSTR(STRING(01), STRING(10)))))
additions -**##**- [['over', 'MATCHFORMAT', 1.0], ['regx', 'EXPRESSION', 1.0], ['number', 'COUNTBOTH', 0.333333333333], ['as', 'ANDSTR', 1.0]]

141
Construct an automaton that accepts all words over singleton alphabet $ a % of even length.
ISEVEN(LENP())
additions -**##**- [['even', 'ISEVEN', 1.0]]

142
Construct an automaton for strings containing even number of letters "a" and containing odd number of letters "b"
AND(ISEVEN(COUNT(STRING(a))), ISODD(COUNT(STRING(b))))
additions -**##**- [['odd', 'ISODD', 1.0], ['even', 'ISEVEN', 1.0], ['containing', 'COUNT', 1.0], ['and', 'AND', 1.0]]

143
w has an even number of "a"
ISEVEN(COUNT(STRING(a)))
additions -**##**- [['even', 'ISEVEN', 1.0], ['has', 'COUNT', 1.0]]

144
Strings over $ a, b % with length divisible by #5.
ISDIVISIBLEBY(LENP(), INTEGER(5))
additions -**##**- [['length', 'LENP', 1.0], ['divisible', 'ISDIVISIBLEBY', 1.0]]

145
Strings that contain the same number of "01" as "10".
EQ(COUNTBOTH(ANDSTR(STRING(01), STRING(10))))
additions -**##**- [['contain', 'COUNTBOTH', 1.0], ['as', 'ANDSTR', 1.0]]

146
Odd number of "1"
ISODD(COUNT(STRING(1)))
additions -**##**- [['odd', 'ISODD', 1.0], ['number', 'COUNT', 1.0]]

147
Strings over $ a, b % that contain "aba" as a substring.
CONTAINSP(STRING(aba))
additions -**##**- [['contain', 'CONTAINSP', 1.0]]

148
Construct an automaton over the alphabet $ a, b % accepting strings which end with "b".
ENDSWITHP(STRING(b))
additions -**##**- [['end', 'ENDSWITHP', 1.0]]

149
Construct an automaton whose language is the set of all strings of odd length over the alphabet $ a, b %.
ISODD(LENP())
additions -**##**- [['length', 'LENP', 1.0], ['odd', 'ISODD', 1.0]]

150
Construct an automaton whose language is the set of all strings that contain at least #2 "a".
GEQ(COUNT(STRING(a)), INTEGER(2))
additions -**##**- [['least', 'GEQ', 1.0], ['is', 'COUNT', 1.0]]

151
Construct an automaton whose language is the set of all strings that contain at most #3 "b".
LEQ(COUNT(STRING(b)), INTEGER(3))
additions -**##**- [['most', 'LEQ', 1.0], ['is', 'COUNT', 1.0]]

152
Construct a nondeterministic automaton whose language is the set of all strings that contain "010" as a substring.
CONTAINSP(STRING(010))
additions -**##**- [['contain', 'CONTAINSP', 1.0]]

153
Construct a deterministic automaton whose language is the set of all strings that contain "010" as a substring.
CONTAINSP(STRING(010))
additions -**##**- [['contain', 'CONTAINSP', 1.0]]

154
Construct an automaton whose language is the set of all strings that contain at least #2 "a" and at most #3 "b".
AND(GEQ(COUNT(STRING(a)), INTEGER(2)), LEQ(COUNT(STRING(b)), INTEGER(3)))
additions -**##**- [['most', 'LEQ', 1.0], ['least', 'GEQ', 1.0], ['is', 'COUNT', 1.0], ['and', 'AND', 1.0]]

155
Words over S = $ a, b % with equal number of "a" and "b"
EQ(COUNTBOTH(ANDSTR(STRING(a), STRING(b))))
additions -**##**- [['equal', 'EQ', 1.0], ['number', 'COUNTBOTH', 0.333333333333], ['and', 'ANDSTR', 1.0]]

156
Recognises words which do not end in "b"
NOT(ENDSWITHP(STRING(b)))
additions -**##**- [['not', 'NOT', 1.0], ['end', 'ENDSWITHP', 1.0]]

157
recognises words with even number of "b".
ISEVEN(COUNT(STRING(b)))
additions -**##**- [['even', 'ISEVEN', 1.0], ['with', 'COUNT', 1.0]]

158
Words over a, b having either #1 "b" or #2 consecutive "b"
CONTAINSP(ORSTRINGS(STRING(b), REPEAT(STRING(b), INTEGER(2), REQ())))
additions -**##**- [['consecutive', 'REPEAT', 1.0], ['or', 'ORSTRINGS', 1.0]]

159
Every "a" is followed by "b"
APPEAREDBEFORESTR(STRING(a), STRING(b), ANYWHERE())
additions -**##**- [['is', 'APPEAREDBEFORESTR', 1.0]]

160
Infinite words where every even position has letter "a".
FORALLINT(ISEVENP(), STREQUALS(SYMBOLATP(), STRING(a)))
additions -**##**- [['position', 'SYMBOLATP', 1.0], ['has', 'STREQUALS', 0.3333333333333333], ['even', 'ISEVENP', 1.0], ['every', 'FORALLINT', 1.0]]

161
the set of strings with an even number of "1" and an even number of "0"
AND(ISEVEN(COUNT(STRING(1))), ISEVEN(COUNT(STRING(0))))
additions -**##**- [['even', 'ISEVEN', 1.0], ['with', 'COUNT', 1.0], ['and', 'AND', 1.0]]

162
binary odd numbers
ISODD(BINARYOFSTRING())
additions -**##**- [['odd', 'ISODD', 1.0], ['binary', 'BINARYOFSTRING', 1.0]]

163
the set of all strings over the alphabet $ a, b % that have an even number of "b"
ISEVEN(COUNT(STRING(b)))
additions -**##**- [['even', 'ISEVEN', 1.0], ['have', 'COUNT', 1.0]]

164
any sequence on the alphabet I = $ a, b % containing at most #2 consecutive "b".
CONTAINSP(REPEAT(STRING(b), INTEGER(2), RLEQ()))
additions -**##**- [['most', 'RLEQ', 1.0], ['consecutive', 'REPEAT', 1.0], ['containing', 'CONTAINSP', 1.0]]

165
the set of strings on the alphabet I = $ 0, 1 % containing at least #2 consecutive "0" or #2 consecutive "1".
CONTAINSP(ORSTRINGS(REPEAT(STRING(0), INTEGER(2), RGEQ()), REPEAT(STRING(1), INTEGER(2), REQ())))
additions -**##**- [['least', 'RGEQ', 1.0], ['consecutive', 'REPEAT', 1.0], ['or', 'ORSTRINGS', 1.0], ['containing', 'CONTAINSP', 1.0]]

166
automaton accepting the language of strings that have #2 consecutive "0" or #2 consecutive "1"
CONTAINSP(ORSTRINGS(REPEAT(STRING(0), INTEGER(2), REQ()), REPEAT(STRING(1), INTEGER(2), REQ())))
additions -**##**- [['consecutive', 'REPEAT', 1.0], ['or', 'ORSTRINGS', 1.0], ['strings', 'CONTAINSP', 0.5]]

167
finite automata which accept sets of strings composed of zeros and ones which are a multiple of #3 in length.
ISMULTIPLEOF(LENP(), INTEGER(3))
additions -**##**- [['sets', 'LENP', 0.2], ['multiple', 'ISMULTIPLEOF', 1.0]]

168
finite automata which accept sets of strings composed of zeros and ones which end with the string "00".
ENDSWITHP(STRING(00))
additions -**##**- [['end', 'ENDSWITHP', 1.0]]

169
finite automata which accept sets of strings composed of zeros and ones which possess runs of even numbers of "0" and odd numbers of "1"
AND(ISEVEN(COUNT(STRING(0))), ISODD(COUNT(STRING(1))))
additions -**##**- [['odd', 'ISODD', 1.0], ['even', 'ISEVEN', 1.0], ['accept', 'COUNT', 1.0], ['and', 'AND', 1.0]]

170
Never contain #3 adjacent "1".
NOT(CONTAINSP(REPEAT(STRING(1), INTEGER(3), REQ())))
additions -**##**- [['adjacent', 'REPEAT', 1.0], ['never', 'NOT', 1.0], ['contain', 'CONTAINSP', 1.0]]

171
Contain an even number of "0" or an odd number of "1"
OR(ISEVEN(COUNT(STRING(0))), ISODD(COUNT(STRING(1))))
additions -**##**- [['or', 'OR', 1.0], ['odd', 'ISODD', 1.0], ['even', 'ISEVEN', 1.0], ['contain', 'COUNT', 1.0]]

172
Design a linear bounded automaton which accepts strings of the form RegX.
MATCHFORMAT(EXPRESSION(RegX))
additions -**##**- [['a', 'MATCHFORMAT', 0.25]]

173
strings over the alphabet $ a, b % that contain exactly #2 "a"
INTEQUALS(COUNT(STRING(a)), INTEGER(2))
additions -**##**- [['exactly', 'INTEQUALS', 1.0], ['contain', 'COUNT', 1.0]]

174
all strings over the alphabet $ a, b % that do not end with "ab".
NOT(ENDSWITHP(STRING(ab)))
additions -**##**- [['not', 'NOT', 1.0], ['end', 'ENDSWITHP', 1.0]]

175
all strings over the alphabet $ a, b % that contain no more than #1 occurence of the string "aa".
NOT(GREATER(COUNT(STRING(aa)), INTEGER(1)))
additions -**##**- [['no', 'NOT', 1.0], ['more', 'GREATER', 1.0], ['contain', 'COUNT', 1.0]]

176
strings of even lengths over the alphabet of $ a, b %
ISEVEN(LENP())
additions -**##**- [['lengths', 'LENP', 1.0], ['even', 'ISEVEN', 1.0]]

177
it is the set of strings over the alphabet $ a, b % that contain an odd number of "b"
ISODD(COUNT(STRING(b)))
additions -**##**- [['odd', 'ISODD', 1.0], ['is', 'COUNT', 1.0]]

178
the set of all palindromes.
CONDITIONALPALIN(ALWAYS())
additions -**##**- []

179
the set of all odd length palindromes.
CONDITIONALPALIN(ISODD(LENP()))
additions -**##**- [['length', 'LENP', 1.0], ['odd', 'ISODD', 1.0]]

180
the set of strings that begin and end with the same symbol
STREQUALS(FIRSTSYMBOL(), LASTSYMBOL())
additions -**##**- [['same', 'STREQUALS', 1.0], ['end', 'LASTSYMBOL', 1.0], ['begin', 'FIRSTSYMBOL', 1.0]]

181
the set of all even length palindromes.
CONDITIONALPALIN(ISEVEN(LENP()))
additions -**##**- [['length', 'LENP', 1.0], ['even', 'ISEVEN', 1.0]]

182
The set of all strings containing the substring "00".
CONTAINSP(STRING(00))
additions -**##**- [['containing', 'CONTAINSP', 1.0]]

183
The set of all strings containing at most #2 "0".
LEQ(COUNT(STRING(0)), INTEGER(2))
additions -**##**- [['most', 'LEQ', 1.0], ['containing', 'COUNT', 1.0]]

184
The set of all strings containing at least #2 "0".
GEQ(COUNT(STRING(0)), INTEGER(2))
additions -**##**- [['least', 'GEQ', 1.0], ['containing', 'COUNT', 1.0]]

185
L is the set of all bit strings with even number of "1"
ISEVEN(COUNT(STRING(1)))
additions -**##**- [['even', 'ISEVEN', 1.0], ['is', 'COUNT', 1.0]]

186
strings beginning with the sequence "ab"
STARTSWITHP(STRING(ab))
additions -**##**- [['beginning', 'STARTSWITHP', 1.0]]

187
accepts any string that includes the sequence "abcba" within it.
CONTAINSP(STRING(abcba))
additions -**##**- [['string', 'CONTAINSP', 0.5]]

188
the set of all strings not containing #2 consecutive "0"
NOT(CONTAINSP(REPEAT(STRING(0), INTEGER(2), REQ())))
additions -**##**- [['consecutive', 'REPEAT', 1.0], ['not', 'NOT', 1.0], ['containing', 'CONTAINSP', 1.0]]

189
the set of all strings containing #2 consecutive "0"
CONTAINSP(REPEAT(STRING(0), INTEGER(2), REQ()))
additions -**##**- [['consecutive', 'REPEAT', 1.0], ['containing', 'CONTAINSP', 1.0]]

190
the set of all strings with an even number of "0"
ISEVEN(COUNT(STRING(0)))
additions -**##**- [['even', 'ISEVEN', 1.0], ['with', 'COUNT', 1.0]]

191
the set of all strings not containing #3 consecutive "0"
NOT(CONTAINSP(REPEAT(STRING(0), INTEGER(3), REQ())))
additions -**##**- [['consecutive', 'REPEAT', 1.0], ['not', 'NOT', 1.0], ['containing', 'CONTAINSP', 1.0]]

192
the set of all strings containing #3 consecutive "0"
CONTAINSP(REPEAT(STRING(0), INTEGER(3), REQ()))
additions -**##**- [['consecutive', 'REPEAT', 1.0], ['containing', 'CONTAINSP', 1.0]]

193
the set of all strings with an odd number of "0"
ISODD(COUNT(STRING(0)))
additions -**##**- [['odd', 'ISODD', 1.0], ['with', 'COUNT', 1.0]]

194
the length of w is divisible by #3
ISDIVISIBLEBY(LENP(), INTEGER(3))
additions -**##**- [['length', 'LENP', 1.0], ['divisible', 'ISDIVISIBLEBY', 1.0]]

195
a "110" is not a substring of w
NOT(CONTAINSP(STRING(110)))
additions -**##**- [['not', 'NOT', 1.0], ['substring', 'CONTAINSP', 1.0]]

196
w contains at least #5 "1"
GEQ(COUNT(STRING(1)), INTEGER(5))
additions -**##**- [['least', 'GEQ', 1.0], ['contains', 'COUNT', 1.0]]

197
w contains the substring "1011"
CONTAINSP(STRING(1011))
additions -**##**- [['contains', 'CONTAINSP', 1.0]]

198
w contains at least #2 "1" and contains at most #2 "0"
AND(GEQ(COUNT(STRING(1)), INTEGER(2)), LEQ(COUNT(STRING(0)), INTEGER(2)))
additions -**##**- [['most', 'LEQ', 1.0], ['least', 'GEQ', 1.0], ['contains', 'COUNT', 1.0], ['and', 'AND', 1.0]]

199
w contains an odd number of "1" or contains exactly #2 "0"
OR(ISODD(COUNT(STRING(1))), INTEQUALS(COUNT(STRING(0)), INTEGER(2)))
additions -**##**- [['or', 'OR', 1.0], ['odd', 'ISODD', 1.0], ['exactly', 'INTEQUALS', 1.0], ['contains', 'COUNT', 1.0]]

200
w begins with "1" and ends with "0"
AND(STARTSWITHP(STRING(1)), ENDSWITHP(STRING(0)))
additions -**##**- [['begins', 'STARTSWITHP', 1.0], ['ends', 'ENDSWITHP', 1.0], ['and', 'AND', 1.0]]

201
every odd position in w is "1"
FORALLINT(ISODDP(), STREQUALS(SYMBOLATP(), STRING(1)))
additions -**##**- [['position', 'SYMBOLATP', 1.0], ['is', 'STREQUALS', 1.0], ['odd', 'ISODDP', 1.0], ['every', 'FORALLINT', 1.0]]

202
w has length at least #3 and its #3rd symbol is "0"
AND(GEQ(LENP(), INTEGER(3)), STREQUALS(SYMBOLAT(INTEGER(3)), STRING(0)))
additions -**##**- [['symbol', 'SYMBOLAT', 1.0], ['is', 'STREQUALS', 1.0], ['length', 'LENP', 1.0], ['least', 'GEQ', 1.0], ['and', 'AND', 1.0]]

203
W ends with "10"
ENDSWITHP(STRING(10))
additions -**##**- [['ends', 'ENDSWITHP', 1.0]]

204
w has length at least #2 and does not end with "10"
AND(GEQ(LENP(), INTEGER(2)), NOT(ENDSWITHP(STRING(10))))
additions -**##**- [['not', 'NOT', 1.0], ['length', 'LENP', 1.0], ['least', 'GEQ', 1.0], ['end', 'ENDSWITHP', 1.0], ['and', 'AND', 1.0]]

205
w begins with "1" or ends with "0"
OR(STARTSWITHP(STRING(1)), ENDSWITHP(STRING(0)))
additions -**##**- [['begins', 'STARTSWITHP', 1.0], ['or', 'OR', 1.0], ['ends', 'ENDSWITHP', 1.0]]

206
w contains at least #3 "1"
GEQ(COUNT(STRING(1)), INTEGER(3))
additions -**##**- [['least', 'GEQ', 1.0], ['contains', 'COUNT', 1.0]]

207
w contains at least #2 "1" and contains at most #1 "0"
AND(GEQ(COUNT(STRING(1)), INTEGER(2)), LEQ(COUNT(STRING(0)), INTEGER(1)))
additions -**##**- [['most', 'LEQ', 1.0], ['least', 'GEQ', 1.0], ['contains', 'COUNT', 1.0], ['and', 'AND', 1.0]]

208
w contains an even number of "0" and exactly #2 "1"
AND(ISEVEN(COUNT(STRING(0))), INTEQUALS(COUNT(STRING(1)), INTEGER(2)))
additions -**##**- [['even', 'ISEVEN', 1.0], ['exactly', 'INTEQUALS', 1.0], ['contains', 'COUNT', 1.0], ['and', 'AND', 1.0]]

209
w contains exactly #2 "0" and contains at least #2 "1"
AND(INTEQUALS(COUNT(STRING(0)), INTEGER(2)), GEQ(COUNT(STRING(1)), INTEGER(2)))
additions -**##**- [['exactly', 'INTEQUALS', 1.0], ['least', 'GEQ', 1.0], ['contains', 'COUNT', 1.0], ['and', 'AND', 1.0]]

210
every odd position in w is "1"
FORALLINT(ISODDP(), STREQUALS(SYMBOLATP(), STRING(1)))
additions -**##**- [['position', 'SYMBOLATP', 1.0], ['is', 'STREQUALS', 1.0], ['odd', 'ISODDP', 1.0], ['every', 'FORALLINT', 1.0]]

211
w contains at least #3 "1"
GEQ(COUNT(STRING(1)), INTEGER(3))
additions -**##**- [['least', 'GEQ', 1.0], ['contains', 'COUNT', 1.0]]

212
w contains at least #2 "1" and contains at most #1 "0"
AND(GEQ(COUNT(STRING(1)), INTEGER(2)), LEQ(COUNT(STRING(0)), INTEGER(1)))
additions -**##**- [['most', 'LEQ', 1.0], ['least', 'GEQ', 1.0], ['contains', 'COUNT', 1.0], ['and', 'AND', 1.0]]

213
w contains an even number of "0" and exactly #2 "1"
AND(ISEVEN(COUNT(STRING(0))), INTEQUALS(COUNT(STRING(1)), INTEGER(2)))
additions -**##**- [['even', 'ISEVEN', 1.0], ['exactly', 'INTEQUALS', 1.0], ['contains', 'COUNT', 1.0], ['and', 'AND', 1.0]]

214
w contains exactly #2 "0" and contains at least #2 "1"
AND(INTEQUALS(COUNT(STRING(0)), INTEGER(2)), GEQ(COUNT(STRING(1)), INTEGER(2)))
additions -**##**- [['exactly', 'INTEQUALS', 1.0], ['least', 'GEQ', 1.0], ['contains', 'COUNT', 1.0], ['and', 'AND', 1.0]]

215
every odd position in w is "1"
FORALLINT(ISODDP(), STREQUALS(SYMBOLATP(), STRING(1)))
additions -**##**- [['position', 'SYMBOLATP', 1.0], ['is', 'STREQUALS', 1.0], ['odd', 'ISODDP', 1.0], ['every', 'FORALLINT', 1.0]]

216
the number of "a" in w is equal to the number of "b" in w
INTEQUALS(COUNT(STRING(a)), COUNT(STRING(b)))
additions -**##**- [['is', 'INTEQUALS', 1.0], ['number', 'COUNT', 1.0]]

217
w does not contain the substring "abba"
NOT(CONTAINSP(STRING(abba)))
additions -**##**- [['not', 'NOT', 1.0], ['contain', 'CONTAINSP', 1.0]]

218
w does not contain the substring "bbaa".
NOT(CONTAINSP(STRING(bbaa)))
additions -**##**- [['not', 'NOT', 1.0], ['contain', 'CONTAINSP', 1.0]]

219
the set of all strings not containing #2 consecutive "0"
NOT(CONTAINSP(REPEAT(STRING(0), INTEGER(2), REQ())))
additions -**##**- [['consecutive', 'REPEAT', 1.0], ['not', 'NOT', 1.0], ['containing', 'CONTAINSP', 1.0]]

220
the set of all strings containing #2 consecutive "0"
CONTAINSP(REPEAT(STRING(0), INTEGER(2), REQ()))
additions -**##**- [['consecutive', 'REPEAT', 1.0], ['containing', 'CONTAINSP', 1.0]]

221
the set of all strings with an even number of "0"
ISEVEN(COUNT(STRING(0)))
additions -**##**- [['even', 'ISEVEN', 1.0], ['with', 'COUNT', 1.0]]

222
the set of all strings not containing #3 consecutive "0"
NOT(CONTAINSP(REPEAT(STRING(0), INTEGER(3), REQ())))
additions -**##**- [['consecutive', 'REPEAT', 1.0], ['not', 'NOT', 1.0], ['containing', 'CONTAINSP', 1.0]]

223
the set of all strings containing #3 consecutive "0"
CONTAINSP(REPEAT(STRING(0), INTEGER(3), REQ()))
additions -**##**- [['consecutive', 'REPEAT', 1.0], ['containing', 'CONTAINSP', 1.0]]

224
the set of all strings with an odd number of "0"
ISODD(COUNT(STRING(0)))
additions -**##**- [['odd', 'ISODD', 1.0], ['with', 'COUNT', 1.0]]

225
the set of all strings with an even number of "0" and an even number of "1"
AND(ISEVEN(COUNT(STRING(0))), ISEVEN(COUNT(STRING(1))))
additions -**##**- [['even', 'ISEVEN', 1.0], ['with', 'COUNT', 1.0], ['and', 'AND', 1.0]]

226
Construct a DFA for the regular expression RegX
MATCHFORMAT(EXPRESSION(RegX))
additions -**##**- [['expression', 'MATCHFORMAT', 1.0], ['regx', 'EXPRESSION', 1.0]]

227
Construct a DFA over RegX which produces not more than #3 "a"
BoolCondition(MATCHFORMAT(EXPRESSION(RegX)), NOT(GREATER(COUNT(STRING(a)), INTEGER(3))))
additions -**##**- [['not', 'NOT', 1.0], ['over', 'MATCHFORMAT', 1.0], ['more', 'GREATER', 1.0], ['regx', 'EXPRESSION', 1.0], ['produces', 'COUNT', 1.0]]

228
construct a DFA that will accept strings on $ a, b % where the number of "b" divisible by #3
ISDIVISIBLEBY(COUNT(STRING(b)), INTEGER(3))
additions -**##**- [['divisible', 'ISDIVISIBLEBY', 1.0], ['accept', 'COUNT', 1.0]]

229
Construct a finite automaton that accepts the set of all strings in RegX such that the last symbol in input string appears earlier in the string
BoolCondition(MATCHFORMAT(EXPRESSION(RegX)), APPEAREDBEFOREP(LASTSYMBOL()))
additions -**##**- [['in', 'MATCHFORMAT', 1.0], ['last', 'LASTSYMBOL', 1.0], ['regx', 'EXPRESSION', 1.0], ['earlier', 'APPEAREDBEFOREP', 1.0]]

230
w contains exactly #2 "a"
INTEQUALS(COUNT(STRING(a)), INTEGER(2))
additions -**##**- [['exactly', 'INTEQUALS', 1.0], ['contains', 'COUNT', 1.0]]

231
w contains the substring "0110"
CONTAINSP(STRING(0110))
additions -**##**- [['contains', 'CONTAINSP', 1.0]]

232
the length of w is odd
ISODD(LENP())
additions -**##**- [['length', 'LENP', 1.0], ['odd', 'ISODD', 1.0]]

233
w contains an even number of "a".
ISEVEN(COUNT(STRING(a)))
additions -**##**- [['even', 'ISEVEN', 1.0], ['contains', 'COUNT', 1.0]]

234
Construct an epsilon-automaton recognising the language described by the given regular expression RegX
MATCHFORMAT(EXPRESSION(RegX))
additions -**##**- [['expression', 'MATCHFORMAT', 1.0], ['regx', 'EXPRESSION', 1.0]]

235
Construct a minimal deterministic finite automaton corresponding to the given regular expression RegX
MATCHFORMAT(EXPRESSION(RegX))
additions -**##**- [['expression', 'MATCHFORMAT', 1.0], ['regx', 'EXPRESSION', 1.0]]

236
Construct an epsilon-automaton recognising the language described by the given regular expression RegX
MATCHFORMAT(EXPRESSION(RegX))
additions -**##**- [['expression', 'MATCHFORMAT', 1.0], ['regx', 'EXPRESSION', 1.0]]

237
w contains the substring "abb"
CONTAINSP(STRING(abb))
additions -**##**- [['contains', 'CONTAINSP', 1.0]]

238
w contains at least #3 "1"
GEQ(COUNT(STRING(1)), INTEGER(3))
additions -**##**- [['least', 'GEQ', 1.0], ['contains', 'COUNT', 1.0]]

239
w does not contain the substring "111"
NOT(CONTAINSP(STRING(111)))
additions -**##**- [['not', 'NOT', 1.0], ['contain', 'CONTAINSP', 1.0]]

240
Construct an epsilon-automaton recognising the language described by the given regular expression RegX
MATCHFORMAT(EXPRESSION(RegX))
additions -**##**- [['expression', 'MATCHFORMAT', 1.0], ['regx', 'EXPRESSION', 1.0]]

241
set of x such that any "a" in x is followed by a "b"
APPEAREDBEFORESTR(STRING(a), STRING(b), ANYWHERE())
additions -**##**- [['is', 'APPEAREDBEFORESTR', 1.0]]

242
set of x such that any "b" in x is followed by a "a"
APPEAREDBEFORESTR(STRING(b), STRING(a), ANYWHERE())
additions -**##**- [['is', 'APPEAREDBEFORESTR', 1.0]]

243
w contains an odd number of "a" and an even number of "b"
AND(ISODD(COUNT(STRING(a))), ISEVEN(COUNT(STRING(b))))
additions -**##**- [['odd', 'ISODD', 1.0], ['even', 'ISEVEN', 1.0], ['contains', 'COUNT', 1.0], ['and', 'AND', 1.0]]

244
each "b" in w is followed by an "a" later on after the "b"
APPEAREDBEFORESTR(STRING(a), STRING(b), ANYWHERE())
additions -**##**- [['is', 'APPEAREDBEFORESTR', 1.0]]

245
u contains even number of "a"
ISEVEN(COUNT(STRING(a)))
additions -**##**- [['even', 'ISEVEN', 1.0], ['contains', 'COUNT', 1.0]]

