1
Insert ":" after #1st word
INSERT(STRING(:), Position(AFTER(WORDTOKEN()), INTEGER(1)), DOCUMENT())
options for additions -##**##- [['insert', 'INSERT', 0.95], ['after', 'AFTER', 0.95], ['word', 'WORDTOKEN', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['insert', 'INSERT', 0.95], ['after', 'AFTER', 0.95]]

2
Insert a ":" immediately after a sequence of numbers
INSERT(STRING(:), Position(AFTER(NUMBERTOKEN()), ALL()), DOCUMENT())
options for additions -##**##- [['insert', 'INSERT', 0.95], ['after', 'AFTER', 0.95], ['numbers', 'NUMBERTOKEN', 0.95]]
actual additions -**##**- [['numbers', 'NUMBERTOKEN', 0.95], ['insert', 'INSERT', 0.95], ['after', 'AFTER', 0.95]]

3
Insert ":" before every #1st word
INSERT(STRING(:), Position(BEFORE(WORDTOKEN()), INTEGER(1)), DOCUMENT())
options for additions -##**##- [['insert', 'INSERT', 0.95], ['before', 'BEFORE', 0.95], ['word', 'WORDTOKEN', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['insert', 'INSERT', 0.95], ['before', 'BEFORE', 0.95]]

4
Put ":" before the #1st " " in every line
INSERT(STRING(:), Position(BEFORE(STRING( )), INTEGER(1)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['put', 'INSERT', 0.45], ['before', 'BEFORE', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['line', 'LINESCOPE', 0.95], ['put', 'INSERT', 0.45], ['before', 'BEFORE', 0.95], ['every', 'ALL', 0.95]]

5
Enter ":" before " "
INSERT(STRING(:), Position(BEFORE(STRING( )), ALL()), DOCUMENT())
options for additions -##**##- [['enter', 'INSERT', 0.9], ['before', 'BEFORE', 0.95]]
actual additions -**##**- [['enter', 'INSERT', 0.9], ['before', 'BEFORE', 0.95]]

6
Put ":" before the #1st " " in every line
INSERT(STRING(:), Position(BEFORE(STRING( )), INTEGER(1)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['put', 'INSERT', 0.4275], ['before', 'BEFORE', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['line', 'LINESCOPE', 0.95], ['put', 'INSERT', 0.4275], ['before', 'BEFORE', 0.95], ['every', 'ALL', 0.95]]

7
Enter ":" before " "
INSERT(STRING(:), Position(BEFORE(STRING( )), ALL()), DOCUMENT())
options for additions -##**##- [['enter', 'INSERT', 0.855], ['before', 'BEFORE', 0.95]]
actual additions -**##**- [['enter', 'INSERT', 0.855], ['before', 'BEFORE', 0.95]]

8
put ":" before a " "
INSERT(STRING(:), Position(BEFORE(STRING( )), ALL()), DOCUMENT())
options for additions -##**##- [['put', 'INSERT', 0.4275], ['before', 'BEFORE', 0.95]]
actual additions -**##**- [['put', 'INSERT', 0.4275], ['before', 'BEFORE', 0.95]]

9
put ":" after the #1st word
INSERT(STRING(:), Position(AFTER(WORDTOKEN()), INTEGER(1)), DOCUMENT())
options for additions -##**##- [['put', 'INSERT', 0.4275], ['after', 'AFTER', 0.95], ['word', 'WORDTOKEN', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['put', 'INSERT', 0.4275], ['after', 'AFTER', 0.95]]

10
Insert ":" after the integer in each line
INSERT(STRING(:), Position(AFTER(NUMBERTOKEN()), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['after', 'AFTER', 0.95], ['integer', 'NUMBERTOKEN', 0.45], ['each', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['integer', 'NUMBERTOKEN', 0.45], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['each', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

11
Replace " " by ":" and " "
REPLACE(SelectString(STRING( ), ALWAYS(), ALL()), BY(CONCATENATE(STRING(:), STRING( ))), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['by', 'BY', 0.95], ['and', 'CONCATENATE', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['and', 'CONCATENATE', 0.95], ['by', 'BY', 0.95]]

12
put ":" after every numeral in every line
INSERT(STRING(:), Position(AFTER(NUMBERTOKEN()), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['put', 'INSERT', 0.4275], ['after', 'AFTER', 0.95], ['numeral', 'NUMBERTOKEN', 0.95], ['every', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['numeral', 'NUMBERTOKEN', 0.95], ['line', 'LINESCOPE', 0.95], ['put', 'INSERT', 0.4275], ['every', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

13
after #1st word put ":"
INSERT(STRING(:), Position(AFTER(WORDTOKEN()), INTEGER(1)), DOCUMENT())
options for additions -##**##- [['put', 'INSERT', 0.4275], ['after', 'AFTER', 0.95], ['word', 'WORDTOKEN', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['put', 'INSERT', 0.4275], ['after', 'AFTER', 0.95]]

14
Insert a ":" after the #1st word in every line
INSERT(STRING(:), Position(AFTER(WORDTOKEN()), INTEGER(1)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['after', 'AFTER', 0.95], ['word', 'WORDTOKEN', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['every', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

15
insert ":" before #1st " "
INSERT(STRING(:), Position(BEFORE(STRING( )), INTEGER(1)), DOCUMENT())
options for additions -##**##- [['insert', 'INSERT', 0.95], ['before', 'BEFORE', 0.95]]
actual additions -**##**- [['insert', 'INSERT', 0.95], ['before', 'BEFORE', 0.95]]

16
Insert a ":" after numbers in each line
INSERT(STRING(:), Position(AFTER(NUMBERTOKEN()), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['after', 'AFTER', 0.95], ['numbers', 'NUMBERTOKEN', 0.95], ['each', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['numbers', 'NUMBERTOKEN', 0.95], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['each', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

17
insert a ":" after #1st numeric letter
INSERT(STRING(:), Position(AFTER(NUMBERTOKEN()), INTEGER(1)), DOCUMENT())
options for additions -##**##- [['insert', 'INSERT', 0.95], ['after', 'AFTER', 0.95], ['numeric', 'NUMBERTOKEN', 0.9025]]
actual additions -**##**- [['numeric', 'NUMBERTOKEN', 0.9025], ['insert', 'INSERT', 0.95], ['after', 'AFTER', 0.95]]

18
Add a ":" after the number
INSERT(STRING(:), Position(AFTER(NUMBERTOKEN()), ALL()), DOCUMENT())
options for additions -##**##- [['add', 'INSERT', 0.45], ['after', 'AFTER', 0.95], ['number', 'NUMBERTOKEN', 0.95]]
actual additions -**##**- [['number', 'NUMBERTOKEN', 0.95], ['add', 'INSERT', 0.45], ['after', 'AFTER', 0.95]]

19
Append a ":" after an integer
INSERT(STRING(:), Position(AFTER(NUMBERTOKEN()), ALL()), DOCUMENT())
options for additions -##**##- [['append', 'INSERT', 0.45], ['after', 'AFTER', 0.95], ['integer', 'NUMBERTOKEN', 0.4275]]
actual additions -**##**- [['integer', 'NUMBERTOKEN', 0.4275], ['append', 'INSERT', 0.45], ['after', 'AFTER', 0.95]]

20
Insert ":" after #1st word of the sentence
INSERT(STRING(:), Position(AFTER(WORDTOKEN()), INTEGER(1)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['after', 'AFTER', 0.95], ['word', 'WORDTOKEN', 0.95], ['sentence', 'LINESCOPE', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['sentence', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['after', 'AFTER', 0.95]]

21
Insert ":" after the word that starts with "Day"
INSERT(STRING(:), END(), IterationScope(WORDSCOPE(), STARTSWITH(STRING(Day)), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['after', 'END', 0.95], ['word', 'WORDSCOPE', 0.95], ['starts', 'STARTSWITH', 0.9]]
actual additions -**##**- [['word', 'WORDSCOPE', 0.95], ['starts', 'STARTSWITH', 0.9], ['insert', 'INSERT', 0.95], ['after', 'END', 0.95]]

22
Insert ":" in every line after the numbers
INSERT(STRING(:), Position(AFTER(NUMBERTOKEN()), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['after', 'AFTER', 0.95], ['numbers', 'NUMBERTOKEN', 0.95], ['every', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['numbers', 'NUMBERTOKEN', 0.95], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['every', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

23
Insert "| " after the #1st occurrence of " "
INSERT(STRING(| ), Position(AFTER(STRING( )), INTEGER(1)), DOCUMENT())
options for additions -##**##- [['insert', 'INSERT', 0.95], ['after', 'AFTER', 0.95]]
actual additions -**##**- [['insert', 'INSERT', 0.95], ['after', 'AFTER', 0.95]]

24
Insert a "|" and a " " before the #1st word in every line
INSERT(CONCATENATE(STRING(|), STRING( )), Position(BEFORE(WORDTOKEN()), INTEGER(1)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['and', 'CONCATENATE', 0.95], ['before', 'BEFORE', 0.95], ['word', 'WORDTOKEN', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['and', 'CONCATENATE', 0.95], ['before', 'BEFORE', 0.95], ['every', 'ALL', 0.95]]

25
for each line, put a "|" before the #1st word of the line
INSERT(STRING(|), Position(BEFORE(WORDTOKEN()), INTEGER(1)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['put', 'INSERT', 0.4275], ['before', 'BEFORE', 0.95], ['word', 'WORDTOKEN', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['line', 'LINESCOPE', 0.95], ['put', 'INSERT', 0.4275], ['before', 'BEFORE', 0.95], ['each', 'ALL', 0.95]]

26
add "|" before #1st word
INSERT(STRING(|), Position(BEFORE(WORDTOKEN()), INTEGER(1)), DOCUMENT())
options for additions -##**##- [['add', 'INSERT', 0.4275], ['before', 'BEFORE', 0.95], ['word', 'WORDTOKEN', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['add', 'INSERT', 0.4275], ['before', 'BEFORE', 0.95]]

27
add a "|" character before the #1st word
INSERT(STRING(|), Position(BEFORE(WORDTOKEN()), INTEGER(1)), DOCUMENT())
options for additions -##**##- [['add', 'INSERT', 0.4275], ['before', 'BEFORE', 0.95], ['word', 'WORDTOKEN', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['add', 'INSERT', 0.4275], ['before', 'BEFORE', 0.95]]

28
put "| " before #1st " "
INSERT(STRING(| ), Position(BEFORE(STRING( )), INTEGER(1)), DOCUMENT())
options for additions -##**##- [['put', 'INSERT', 0.4275], ['before', 'BEFORE', 0.95]]
actual additions -**##**- [['put', 'INSERT', 0.4275], ['before', 'BEFORE', 0.95]]

29
put "|" before the #1st word
INSERT(STRING(|), Position(BEFORE(WORDTOKEN()), INTEGER(1)), DOCUMENT())
options for additions -##**##- [['put', 'INSERT', 0.4275], ['before', 'BEFORE', 0.95], ['word', 'WORDTOKEN', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['put', 'INSERT', 0.4275], ['before', 'BEFORE', 0.95]]

30
Add "| " to the beginning of the #1st word
INSERT(STRING(| ), Position(BEFORE(WORDTOKEN()), INTEGER(1)), DOCUMENT())
options for additions -##**##- [['add', 'INSERT', 0.4275], ['beginning', 'BEFORE', 0.9], ['word', 'WORDTOKEN', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['add', 'INSERT', 0.4275], ['beginning', 'BEFORE', 0.9]]

31
insert "|" followed by a " " before the #1st word in each line
INSERT(CONCATENATE(STRING(|), STRING( )), Position(BEFORE(WORDTOKEN()), INTEGER(1)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['followed', 'CONCATENATE', 0.95], ['before', 'BEFORE', 0.95], ['word', 'WORDTOKEN', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['followed', 'CONCATENATE', 0.95], ['before', 'BEFORE', 0.95], ['each', 'ALL', 0.95]]

32
insert "| " just before the #1st word
INSERT(STRING(| ), Position(BEFORE(WORDTOKEN()), INTEGER(1)), DOCUMENT())
options for additions -##**##- [['insert', 'INSERT', 0.95], ['before', 'BEFORE', 0.95], ['word', 'WORDTOKEN', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['insert', 'INSERT', 0.95], ['before', 'BEFORE', 0.95]]

33
prepend each line with "NM-"
INSERT(STRING(NM-), START(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['line', 'INSERT', 0.3], ['line', 'START', 0.45], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]

34
Add "NM-" to the beginning of each line
INSERT(STRING(NM-), START(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['beginning', 'START', 0.9], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['beginning', 'START', 0.9], ['line', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['each', 'ALL', 0.95]]

35
Add "NM-" to the beginning of every sentence
INSERT(STRING(NM-), START(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['beginning', 'START', 0.855], ['sentence', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['beginning', 'START', 0.855], ['sentence', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['every', 'ALL', 0.95]]

36
Add the string "NM-" at the beginning of every line
INSERT(STRING(NM-), START(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['beginning', 'START', 0.855], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['beginning', 'START', 0.855], ['line', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['every', 'ALL', 0.95]]

37
Insert "NM-" to the beginning of each line
INSERT(STRING(NM-), START(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['beginning', 'START', 0.855], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['beginning', 'START', 0.855], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['each', 'ALL', 0.95]]

38
Add "NM-" to every new line
INSERT(STRING(NM-), END(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['add', 'END', 0.3], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['line', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['every', 'ALL', 0.95]]

39
Add "NM-" as prefix to every line
INSERT(STRING(NM-), START(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['prefix', 'INSERT', 0.95], ['prefix', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['prefix', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]

40
place "NM-" before every line
INSERT(STRING(NM-), START(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['place', 'INSERT', 0.45], ['before', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['before', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['place', 'INSERT', 0.45], ['every', 'ALL', 0.95]]

41
insert "NM-" before each line
INSERT(STRING(NM-), START(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['before', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['before', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['each', 'ALL', 0.95]]

42
At the starting of every line, add "NM-"
INSERT(STRING(NM-), START(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['starting', 'START', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['starting', 'START', 0.95], ['add', 'INSERT', 0.4275], ['every', 'ALL', 0.95]]

43
Insert "NM-" in the beginning of each line
INSERT(STRING(NM-), START(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['beginning', 'START', 0.855], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['beginning', 'START', 0.855], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['each', 'ALL', 0.95]]

44
Insert "NM-" at the starting of each line
INSERT(STRING(NM-), START(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['starting', 'START', 0.9025], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['starting', 'START', 0.9025], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['each', 'ALL', 0.95]]

45
Insert "NM-" in the beginning in every line
INSERT(STRING(NM-), START(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['beginning', 'START', 0.855], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['beginning', 'START', 0.855], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['every', 'ALL', 0.95]]

46
Insert "NM-" to the beginning of each line
INSERT(STRING(NM-), START(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['beginning', 'START', 0.855], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['beginning', 'START', 0.855], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['each', 'ALL', 0.95]]

47
Insert "NM-" before each line
INSERT(STRING(NM-), START(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['before', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['before', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['each', 'ALL', 0.95]]

48
insert "NM-" before every line
INSERT(STRING(NM-), START(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['before', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['before', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['every', 'ALL', 0.95]]

49
Append "NM-" at the start of all lines
INSERT(STRING(NM-), START(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['append', 'INSERT', 0.4275], ['start', 'START', 0.9025], ['lines', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['start', 'START', 0.9025], ['lines', 'LINESCOPE', 0.95], ['append', 'INSERT', 0.4275], ['all', 'ALL', 0.95]]

50
Insert "NM-" before #1st letter in every line
INSERT(STRING(NM-), Position(BEFORE(CHARTOKEN()), INTEGER(1)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['before', 'BEFORE', 0.95], ['letter', 'CHARTOKEN', 0.45], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['letter', 'CHARTOKEN', 0.45], ['before', 'BEFORE', 0.95], ['every', 'ALL', 0.95]]

51
Add "NM-" at the starting of each statement
INSERT(STRING(NM-), START(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['starting', 'START', 0.9025], ['statement', 'LINESCOPE', 0.45], ['each', 'ALL', 0.95]]
actual additions -**##**- [['starting', 'START', 0.9025], ['statement', 'LINESCOPE', 0.45], ['add', 'INSERT', 0.4275], ['each', 'ALL', 0.95]]

52
Add "NM-" to the start of every string
INSERT(STRING(NM-), START(), DOCUMENT())
options for additions -##**##- [['add', 'INSERT', 0.4275], ['start', 'START', 0.9025]]
actual additions -**##**- [['start', 'START', 0.9025], ['add', 'INSERT', 0.4275]]

53
add "NM-" in the beginning of each line
INSERT(STRING(NM-), START(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['beginning', 'START', 0.855], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['beginning', 'START', 0.855], ['line', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['each', 'ALL', 0.95]]

54
insert text "NM-" in the starting of every line
INSERT(STRING(NM-), START(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['starting', 'START', 0.9025], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['starting', 'START', 0.9025], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['every', 'ALL', 0.95]]

55
Insert "NM-" before every line
INSERT(STRING(NM-), START(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['before', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['before', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['every', 'ALL', 0.95]]

56
Add "NM-" before all strings
INSERT(STRING(NM-), START(), DOCUMENT())
options for additions -##**##- [['add', 'INSERT', 0.4275], ['before', 'START', 0.95]]
actual additions -**##**- [['before', 'START', 0.95], ['add', 'INSERT', 0.4275]]

57
Insert "NM-" in front of every line
INSERT(STRING(NM-), START(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['front', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['front', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['every', 'ALL', 0.95]]

58
Add "NM-" in all the #4 lines before the occurrence of "Com"
INSERT(STRING(NM-), Position(BEFORE(STRING(Com)), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['before', 'BEFORE', 0.95], ['all', 'ALL', 0.95], ['lines', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['lines', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['before', 'BEFORE', 0.95], ['all', 'ALL', 0.95]]

59
add "NM-" at the start of the lines
INSERT(STRING(NM-), START(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['start', 'START', 0.9025], ['lines', 'LINESCOPE', 0.95]]
actual additions -**##**- [['start', 'START', 0.9025], ['lines', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275]]

60
Prefix "NM-" to the beginning
INSERT(STRING(NM-), START(), DOCUMENT())
options for additions -##**##- [['prefix', 'INSERT', 0.95], ['prefix', 'START', 0.95]]
actual additions -**##**- [['prefix', 'START', 0.95]]

61
append "NM-" to the beginning
INSERT(STRING(NM-), START(), DOCUMENT())
options for additions -##**##- [['append', 'INSERT', 0.4275], ['beginning', 'START', 0.855]]
actual additions -**##**- [['beginning', 'START', 0.855], ['append', 'INSERT', 0.4275]]

62
Append "NM-"
INSERT(STRING(NM-), END(), DOCUMENT())
options for additions -##**##- [['append', 'INSERT', 0.4275]]
actual additions -**##**- [['append', 'INSERT', 0.4275]]

63
Append "NM-" to the beginning
INSERT(STRING(NM-), START(), DOCUMENT())
options for additions -##**##- [['append', 'INSERT', 0.4275], ['beginning', 'START', 0.855]]
actual additions -**##**- [['beginning', 'START', 0.855], ['append', 'INSERT', 0.4275]]

64
Insert "NM-" at the beginning of all lines
INSERT(STRING(NM-), START(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['beginning', 'START', 0.855], ['lines', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['beginning', 'START', 0.855], ['lines', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['all', 'ALL', 0.95]]

65
Add "$" at the beginning of those lines that do not already start with "$"
INSERT(STRING($), START(), IterationScope(LINESCOPE(), NOT(STARTSWITH(STRING($))), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['start', 'START', 0.9025], ['lines', 'LINESCOPE', 0.95], ['not', 'NOT', 0.95], ['beginning', 'STARTSWITH', 0.95]]
actual additions -**##**- [['beginning', 'STARTSWITH', 0.95], ['start', 'START', 0.9025], ['not', 'NOT', 0.95], ['lines', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275]]

66
If a sentence does not start with "$" then insert "$" at its beginning.
INSERT(STRING($), START(), IterationScope(LINESCOPE(), NOT(STARTSWITH(STRING($))), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['start', 'START', 0.9025], ['sentence', 'LINESCOPE', 0.95], ['not', 'NOT', 0.95], ['start', 'STARTSWITH', 0.855]]
actual additions -**##**- [['start', 'START', 0.9025], ['not', 'NOT', 0.95], ['sentence', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95]]

67
If a line does not start with a "$" add a "$" at its beginning
INSERT(STRING($), START(), IterationScope(LINESCOPE(), NOT(STARTSWITH(STRING($))), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['start', 'START', 0.9025], ['line', 'LINESCOPE', 0.95], ['not', 'NOT', 0.95], ['beginning', 'STARTSWITH', 0.9025]]
actual additions -**##**- [['beginning', 'STARTSWITH', 0.9025], ['start', 'START', 0.9025], ['not', 'NOT', 0.95], ['line', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275]]

68
except line #2nd and #6th, insert "$" in starting of every line
INSERT(STRING($), START(), IterationScope(LINESCOPE(), ALWAYS(), ALLBUT(INTSET(IntegerSet(INTEGER(2), INTEGER(6))))))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['starting', 'START', 0.9025], ['line', 'LINESCOPE', 0.95], ['except', 'ALLBUT', 0.95], ['and', 'INTSET', 0.95]]
actual additions -**##**- [['starting', 'START', 0.9025], ['line', 'LINESCOPE', 0.95], ['and', 'INTSET', 0.95], ['insert', 'INSERT', 0.95], ['except', 'ALLBUT', 0.95]]

69
Insert "$" before every line that does not start with "$".
INSERT(STRING($), START(), IterationScope(LINESCOPE(), NOT(STARTSWITH(STRING($))), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['before', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['not', 'NOT', 0.95], ['start', 'STARTSWITH', 0.855], ['every', 'ALL', 0.95]]
actual additions -**##**- [['start', 'STARTSWITH', 0.855], ['before', 'START', 0.95], ['not', 'NOT', 0.95], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['every', 'ALL', 0.95]]

70
Add "$" at the beginning of all the sentences in A which do not start with "$"
INSERT(STRING($), START(), IterationScope(LINESCOPE(), NOT(STARTSWITH(STRING($))), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['start', 'START', 0.9025], ['sentences', 'LINESCOPE', 0.95], ['not', 'NOT', 0.95], ['beginning', 'STARTSWITH', 0.9025], ['all', 'ALL', 0.95]]
actual additions -**##**- [['beginning', 'STARTSWITH', 0.9025], ['start', 'START', 0.9025], ['not', 'NOT', 0.95], ['sentences', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['all', 'ALL', 0.95]]

71
Insert "$" in all lines at the beginning not starting with "$"
INSERT(STRING($), START(), IterationScope(LINESCOPE(), NOT(STARTSWITH(STRING($))), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['starting', 'START', 0.9025], ['lines', 'LINESCOPE', 0.95], ['not', 'NOT', 0.95], ['beginning', 'STARTSWITH', 0.9025], ['all', 'ALL', 0.95]]
actual additions -**##**- [['beginning', 'STARTSWITH', 0.9025], ['starting', 'START', 0.9025], ['not', 'NOT', 0.95], ['lines', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['all', 'ALL', 0.95]]

72
Insert "$" before each line not starting with "$"
INSERT(STRING($), START(), IterationScope(LINESCOPE(), NOT(STARTSWITH(STRING($))), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['before', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['not', 'NOT', 0.95], ['starting', 'STARTSWITH', 0.855], ['each', 'ALL', 0.95]]
actual additions -**##**- [['starting', 'STARTSWITH', 0.855], ['before', 'START', 0.95], ['not', 'NOT', 0.95], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['each', 'ALL', 0.95]]

73
Insert "$" in all lines at the beginning not starting with "$"
INSERT(STRING($), START(), IterationScope(LINESCOPE(), NOT(STARTSWITH(STRING($))), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['starting', 'START', 0.9025], ['lines', 'LINESCOPE', 0.95], ['not', 'NOT', 0.95], ['beginning', 'STARTSWITH', 0.9025], ['all', 'ALL', 0.95]]
actual additions -**##**- [['beginning', 'STARTSWITH', 0.9025], ['starting', 'START', 0.9025], ['not', 'NOT', 0.95], ['lines', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['all', 'ALL', 0.95]]

74
Insert "$" before each line not starting with "$"
INSERT(STRING($), START(), IterationScope(LINESCOPE(), NOT(STARTSWITH(STRING($))), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['before', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['not', 'NOT', 0.95], ['starting', 'STARTSWITH', 0.855], ['each', 'ALL', 0.95]]
actual additions -**##**- [['starting', 'STARTSWITH', 0.855], ['before', 'START', 0.95], ['not', 'NOT', 0.95], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['each', 'ALL', 0.95]]

75
Insert "$" before every line that does not starts with "$"
INSERT(STRING($), START(), IterationScope(LINESCOPE(), NOT(STARTSWITH(STRING($))), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['before', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['not', 'NOT', 0.95], ['starts', 'STARTSWITH', 0.855], ['every', 'ALL', 0.95]]
actual additions -**##**- [['starts', 'STARTSWITH', 0.855], ['before', 'START', 0.95], ['not', 'NOT', 0.95], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['every', 'ALL', 0.95]]

76
Add "$" at the beginning of each statement if "$" is not present.
INSERT(STRING($), START(), IterationScope(LINESCOPE(), NOT(CONTAINS(STRING($))), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['beginning', 'START', 0.855], ['statement', 'LINESCOPE', 0.4275], ['not', 'NOT', 0.95], ['is', 'CONTAINS', 0.45], ['each', 'ALL', 0.95]]
actual additions -**##**- [['beginning', 'START', 0.855], ['not', 'NOT', 0.95], ['statement', 'LINESCOPE', 0.4275], ['add', 'INSERT', 0.4275], ['is', 'CONTAINS', 0.45], ['each', 'ALL', 0.95]]

77
add "$" in the beginning of all the lines wherever "$" is not present.
INSERT(STRING($), START(), IterationScope(LINESCOPE(), NOT(CONTAINS(STRING($))), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['beginning', 'START', 0.855], ['lines', 'LINESCOPE', 0.95], ['not', 'NOT', 0.95], ['is', 'CONTAINS', 0.4275], ['all', 'ALL', 0.95]]
actual additions -**##**- [['beginning', 'START', 0.855], ['not', 'NOT', 0.95], ['lines', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['is', 'CONTAINS', 0.4275], ['all', 'ALL', 0.95]]

78
insert "$" at the starting of every line except #2nd and #1st line
INSERT(STRING($), START(), IterationScope(LINESCOPE(), ALWAYS(), ALLBUT(INTSET(IntegerSet(INTEGER(1), INTEGER(2))))))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['starting', 'START', 0.9025], ['line', 'LINESCOPE', 0.95], ['except', 'ALLBUT', 0.95], ['and', 'INTSET', 0.95]]
actual additions -**##**- [['starting', 'START', 0.9025], ['line', 'LINESCOPE', 0.95], ['and', 'INTSET', 0.95], ['insert', 'INSERT', 0.95], ['except', 'ALLBUT', 0.95]]

79
Insert "$" in every line not starting with "$"
INSERT(STRING($), END(), IterationScope(LINESCOPE(), NOT(STARTSWITH(STRING($))), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['insert', 'END', 0.3], ['line', 'LINESCOPE', 0.95], ['not', 'NOT', 0.95], ['starting', 'STARTSWITH', 0.855], ['every', 'ALL', 0.95]]
actual additions -**##**- [['starting', 'STARTSWITH', 0.855], ['not', 'NOT', 0.95], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['every', 'ALL', 0.95]]

80
Insert "$" in every line whose starting is not a "$" already
INSERT(STRING($), END(), IterationScope(LINESCOPE(), NOT(STARTSWITH(STRING($))), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['is', 'END', 0.45], ['line', 'LINESCOPE', 0.95], ['not', 'NOT', 0.95], ['starting', 'STARTSWITH', 0.855], ['every', 'ALL', 0.95]]
actual additions -**##**- [['starting', 'STARTSWITH', 0.855], ['not', 'NOT', 0.95], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['is', 'END', 0.45], ['every', 'ALL', 0.95]]

81
Put "$" in the start of each line if it has no "$" at the start
INSERT(STRING($), START(), IterationScope(LINESCOPE(), NOT(STARTSWITH(STRING($))), ALL()))
options for additions -##**##- [['put', 'INSERT', 0.4275], ['start', 'START', 0.9025], ['line', 'LINESCOPE', 0.95], ['no', 'NOT', 0.95], ['start', 'STARTSWITH', 0.855], ['each', 'ALL', 0.95]]
actual additions -**##**- [['start', 'START', 0.9025], ['no', 'NOT', 0.95], ['line', 'LINESCOPE', 0.95], ['put', 'INSERT', 0.4275], ['each', 'ALL', 0.95]]

82
if statement does not starts with "$" add "$" in the beginning
INSERT(STRING($), START(), IterationScope(LINESCOPE(), NOT(STARTSWITH(STRING($))), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['starts', 'START', 0.9025], ['starts', 'LINESCOPE', 0.45], ['not', 'NOT', 0.95], ['beginning', 'STARTSWITH', 0.9025]]
actual additions -**##**- [['beginning', 'STARTSWITH', 0.9025], ['starts', 'START', 0.9025], ['not', 'NOT', 0.95], ['add', 'INSERT', 0.4275]]

83
Prepend the line containing "P.O. BOX" with "*"
INSERT(STRING(*), START(), IterationScope(LINESCOPE(), CONTAINS(STRING(P.O. BOX)), ALL()))
options for additions -##**##- [['line', 'INSERT', 0.3], ['line', 'START', 0.45], ['line', 'LINESCOPE', 0.95], ['containing', 'CONTAINS', 0.95]]
actual additions -**##**- [['line', 'LINESCOPE', 0.95], ['containing', 'CONTAINS', 0.95]]

84
Add "*" at the beginning of every sentence containing the word "Box"
INSERT(STRING(*), START(), IterationScope(LINESCOPE(), CONTAINS(WORD(STRING(Box))), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['beginning', 'START', 0.855], ['sentence', 'LINESCOPE', 0.95], ['containing', 'CONTAINS', 0.95], ['word', 'WORD', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['word', 'WORD', 0.95], ['beginning', 'START', 0.855], ['sentence', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['containing', 'CONTAINS', 0.95], ['every', 'ALL', 0.95]]

85
add "*" in the start of line that contains "P.O."
INSERT(STRING(*), START(), IterationScope(LINESCOPE(), CONTAINS(STRING(P.O.)), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['start', 'START', 0.9025], ['line', 'LINESCOPE', 0.95], ['contains', 'CONTAINS', 0.95]]
actual additions -**##**- [['start', 'START', 0.9025], ['line', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['contains', 'CONTAINS', 0.95]]

86
Add a "*" at the beginning of the line in which the string "P.O. BOX" occurs
INSERT(STRING(*), START(), IterationScope(LINESCOPE(), CONTAINS(STRING(P.O. BOX)), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['beginning', 'START', 0.855], ['line', 'LINESCOPE', 0.95], ['occurs', 'CONTAINS', 0.95]]
actual additions -**##**- [['beginning', 'START', 0.855], ['line', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['occurs', 'CONTAINS', 0.95]]

87
Put "*" at the beginning of #2nd, #6th, #8th, and #13th line
INSERT(STRING(*), START(), IterationScope(LINESCOPE(), ALWAYS(), INTSET(IntegerSet(INTEGER(13), INTEGER(2), INTEGER(6), INTEGER(8)))))
options for additions -##**##- [['put', 'INSERT', 0.4275], ['beginning', 'START', 0.855], ['line', 'LINESCOPE', 0.95], ['and', 'INTSET', 0.95]]
actual additions -**##**- [['beginning', 'START', 0.855], ['line', 'LINESCOPE', 0.95], ['and', 'INTSET', 0.95], ['put', 'INSERT', 0.4275]]

88
put a "*" before each line that has "P.O. BOX" embedded within it
INSERT(STRING(*), START(), IterationScope(LINESCOPE(), CONTAINS(STRING(P.O. BOX)), ALL()))
options for additions -##**##- [['embedded', 'INSERT', 0.45], ['before', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['before', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['embedded', 'INSERT', 0.45], ['each', 'ALL', 0.95]]

89
Put "*" in front of lines with "P.O. Box" as a substring
INSERT(STRING(*), START(), IterationScope(LINESCOPE(), CONTAINS(STRING(P.O. Box)), ALL()))
options for additions -##**##- [['put', 'INSERT', 0.4275], ['front', 'START', 0.95], ['lines', 'LINESCOPE', 0.95], ['substring', 'CONTAINS', 0.95]]
actual additions -**##**- [['front', 'START', 0.95], ['lines', 'LINESCOPE', 0.95], ['put', 'INSERT', 0.4275], ['substring', 'CONTAINS', 0.95]]

90
insert "*" before every line that starts with "P"
INSERT(STRING(*), START(), IterationScope(LINESCOPE(), STARTSWITH(STRING(P)), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['before', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['starts', 'STARTSWITH', 0.855], ['every', 'ALL', 0.95]]
actual additions -**##**- [['starts', 'STARTSWITH', 0.855], ['before', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['every', 'ALL', 0.95]]

91
insert "*" before the lines that starts with "1" or starts with "C"
INSERT(STRING(*), START(), IterationScope(LINESCOPE(), OR(STARTSWITH(STRING(1)), STARTSWITH(STRING(C))), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['before', 'START', 0.95], ['lines', 'LINESCOPE', 0.95], ['or', 'OR', 0.95], ['starts', 'STARTSWITH', 0.855], ['starts', 'STARTSWITH', 0.855]]
actual additions -**##**- [['starts', 'STARTSWITH', 0.855], ['before', 'START', 0.95], ['or', 'OR', 0.95], ['lines', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95]]

92
Insert "*" at the beginning of each line containing "P.O. BOX"
INSERT(STRING(*), START(), IterationScope(LINESCOPE(), CONTAINS(STRING(P.O. BOX)), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['beginning', 'START', 0.855], ['line', 'LINESCOPE', 0.95], ['containing', 'CONTAINS', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['beginning', 'START', 0.855], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['containing', 'CONTAINS', 0.95], ['each', 'ALL', 0.95]]

93
Insert "*" at the start of every line which has "P.O.BOX" word
INSERT(STRING(*), START(), IterationScope(LINESCOPE(), CONTAINS(WORD(STRING(P.O.BOX))), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['start', 'START', 0.9025], ['line', 'LINESCOPE', 0.95], ['start', 'CONTAINS', 0.3], ['word', 'WORD', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['word', 'WORD', 0.95], ['start', 'START', 0.9025], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['every', 'ALL', 0.95]]

94
Insert "*" before every line that has the occurrence of "P.O.BOX"
INSERT(STRING(*), START(), IterationScope(LINESCOPE(), CONTAINS(STRING(P.O.BOX)), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['before', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['before', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['every', 'ALL', 0.95]]

95
Add "*" in the beginning of the line which contains "P.O. BOX"
INSERT(STRING(*), START(), IterationScope(LINESCOPE(), CONTAINS(STRING(P.O. BOX)), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['beginning', 'START', 0.855], ['line', 'LINESCOPE', 0.95], ['contains', 'CONTAINS', 0.95]]
actual additions -**##**- [['beginning', 'START', 0.855], ['line', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['contains', 'CONTAINS', 0.95]]

96
add "*" in beginning of all the lines wherever "P.O. BOX" is present
INSERT(STRING(*), START(), IterationScope(LINESCOPE(), CONTAINS(STRING(P.O. BOX)), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['beginning', 'START', 0.855], ['lines', 'LINESCOPE', 0.95], ['present', 'CONTAINS', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['beginning', 'START', 0.855], ['lines', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['present', 'CONTAINS', 0.95], ['all', 'ALL', 0.95]]

97
insert a "*" at the beginning in the sentence which has "P.O.BOX" in it
INSERT(STRING(*), START(), IterationScope(LINESCOPE(), CONTAINS(STRING(P.O.BOX)), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['beginning', 'START', 0.855], ['sentence', 'LINESCOPE', 0.95], ['beginning', 'CONTAINS', 0.3]]
actual additions -**##**- [['beginning', 'START', 0.855], ['sentence', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95]]

98
insert "*" at the start of the sentence where the sentence consists of "P.O."
INSERT(STRING(*), Position(BEFORE(LINETOKEN()), ALL()), IterationScope(LINESCOPE(), CONTAINS(STRING(P.O.)), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['start', 'BEFORE', 0.95], ['sentence', 'LINETOKEN', 0.95], ['sentence', 'LINESCOPE', 0.95], ['start', 'CONTAINS', 0.3]]
actual additions -**##**- [['sentence', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['start', 'BEFORE', 0.95]]

99
Insert "*" in front of every line containing "P.O. BOX" in it
INSERT(STRING(*), START(), IterationScope(LINESCOPE(), CONTAINS(STRING(P.O. BOX)), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['front', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['containing', 'CONTAINS', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['front', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['containing', 'CONTAINS', 0.95], ['every', 'ALL', 0.95]]

100
add "*" at the start of every line which has the word "P.O.BOX"
INSERT(STRING(*), START(), IterationScope(LINESCOPE(), CONTAINS(WORD(STRING(P.O.BOX))), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['start', 'START', 0.9025], ['line', 'LINESCOPE', 0.95], ['add', 'CONTAINS', 0.3], ['word', 'WORD', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['word', 'WORD', 0.95], ['start', 'START', 0.9025], ['line', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['every', 'ALL', 0.95]]

101
Put "*" at the start of those line which contain "P.O.BOX"
INSERT(STRING(*), START(), IterationScope(LINESCOPE(), CONTAINS(STRING(P.O.BOX)), ALL()))
options for additions -##**##- [['put', 'INSERT', 0.4275], ['start', 'START', 0.9025], ['line', 'LINESCOPE', 0.95], ['contain', 'CONTAINS', 0.95]]
actual additions -**##**- [['start', 'START', 0.9025], ['line', 'LINESCOPE', 0.95], ['put', 'INSERT', 0.4275], ['contain', 'CONTAINS', 0.95]]

102
if sentence contain "P.O." as a substring add "*" before the sentence
INSERT(STRING(*), Position(BEFORE(LINETOKEN()), ALL()), IterationScope(LINESCOPE(), CONTAINS(STRING(P.O.)), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['before', 'BEFORE', 0.95], ['sentence', 'LINETOKEN', 0.95], ['sentence', 'LINESCOPE', 0.95], ['contain', 'CONTAINS', 0.95]]
actual additions -**##**- [['sentence', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['contain', 'CONTAINS', 0.95], ['before', 'BEFORE', 0.95]]

103
add "-- from Bill" to each line that starts with "Exercise"
INSERT(STRING(-- from Bill), END(), IterationScope(LINESCOPE(), STARTSWITH(STRING(Exercise)), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['add', 'END', 0.3], ['line', 'LINESCOPE', 0.95], ['starts', 'STARTSWITH', 0.855], ['each', 'ALL', 0.95]]
actual additions -**##**- [['starts', 'STARTSWITH', 0.855], ['line', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['each', 'ALL', 0.95]]

104
Add " -- from Bill" to the end of every sentence ending with a digit.
INSERT(STRING( -- from Bill), END(), IterationScope(LINESCOPE(), ENDSWITH(DIGITTOKEN()), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['end', 'END', 0.95], ['sentence', 'LINESCOPE', 0.95], ['end', 'ENDSWITH', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['sentence', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['end', 'ENDSWITH', 0.95], ['every', 'ALL', 0.95]]

105
In every line beginning with "Exercise", append "-- from Bill" towards the end.
INSERT(STRING(-- from Bill), END(), IterationScope(LINESCOPE(), STARTSWITH(STRING(Exercise)), ALL()))
options for additions -##**##- [['append', 'INSERT', 0.4275], ['beginning', 'END', 0.3], ['line', 'LINESCOPE', 0.95], ['beginning', 'STARTSWITH', 0.9025], ['every', 'ALL', 0.95]]
actual additions -**##**- [['beginning', 'STARTSWITH', 0.9025], ['line', 'LINESCOPE', 0.95], ['append', 'INSERT', 0.4275], ['every', 'ALL', 0.95]]

106
Add the string " -- from Bill" at the end of every line which contains a "H".
INSERT(STRING( -- from Bill), END(), IterationScope(LINESCOPE(), CONTAINS(STRING(H)), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['end', 'END', 0.95], ['line', 'LINESCOPE', 0.95], ['contains', 'CONTAINS', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['line', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['end', 'END', 0.95], ['contains', 'CONTAINS', 0.95], ['every', 'ALL', 0.95]]

107
if line begins with "Exercise H", put "--from Bill" at the end of line
INSERT(STRING(--from Bill), Position(AFTER(LINETOKEN()), ALL()), IterationScope(LINESCOPE(), STARTSWITH(STRING(Exercise H)), ALL()))
options for additions -##**##- [['put', 'INSERT', 0.4275], ['line', 'AFTER', 0.3], ['line', 'LINETOKEN', 0.95], ['line', 'LINESCOPE', 0.95], ['begins', 'STARTSWITH', 0.9025]]
actual additions -**##**- [['begins', 'STARTSWITH', 0.9025], ['line', 'LINESCOPE', 0.95], ['put', 'INSERT', 0.4275]]

108
Append "-- from Bill" in every line containing numerals
INSERT(STRING(-- from Bill), END(), IterationScope(LINESCOPE(), CONTAINS(NUMBERTOKEN()), ALL()))
options for additions -##**##- [['append', 'INSERT', 0.4275], ['containing', 'END', 0.3], ['line', 'LINESCOPE', 0.95], ['containing', 'CONTAINS', 0.95], ['numerals', 'NUMBERTOKEN', 0.9025], ['every', 'ALL', 0.95]]
actual additions -**##**- [['numerals', 'NUMBERTOKEN', 0.9025], ['line', 'LINESCOPE', 0.95], ['append', 'INSERT', 0.4275], ['containing', 'CONTAINS', 0.95], ['every', 'ALL', 0.95]]

109
Insert "--from Bill" at the end of each line which does not end with "."
INSERT(STRING(--from Bill), END(), IterationScope(LINESCOPE(), NOT(ENDSWITH(STRING(.))), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['end', 'END', 0.95], ['line', 'LINESCOPE', 0.95], ['not', 'NOT', 0.95], ['end', 'ENDSWITH', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['not', 'NOT', 0.95], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['end', 'ENDSWITH', 0.95], ['each', 'ALL', 0.95]]

110
add "--from Bill" in every #2 lines starting from the #1st
INSERT(STRING(--from Bill), END(), IterationScope(LINESCOPE(), ALWAYS(), EVERY(INTEGER(2), STARTFROM(INTEGER(1)))))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['add', 'END', 0.3], ['lines', 'LINESCOPE', 0.95], ['every', 'EVERY', 0.95], ['starting', 'STARTFROM', 0.95]]
actual additions -**##**- [['starting', 'STARTFROM', 0.95], ['lines', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['every', 'EVERY', 0.95]]

111
If sentence start from "Exercise" then at the end add "-- from Bill"
INSERT(STRING(-- from Bill), END(), IterationScope(LINESCOPE(), STARTSWITH(STRING(Exercise)), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['end', 'END', 0.95], ['sentence', 'LINESCOPE', 0.95], ['start', 'STARTSWITH', 0.855]]
actual additions -**##**- [['start', 'STARTSWITH', 0.855], ['sentence', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['end', 'END', 0.95]]

112
Insert "-- from Bill" at the end of every line which starts with "Exercise"
INSERT(STRING(-- from Bill), END(), IterationScope(LINESCOPE(), STARTSWITH(STRING(Exercise)), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['end', 'END', 0.95], ['line', 'LINESCOPE', 0.95], ['starts', 'STARTSWITH', 0.855], ['every', 'ALL', 0.95]]
actual additions -**##**- [['starts', 'STARTSWITH', 0.855], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['end', 'END', 0.95], ['every', 'ALL', 0.95]]

113
Append " -- from Bill" in every line starting with "Exercise"
INSERT(STRING( -- from Bill), END(), IterationScope(LINESCOPE(), STARTSWITH(STRING(Exercise)), ALL()))
options for additions -##**##- [['append', 'INSERT', 0.4275], ['starting', 'END', 0.3], ['line', 'LINESCOPE', 0.95], ['starting', 'STARTSWITH', 0.855], ['every', 'ALL', 0.95]]
actual additions -**##**- [['starting', 'STARTSWITH', 0.855], ['line', 'LINESCOPE', 0.95], ['append', 'INSERT', 0.4275], ['every', 'ALL', 0.95]]

114
Add "--from Bill" at the end of line which has "%%" character
INSERT(STRING(--from Bill), END(), IterationScope(LINESCOPE(), CONTAINS(STRING(%%)), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['end', 'END', 0.95], ['line', 'LINESCOPE', 0.95], ['add', 'CONTAINS', 0.3]]
actual additions -**##**- [['line', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['end', 'END', 0.95]]

115
if Sentence starts with "Exercise", add "--from Bill" after #14 characters
INSERT(STRING(--from Bill), Position(AFTER(CHARTOKEN()), INTEGER(14)), IterationScope(LINESCOPE(), STARTSWITH(STRING(Exercise)), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['after', 'AFTER', 0.95], ['characters', 'CHARTOKEN', 0.95], ['sentence', 'LINESCOPE', 0.95], ['starts', 'STARTSWITH', 0.855]]
actual additions -**##**- [['starts', 'STARTSWITH', 0.855], ['sentence', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['characters', 'CHARTOKEN', 0.95], ['after', 'AFTER', 0.95]]

116
Append "-- from Bill" in every #2 lines.
INSERT(STRING(-- from Bill), END(), IterationScope(LINESCOPE(), ALWAYS(), EVERY(INTEGER(2), INTEGER(1))))
options for additions -##**##- [['append', 'INSERT', 0.4275], ['every', 'EVERY', 0.95]]
actual additions -**##**- [['append', 'INSERT', 0.4275], ['every', 'EVERY', 0.95]]

117
Add " -- from Bill" to the end of every statement starting with "Exercise %%"
INSERT(STRING( -- from Bill), END(), IterationScope(LINESCOPE(), STARTSWITH(STRING(Exercise %%)), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['end', 'END', 0.95], ['statement', 'LINESCOPE', 0.4275], ['starting', 'STARTSWITH', 0.855], ['every', 'ALL', 0.95]]
actual additions -**##**- [['starting', 'STARTSWITH', 0.855], ['statement', 'LINESCOPE', 0.4275], ['add', 'INSERT', 0.4275], ['end', 'END', 0.95], ['every', 'ALL', 0.95]]

118
Insert "..???" at the end of lines #2, #4, #6 and #8
INSERT(STRING(..???), END(), IterationScope(LINESCOPE(), ALWAYS(), INTSET(IntegerSet(INTEGER(2), INTEGER(4), INTEGER(6), INTEGER(8)))))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['end', 'END', 0.95], ['lines', 'LINESCOPE', 0.95], ['and', 'INTSET', 0.95]]
actual additions -**##**- [['lines', 'LINESCOPE', 0.95], ['and', 'INTSET', 0.95], ['insert', 'INSERT', 0.95], ['end', 'END', 0.95]]

119
Add the string "..???" at the end of every #2nd line.
INSERT(STRING(..???), END(), IterationScope(LINESCOPE(), ALWAYS(), EVERY(INTEGER(2), INTEGER(1))))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['end', 'END', 0.95], ['string', 'LINESCOPE', 0.3], ['every', 'EVERY', 0.95]]
actual additions -**##**- [['string', 'LINESCOPE', 0.3], ['add', 'INSERT', 0.4275], ['every', 'EVERY', 0.95], ['end', 'END', 0.95]]

120
In the every #2 lines, add "..???"
INSERT(STRING(..???), END(), IterationScope(LINESCOPE(), ALWAYS(), EVERY(INTEGER(2), INTEGER(1))))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['add', 'END', 0.3], ['every', 'EVERY', 0.95]]
actual additions -**##**- [['add', 'INSERT', 0.4275], ['every', 'EVERY', 0.95]]

121
At the end of every #2nd line, add "..???"
INSERT(STRING(..???), END(), IterationScope(LINESCOPE(), ALWAYS(), EVERY(INTEGER(2), INTEGER(1))))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['end', 'END', 0.95], ['every', 'EVERY', 0.95]]
actual additions -**##**- [['add', 'INSERT', 0.4275], ['every', 'EVERY', 0.95], ['end', 'END', 0.95]]

122
Insert "..???" in every #2 lines at last
INSERT(STRING(..???), END(), IterationScope(LINESCOPE(), ALWAYS(), EVERY(INTEGER(2), INTEGER(1))))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['last', 'END', 0.9], ['lines', 'LINESCOPE', 0.95], ['every', 'EVERY', 0.95]]
actual additions -**##**- [['lines', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['every', 'EVERY', 0.95], ['last', 'END', 0.9]]

123
Add "..???" at the last of every #2nd statement
INSERT(STRING(..???), END(), IterationScope(LINESCOPE(), ALWAYS(), EVERY(INTEGER(2), INTEGER(1))))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['last', 'END', 0.855], ['statement', 'LINESCOPE', 0.4275], ['every', 'EVERY', 0.95]]
actual additions -**##**- [['statement', 'LINESCOPE', 0.4275], ['add', 'INSERT', 0.4275], ['every', 'EVERY', 0.95], ['last', 'END', 0.855]]

124
Put "..???" in every #2 lines
INSERT(STRING(..???), END(), IterationScope(LINESCOPE(), ALWAYS(), EVERY(INTEGER(2), INTEGER(1))))
options for additions -##**##- [['put', 'INSERT', 0.4275], ['put', 'END', 0.3], ['lines', 'LINESCOPE', 0.95], ['every', 'EVERY', 0.95]]
actual additions -**##**- [['lines', 'LINESCOPE', 0.95], ['put', 'INSERT', 0.4275], ['every', 'EVERY', 0.95]]

125
Insert "..???" at the end of every #2 lines
INSERT(STRING(..???), END(), IterationScope(LINESCOPE(), ALWAYS(), EVERY(INTEGER(2), INTEGER(1))))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['end', 'END', 0.95], ['lines', 'LINESCOPE', 0.95], ['every', 'EVERY', 0.95]]
actual additions -**##**- [['lines', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['every', 'EVERY', 0.95], ['end', 'END', 0.95]]

126
insert "..???" after ending of every #2 lines
INSERT(STRING(..???), END(), IterationScope(LINESCOPE(), ALWAYS(), EVERY(INTEGER(2), INTEGER(1))))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['after', 'END', 0.95], ['lines', 'LINESCOPE', 0.95], ['every', 'EVERY', 0.95]]
actual additions -**##**- [['lines', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['every', 'EVERY', 0.95], ['after', 'END', 0.95]]

127
Insert ".." and "???" in every #2nd line
INSERT(CONCATENATE(STRING(..), STRING(???)), END(), IterationScope(LINESCOPE(), ALWAYS(), EVERY(INTEGER(2), INTEGER(1))))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['and', 'CONCATENATE', 0.95], ['insert', 'END', 0.3], ['line', 'LINESCOPE', 0.95], ['every', 'EVERY', 0.95]]
actual additions -**##**- [['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['every', 'EVERY', 0.95], ['and', 'CONCATENATE', 0.95]]

128
Insert "...???" at the end of every #2nd line starting from the #2nd line.
INSERT(STRING(...???), Position(AFTER(LINETOKEN()), ALL()), IterationScope(LINESCOPE(), ALWAYS(), EVERY(INTEGER(2), STARTFROM(INTEGER(2)))))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['from', 'AFTER', 0.95], ['line', 'LINETOKEN', 0.95], ['every', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'EVERY', 0.95], ['starting', 'STARTFROM', 0.95]]
actual additions -**##**- [['starting', 'STARTFROM', 0.95], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['every', 'EVERY', 0.95], ['from', 'AFTER', 0.95]]

129
Insert "..???" at the end of line in every #2nd line
INSERT(STRING(..???), Position(AFTER(LINETOKEN()), ALL()), IterationScope(LINESCOPE(), ALWAYS(), EVERY(INTEGER(2), INTEGER(1))))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['line', 'AFTER', 0.3], ['line', 'LINETOKEN', 0.95], ['every', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'EVERY', 0.95]]
actual additions -**##**- [['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['every', 'EVERY', 0.95]]

130
put "..???" at the end of every #2 coming lines
INSERT(STRING(..???), END(), IterationScope(LINESCOPE(), ALWAYS(), EVERY(INTEGER(2), INTEGER(1))))
options for additions -##**##- [['put', 'INSERT', 0.4275], ['end', 'END', 0.95], ['lines', 'LINESCOPE', 0.95], ['every', 'EVERY', 0.95]]
actual additions -**##**- [['lines', 'LINESCOPE', 0.95], ['put', 'INSERT', 0.4275], ['every', 'EVERY', 0.95], ['end', 'END', 0.95]]

131
Suffix every #2 line with "..???"
INSERT(STRING(..???), END(), IterationScope(LINESCOPE(), ALWAYS(), EVERY(INTEGER(2), INTEGER(1))))
options for additions -##**##- [['suffix', 'INSERT', 0.3], ['suffix', 'END', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'EVERY', 0.95]]
actual additions -**##**- [['line', 'LINESCOPE', 0.95], ['every', 'EVERY', 0.95], ['suffix', 'END', 0.95]]

132
Replace "St." with "Street"
REPLACE(SelectString(STRING(St.), ALWAYS(), ALL()), BY(STRING(Street)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]

133
Replace "St." wherever it occurs with "Street"
REPLACE(SelectString(STRING(St.), ALWAYS(), ALL()), BY(STRING(Street)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]

134
Replace all the occurrences of "St." with "Street"
REPLACE(SelectString(STRING(St.), ALWAYS(), ALL()), BY(STRING(Street)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['all', 'ALL', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95], ['all', 'ALL', 0.95]]

135
For each line, if it ends with "St.", replace "St." by "Street"
REPLACE(SelectString(STRING(St.), ALWAYS(), ALL()), BY(STRING(Street)), IterationScope(LINESCOPE(), ENDSWITH(STRING(St.)), ALL()))
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['each', 'ALL', 0.95], ['with', 'BY', 0.95], ['ends', 'ENDSWITH', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['ends', 'ENDSWITH', 0.95], ['with', 'BY', 0.95], ['each', 'ALL', 0.95]]

136
replace "St." to "street" in #4th , #6th and #7th line
REPLACE(SelectString(STRING(St.), ALWAYS(), ALL()), BY(STRING(street)), IterationScope(LINESCOPE(), ALWAYS(), INTSET(IntegerSet(INTEGER(4), INTEGER(6), INTEGER(7)))))
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['to', 'BY', 0.95], ['line', 'LINESCOPE', 0.95], ['and', 'INTSET', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['line', 'LINESCOPE', 0.95], ['and', 'INTSET', 0.95], ['to', 'BY', 0.95]]

137
convert the string "St." to "Street" in every line
REPLACE(SelectString(STRING(St.), ALWAYS(), ALL()), BY(STRING(Street)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['convert', 'REPLACE', 0.45], ['every', 'ALL', 0.95], ['to', 'BY', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['convert', 'REPLACE', 0.45], ['line', 'LINESCOPE', 0.95], ['to', 'BY', 0.95], ['every', 'ALL', 0.95]]

138
Convert all "St." to "Street"
REPLACE(SelectString(STRING(St.), ALWAYS(), ALL()), BY(STRING(Street)), DOCUMENT())
options for additions -##**##- [['convert', 'REPLACE', 0.4275], ['all', 'ALL', 0.95], ['to', 'BY', 0.95]]
actual additions -**##**- [['convert', 'REPLACE', 0.4275], ['to', 'BY', 0.95], ['all', 'ALL', 0.95]]

139
Replace "St." by "Street"
REPLACE(SelectString(STRING(St.), ALWAYS(), ALL()), BY(STRING(Street)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['by', 'BY', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['by', 'BY', 0.95]]

140
Convert "St." to "Street" at the end of #4th , #6th and #7th line
REPLACE(SelectString(STRING(St.), ALWAYS(), ALL()), BY(STRING(Street)), IterationScope(LINESCOPE(), ALWAYS(), INTSET(IntegerSet(INTEGER(4), INTEGER(6), INTEGER(7)))))
options for additions -##**##- [['convert', 'REPLACE', 0.4275], ['to', 'BY', 0.95], ['line', 'LINESCOPE', 0.95], ['and', 'INTSET', 0.95]]
actual additions -**##**- [['convert', 'REPLACE', 0.4275], ['line', 'LINESCOPE', 0.95], ['and', 'INTSET', 0.95], ['to', 'BY', 0.95]]

141
replace "St." with the word "Street"
REPLACE(SelectString(STRING(St.), ALWAYS(), ALL()), BY(WORD(STRING(Street))), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95], ['word', 'WORD', 0.95]]
actual additions -**##**- [['word', 'WORD', 0.95], ['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]

142
replace "to" with "for"
REPLACE(SelectString(STRING(to), ALWAYS(), ALL()), BY(STRING(for)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]

143
replace "to" with "for" in each sentence
REPLACE(SelectString(STRING(to), ALWAYS(), ALL()), BY(STRING(for)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['each', 'ALL', 0.95], ['with', 'BY', 0.95], ['sentence', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['sentence', 'LINESCOPE', 0.95], ['with', 'BY', 0.95], ['each', 'ALL', 0.95]]

144
replace the text in between "L" and "R" by "details"
REPLACE(SelectString(TEXTTOKEN(), BETWEEN(STRING(L), TO(STRING(R))), ALL()), BY(STRING(details)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['text', 'TEXTTOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95], ['by', 'BY', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['text', 'TEXTTOKEN', 0.95], ['replace', 'REPLACE', 0.95], ['by', 'BY', 0.95], ['between', 'BETWEEN', 0.95]]

145
Replace the text inside "L" and "R" with "details"
REPLACE(SelectString(TEXTTOKEN(), BETWEEN(STRING(L), TO(STRING(R))), ALL()), BY(STRING(details)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['text', 'TEXTTOKEN', 0.95], ['inside', 'BETWEEN', 0.95], ['and', 'TO', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['text', 'TEXTTOKEN', 0.95], ['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95], ['inside', 'BETWEEN', 0.95]]

146
Replace the text between "L" and "R" with the word "details"
REPLACE(SelectString(TEXTTOKEN(), BETWEEN(STRING(L), TO(STRING(R))), ALL()), BY(WORD(STRING(details))), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['text', 'TEXTTOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95], ['with', 'BY', 0.95], ['word', 'WORD', 0.95]]
actual additions -**##**- [['word', 'WORD', 0.95], ['and', 'TO', 0.95], ['text', 'TEXTTOKEN', 0.95], ['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95], ['between', 'BETWEEN', 0.95]]

147
Replace the contents in between "L" and "R" with "details"
REPLACE(SelectString(TEXTTOKEN(), BETWEEN(STRING(L), TO(STRING(R))), ALL()), BY(STRING(details)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['contents', 'TEXTTOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['contents', 'TEXTTOKEN', 0.95], ['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95], ['between', 'BETWEEN', 0.95]]

148
For every line, remove the number between "-" and "-"
REMOVE(SelectString(NUMBERTOKEN(), BETWEEN(STRING(-), TO(STRING(-))), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['number', 'NUMBERTOKEN', 0.9025], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95], ['every', 'ALL', 0.95], ['number', 'LINESCOPE', 0.3], ['every', 'ALL', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['remove', 'REMOVE', 0.95], ['number', 'NUMBERTOKEN', 0.9025], ['between', 'BETWEEN', 0.95], ['every', 'ALL', 0.95]]

149
Eliminate all the characters between "-" and "-"
REMOVE(SelectString(CHARTOKEN(), BETWEEN(STRING(-), TO(STRING(-))), ALL()), DOCUMENT())
options for additions -##**##- [['eliminate', 'REMOVE', 0.9], ['characters', 'CHARTOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['eliminate', 'REMOVE', 0.9], ['characters', 'CHARTOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['all', 'ALL', 0.95]]

150
Remove #4th, #5th and #6th digit from all lines
REMOVE(SelectString(DIGITTOKEN(), ALWAYS(), INTSET(IntegerSet(INTEGER(4), INTEGER(5), INTEGER(6)))), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['digit', 'DIGITTOKEN', 0.95], ['and', 'INTSET', 0.95], ['lines', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['lines', 'LINESCOPE', 0.95], ['and', 'INTSET', 0.95], ['digit', 'DIGITTOKEN', 0.95], ['all', 'ALL', 0.95]]

151
Remove #2nd number from each line
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), INTEGER(2)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['number', 'NUMBERTOKEN', 0.9025], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['number', 'NUMBERTOKEN', 0.9025], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]

152
delete the #2nd number from each line.
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), INTEGER(2)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['delete', 'REMOVE', 0.45], ['number', 'NUMBERTOKEN', 0.9025], ['number', 'LINESCOPE', 0.3], ['each', 'ALL', 0.95]]
actual additions -**##**- [['delete', 'REMOVE', 0.45], ['number', 'NUMBERTOKEN', 0.9025], ['each', 'ALL', 0.95]]

153
Remove the words that are between "-" and "-"
REMOVE(SelectString(WORDTOKEN(), BETWEEN(STRING(-), TO(STRING(-))), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['words', 'WORDTOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['and', 'TO', 0.95], ['remove', 'REMOVE', 0.95], ['between', 'BETWEEN', 0.95]]

154
remove "L" and remove "R"
SEQ(REMOVE(SelectString(STRING(L), ALWAYS(), ALL()), DOCUMENT()), REMOVE(SelectString(STRING(R), ALWAYS(), ALL()), DOCUMENT()))
options for additions -##**##- [['and', 'SEQ', 0.95], ['remove', 'REMOVE', 0.95], ['remove', 'REMOVE', 0.95]]
actual additions -**##**- [['and', 'SEQ', 0.95], ['remove', 'REMOVE', 0.95]]

155
remove all "L" and remove all "R"
SEQ(REMOVE(SelectString(STRING(L), ALWAYS(), ALL()), DOCUMENT()), REMOVE(SelectString(STRING(R), ALWAYS(), ALL()), DOCUMENT()))
options for additions -##**##- [['and', 'SEQ', 0.95], ['remove', 'REMOVE', 0.95], ['all', 'ALL', 0.95], ['remove', 'REMOVE', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['and', 'SEQ', 0.95], ['remove', 'REMOVE', 0.95], ['all', 'ALL', 0.95]]

156
for each line remove the "L" and for each line remove "R"
SEQ(REMOVE(SelectString(STRING(L), ALWAYS(), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL())), REMOVE(SelectString(STRING(R), ALWAYS(), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL())))
options for additions -##**##- [['and', 'SEQ', 0.95], ['remove', 'REMOVE', 0.95], ['each', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95], ['remove', 'REMOVE', 0.95], ['each', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['and', 'SEQ', 0.95], ['remove', 'REMOVE', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]

157
remove "L" from each line and remove "R" from each line
SEQ(REMOVE(SelectString(STRING(L), ALWAYS(), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL())), REMOVE(SelectString(STRING(R), ALWAYS(), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL())))
options for additions -##**##- [['and', 'SEQ', 0.95], ['remove', 'REMOVE', 0.95], ['each', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95], ['remove', 'REMOVE', 0.95], ['each', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['and', 'SEQ', 0.95], ['remove', 'REMOVE', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]

158
Eliminate the characters #1st, #5th, #6th and #10th from all the lines.
REMOVE(SelectString(CHARTOKEN(), ALWAYS(), INTSET(IntegerSet(INTEGER(1), INTEGER(10), INTEGER(5), INTEGER(6)))), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['eliminate', 'REMOVE', 0.855], ['characters', 'CHARTOKEN', 0.95], ['and', 'INTSET', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['eliminate', 'REMOVE', 0.855], ['and', 'INTSET', 0.95], ['characters', 'CHARTOKEN', 0.95], ['all', 'ALL', 0.95]]

159
Remove Numbers
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025]]

160
remove only the numeric characters.
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['numeric', 'NUMBERTOKEN', 0.8573749999999999]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['numeric', 'NUMBERTOKEN', 0.8573749999999999]]

161
Remove the #1st word of the line which starts with a number
REMOVE(SelectString(WORDTOKEN(), ALWAYS(), INTEGER(1)), IterationScope(LINESCOPE(), STARTSWITH(NUMBERTOKEN()), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['word', 'WORDTOKEN', 0.95], ['line', 'LINESCOPE', 0.95], ['starts', 'STARTSWITH', 0.855], ['number', 'NUMBERTOKEN', 0.9025]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['starts', 'STARTSWITH', 0.855], ['remove', 'REMOVE', 0.95], ['number', 'NUMBERTOKEN', 0.9025], ['line', 'LINESCOPE', 0.95]]

162
Remove the numbers from all lines except the #2nd one
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALLBUT(INTEGER(2))))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['all', 'ALL', 0.95], ['lines', 'LINESCOPE', 0.95], ['except', 'ALLBUT', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['lines', 'LINESCOPE', 0.95], ['except', 'ALLBUT', 0.95], ['all', 'ALL', 0.95]]

163
remove digits in each line
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['digits', 'NUMBERTOKEN', 0.3], ['each', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['digits', 'NUMBERTOKEN', 0.3], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]

164
remove numbers from each line except line #2
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALLBUT(INTEGER(2))))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['each', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['except', 'ALLBUT', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['line', 'LINESCOPE', 0.95], ['except', 'ALLBUT', 0.95], ['each', 'ALL', 0.95]]

165
Remove the numbers from the text
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025]]

166
Remove all the numerals from every line.
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['numerals', 'NUMBERTOKEN', 0.8573749999999999], ['all', 'ALL', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['numerals', 'NUMBERTOKEN', 0.8573749999999999], ['all', 'ALL', 0.95]]

167
Remove numbers from all sentences in A
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['all', 'ALL', 0.95], ['sentences', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['sentences', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]

168
Remove all the numerals from every line.
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['numerals', 'NUMBERTOKEN', 0.8573749999999999], ['all', 'ALL', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['numerals', 'NUMBERTOKEN', 0.8573749999999999], ['all', 'ALL', 0.95]]

169
Remove numbers from all sentences in A
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['all', 'ALL', 0.95], ['sentences', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['sentences', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]

170
Drop all numbers.
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['drop', 'REMOVE', 0.45], ['all', 'ALL', 0.95]]
actual additions -**##**- [['drop', 'REMOVE', 0.45], ['all', 'ALL', 0.95]]

171
Remove numeric values from all the lines
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['numeric', 'NUMBERTOKEN', 0.8573749999999999], ['all', 'ALL', 0.95], ['lines', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['numeric', 'NUMBERTOKEN', 0.8573749999999999], ['lines', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]

172
if any word have digits at the beginning of it then remove digits
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), ALL()), IterationScope(WORDSCOPE(), STARTSWITH(NUMBERTOKEN()), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['word', 'NUMBERTOKEN', 0.3], ['word', 'WORDSCOPE', 0.95], ['beginning', 'STARTSWITH', 0.9025], ['word', 'NUMBERTOKEN', 0.3]]
actual additions -**##**- [['word', 'WORDSCOPE', 0.95], ['beginning', 'STARTSWITH', 0.9025], ['remove', 'REMOVE', 0.95]]

173
remove digits from sentence
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['sentence', 'LINESCOPE', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['sentence', 'LINESCOPE', 0.95]]

174
Remove all the numbers from each line
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['all', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['line', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]

175
remove digits from #1st #3rd and #4th line
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), ALL()), IterationScope(LINESCOPE(), ALWAYS(), INTSET(IntegerSet(INTEGER(1), INTEGER(3), INTEGER(4)))))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['line', 'NUMBERTOKEN', 0.3], ['line', 'LINESCOPE', 0.95], ['and', 'INTSET', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['line', 'LINESCOPE', 0.95], ['and', 'INTSET', 0.95]]

176
Remove the numbers from each line
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['each', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]

177
Remove all the digits
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['all', 'ALL', 0.95]]

178
Delete all the numeric part of the text
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['numeric', 'NUMBERTOKEN', 0.8573749999999999], ['all', 'ALL', 0.95]]
actual additions -**##**- [['delete', 'REMOVE', 0.4275], ['numeric', 'NUMBERTOKEN', 0.8573749999999999], ['all', 'ALL', 0.95]]

179
Remove the numbers from all the lines
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['all', 'ALL', 0.95], ['lines', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['lines', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]

180
Remove the line containing "St" or containing "Lane" except the #1st line
REMOVE(SelectString(LINETOKEN(), ALWAYS(), ALL()), IterationScope(LINESCOPE(), OR(CONTAINS(STRING(St)), CONTAINS(STRING(Lane))), ALLBUT(INTEGER(1))))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['line', 'LINETOKEN', 0.95], ['line', 'LINESCOPE', 0.95], ['or', 'OR', 0.95], ['containing', 'CONTAINS', 0.95], ['containing', 'CONTAINS', 0.95], ['except', 'ALLBUT', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['or', 'OR', 0.95], ['line', 'LINESCOPE', 0.95], ['containing', 'CONTAINS', 0.95], ['except', 'ALLBUT', 0.95]]

181
Remove the sentence if it does not contain the string "Cent"
REMOVE(SelectString(LINETOKEN(), NOT(CONTAINS(STRING(Cent))), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['sentence', 'LINETOKEN', 0.95], ['not', 'NOT', 0.95], ['contain', 'CONTAINS', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['not', 'NOT', 0.95], ['sentence', 'LINETOKEN', 0.95], ['contain', 'CONTAINS', 0.95]]

182
Remove line #3rd and #4th
REMOVE(SelectString(LINETOKEN(), ALWAYS(), INTSET(IntegerSet(INTEGER(3), INTEGER(4)))), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['line', 'LINETOKEN', 0.95], ['and', 'INTSET', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['line', 'LINETOKEN', 0.95], ['and', 'INTSET', 0.95]]

183
Remove the #3rd and #4th line
REMOVE(SelectString(LINETOKEN(), ALWAYS(), INTSET(IntegerSet(INTEGER(3), INTEGER(4)))), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['line', 'LINETOKEN', 0.95], ['and', 'INTSET', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['line', 'LINETOKEN', 0.95], ['and', 'INTSET', 0.95]]

184
Remove the sentences which does not contain "Cent" as its part
REMOVE(SelectString(LINETOKEN(), NOT(CONTAINS(STRING(Cent))), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['sentences', 'LINETOKEN', 0.95], ['not', 'NOT', 0.95], ['contain', 'CONTAINS', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['not', 'NOT', 0.95], ['sentences', 'LINETOKEN', 0.95], ['contain', 'CONTAINS', 0.95]]

185
Eliminate the #3rd and #4th line
REMOVE(SelectString(LINETOKEN(), ALWAYS(), INTSET(IntegerSet(INTEGER(3), INTEGER(4)))), DOCUMENT())
options for additions -##**##- [['eliminate', 'REMOVE', 0.855], ['line', 'LINETOKEN', 0.95], ['and', 'INTSET', 0.95]]
actual additions -**##**- [['eliminate', 'REMOVE', 0.855], ['line', 'LINETOKEN', 0.95], ['and', 'INTSET', 0.95]]

186
Eliminate the line which does not contain "Cent" in any word of the sentence
REMOVE(SelectString(LINETOKEN(), NOT(CONTAINS(STRING(Cent))), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['eliminate', 'REMOVE', 0.855], ['line', 'LINETOKEN', 0.95], ['not', 'NOT', 0.95], ['contain', 'CONTAINS', 0.95], ['line', 'LINESCOPE', 0.95]]
actual additions -**##**- [['eliminate', 'REMOVE', 0.855], ['not', 'NOT', 0.95], ['line', 'LINESCOPE', 0.95], ['contain', 'CONTAINS', 0.95]]

187
Remove all lines which do not contain "Cent"
REMOVE(SelectString(LINETOKEN(), NOT(CONTAINS(STRING(Cent))), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['lines', 'LINETOKEN', 0.95], ['not', 'NOT', 0.95], ['contain', 'CONTAINS', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['not', 'NOT', 0.95], ['lines', 'LINETOKEN', 0.95], ['contain', 'CONTAINS', 0.95], ['all', 'ALL', 0.95]]

188
Remove the line if it does not contain "cent" as a substring
REMOVE(SelectString(LINETOKEN(), NOT(CONTAINS(STRING(cent))), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['line', 'LINETOKEN', 0.9025], ['not', 'NOT', 0.95], ['contain', 'CONTAINS', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['not', 'NOT', 0.95], ['line', 'LINETOKEN', 0.9025], ['contain', 'CONTAINS', 0.95]]

189
Delete those lines that do not contain "Cent"
REMOVE(SelectString(LINETOKEN(), NOT(CONTAINS(STRING(Cent))), ALL()), DOCUMENT())
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['lines', 'LINETOKEN', 0.9025], ['not', 'NOT', 0.95], ['contain', 'CONTAINS', 0.95]]
actual additions -**##**- [['delete', 'REMOVE', 0.4275], ['not', 'NOT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['contain', 'CONTAINS', 0.95]]

190
Remove all the characters after ";" in each sentence
REMOVE(SelectString(CHARTOKEN(), AFTER(STRING(;)), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['characters', 'CHARTOKEN', 0.95], ['after', 'AFTER', 0.95], ['all', 'ALL', 0.95], ['sentence', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['sentence', 'LINESCOPE', 0.95], ['characters', 'CHARTOKEN', 0.95], ['all', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

191
In each line remove all the characters after ";"
REMOVE(SelectString(CHARTOKEN(), AFTER(STRING(;)), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['characters', 'CHARTOKEN', 0.95], ['after', 'AFTER', 0.95], ['each', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['line', 'LINESCOPE', 0.95], ['characters', 'CHARTOKEN', 0.95], ['each', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

192
Remove all text in a line starting from "//"
REMOVE(SelectString(TEXTTOKEN(), STARTSWITH(STRING(//)), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['text', 'TEXTTOKEN', 0.95], ['starting', 'STARTSWITH', 0.855], ['all', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['text', 'TEXTTOKEN', 0.95], ['starting', 'STARTSWITH', 0.855], ['remove', 'REMOVE', 0.95], ['line', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]

193
In each line, remove everything after the ";"
REMOVE(SelectString(TEXTTOKEN(), AFTER(STRING(;)), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['everything', 'TEXTTOKEN', 0.95], ['after', 'AFTER', 0.95], ['each', 'ALL', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['everything', 'TEXTTOKEN', 0.95], ['remove', 'REMOVE', 0.95], ['each', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

194
remove text beginning with "//"
REMOVE(SelectString(TEXTTOKEN(), STARTSWITH(STRING(//)), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['text', 'TEXTTOKEN', 0.95], ['beginning', 'STARTSWITH', 0.9025]]
actual additions -**##**- [['text', 'TEXTTOKEN', 0.95], ['beginning', 'STARTSWITH', 0.9025], ['remove', 'REMOVE', 0.95]]

195
remove everything after endpoints ";"
REMOVE(SelectString(TEXTTOKEN(), AFTER(STRING(;)), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['everything', 'TEXTTOKEN', 0.95], ['after', 'AFTER', 0.95]]
actual additions -**##**- [['everything', 'TEXTTOKEN', 0.95], ['remove', 'REMOVE', 0.95], ['after', 'AFTER', 0.95]]

196
In every line, delete the text after "//"
REMOVE(SelectString(TEXTTOKEN(), AFTER(STRING(//)), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['text', 'TEXTTOKEN', 0.95], ['after', 'AFTER', 0.95], ['every', 'ALL', 0.95], ['text', 'LINESCOPE', 0.45], ['every', 'ALL', 0.95]]
actual additions -**##**- [['text', 'TEXTTOKEN', 0.95], ['delete', 'REMOVE', 0.4275], ['every', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

197
remove all the characters after ";" in all the lines
REMOVE(SelectString(CHARTOKEN(), AFTER(STRING(;)), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['characters', 'CHARTOKEN', 0.95], ['after', 'AFTER', 0.95], ['all', 'ALL', 0.95], ['lines', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['lines', 'LINESCOPE', 0.95], ['characters', 'CHARTOKEN', 0.95], ['all', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

198
Delete the text after symbol ";"
REMOVE(SelectString(TEXTTOKEN(), AFTER(STRING(;)), ALL()), DOCUMENT())
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['text', 'TEXTTOKEN', 0.95], ['after', 'AFTER', 0.95]]
actual additions -**##**- [['text', 'TEXTTOKEN', 0.95], ['delete', 'REMOVE', 0.4275], ['after', 'AFTER', 0.95]]

199
remove anything that follows after ";"
REMOVE(SelectString(CHARTOKEN(), AFTER(STRING(;)), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['anything', 'CHARTOKEN', 0.95], ['follows', 'AFTER', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['anything', 'CHARTOKEN', 0.95], ['follows', 'AFTER', 0.95]]

200
Remove all the words after the "//"
REMOVE(SelectString(WORDTOKEN(), AFTER(STRING(//)), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['words', 'WORDTOKEN', 0.95], ['after', 'AFTER', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['remove', 'REMOVE', 0.95], ['all', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

201
Drop everything after ";" in each line
REMOVE(SelectString(TEXTTOKEN(), AFTER(STRING(;)), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['drop', 'REMOVE', 0.4275], ['everything', 'TEXTTOKEN', 0.95], ['after', 'AFTER', 0.95], ['each', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['everything', 'TEXTTOKEN', 0.95], ['drop', 'REMOVE', 0.4275], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

202
In each line, remove the part after "//"
REMOVE(SelectString(TEXTTOKEN(), AFTER(STRING(//)), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['part', 'TEXTTOKEN', 0.3], ['after', 'AFTER', 0.95], ['each', 'ALL', 0.95], ['part', 'LINESCOPE', 0.45], ['each', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['part', 'LINESCOPE', 0.45], ['each', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

203
In each line, remove the part after ";"
REMOVE(SelectString(TEXTTOKEN(), AFTER(STRING(;)), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['part', 'TEXTTOKEN', 0.3], ['after', 'AFTER', 0.95], ['each', 'ALL', 0.95], ['part', 'LINESCOPE', 0.4275], ['each', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['part', 'LINESCOPE', 0.4275], ['each', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

204
Remove everything after ";" in each line.
REMOVE(SelectString(TEXTTOKEN(), AFTER(STRING(;)), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['everything', 'TEXTTOKEN', 0.95], ['after', 'AFTER', 0.95], ['each', 'ALL', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['everything', 'TEXTTOKEN', 0.95], ['remove', 'REMOVE', 0.95], ['each', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

205
remove text after ";" from each line
REMOVE(SelectString(TEXTTOKEN(), AFTER(STRING(;)), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['text', 'TEXTTOKEN', 0.95], ['after', 'AFTER', 0.95], ['each', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['text', 'TEXTTOKEN', 0.95], ['remove', 'REMOVE', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

206
remove everything after ";" from the sentence
REMOVE(SelectString(TEXTTOKEN(), AFTER(STRING(;)), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['everything', 'TEXTTOKEN', 0.95], ['after', 'AFTER', 0.95], ['sentence', 'LINESCOPE', 0.95]]
actual additions -**##**- [['everything', 'TEXTTOKEN', 0.95], ['remove', 'REMOVE', 0.95], ['sentence', 'LINESCOPE', 0.95], ['after', 'AFTER', 0.95]]

207
in each line, remove everything after "//"
REMOVE(SelectString(TEXTTOKEN(), AFTER(STRING(//)), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['everything', 'TEXTTOKEN', 0.95], ['after', 'AFTER', 0.95], ['each', 'ALL', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['everything', 'TEXTTOKEN', 0.95], ['remove', 'REMOVE', 0.95], ['each', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

208
Remove all text that is written after ";"
REMOVE(SelectString(TEXTTOKEN(), AFTER(STRING(;)), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['text', 'TEXTTOKEN', 0.95], ['after', 'AFTER', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['text', 'TEXTTOKEN', 0.95], ['remove', 'REMOVE', 0.95], ['all', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

209
remove everything after ";" till the end of the row
REMOVE(SelectString(TEXTTOKEN(), AFTER(STRING(;)), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['everything', 'TEXTTOKEN', 0.95], ['after', 'AFTER', 0.95], ['row', 'LINESCOPE', 0.45]]
actual additions -**##**- [['everything', 'TEXTTOKEN', 0.95], ['remove', 'REMOVE', 0.95], ['row', 'LINESCOPE', 0.45], ['after', 'AFTER', 0.95]]

210
Print everything before ";"
PRINT(SelectString(TEXTTOKEN(), BEFORE(STRING(;)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['everything', 'TEXTTOKEN', 0.95], ['before', 'BEFORE', 0.95]]
actual additions -**##**- [['everything', 'TEXTTOKEN', 0.95], ['print', 'PRINT', 0.95], ['before', 'BEFORE', 0.95]]

211
Remove everything that comes after "//" in each line
REMOVE(SelectString(TEXTTOKEN(), AFTER(STRING(//)), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['everything', 'TEXTTOKEN', 0.95], ['after', 'AFTER', 0.95], ['each', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['everything', 'TEXTTOKEN', 0.95], ['remove', 'REMOVE', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

212
remove every character after "//"
REMOVE(SelectString(CHARTOKEN(), AFTER(STRING(//)), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['character', 'CHARTOKEN', 0.95], ['after', 'AFTER', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['character', 'CHARTOKEN', 0.95], ['every', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

213
Remove the #1st character
REMOVE(SelectString(CHARTOKEN(), ALWAYS(), INTEGER(1)), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['character', 'CHARTOKEN', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['character', 'CHARTOKEN', 0.95]]

214
Remove #1st occurrence of "&" from the all of the above lines
REMOVE(SelectString(STRING(&), ALWAYS(), INTEGER(1)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['lines', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['lines', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]

215
Remove the #1st "&" symbol from all the lines
REMOVE(SelectString(STRING(&), ALWAYS(), INTEGER(1)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['lines', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['lines', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]

216
Remove the #1st character from every line
REMOVE(SelectString(CHARTOKEN(), ALWAYS(), INTEGER(1)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['character', 'CHARTOKEN', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['line', 'LINESCOPE', 0.95], ['character', 'CHARTOKEN', 0.95], ['every', 'ALL', 0.95]]

217
Replace the #1st symbol "&" with "-" from every line
REPLACE(SelectString(STRING(&), ALWAYS(), INTEGER(1)), BY(STRING(-)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['line', 'LINESCOPE', 0.95], ['with', 'BY', 0.95], ['every', 'ALL', 0.95]]

218
if "&" occurs at the beginning of line remove "&"
REMOVE(SelectString(STRING(&), ALWAYS(), ALL()), IterationScope(LINESCOPE(), STARTSWITH(STRING(&)), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['line', 'LINESCOPE', 0.95], ['beginning', 'STARTSWITH', 0.9025]]
actual additions -**##**- [['beginning', 'STARTSWITH', 0.9025], ['remove', 'REMOVE', 0.95], ['line', 'LINESCOPE', 0.95]]

219
Remove #1st "&" from each line
REMOVE(SelectString(STRING(&), ALWAYS(), INTEGER(1)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]

220
Remove #1st occurrence of "&" form every line left to right.
REMOVE(SelectString(STRING(&), ALWAYS(), INTEGER(1)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]

221
Remove #1st character form every row in every line.
REMOVE(SelectString(CHARTOKEN(), ALWAYS(), INTEGER(1)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['character', 'CHARTOKEN', 0.95], ['form', 'LINESCOPE', 0.45], ['every', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['form', 'LINESCOPE', 0.45], ['character', 'CHARTOKEN', 0.95], ['every', 'ALL', 0.95]]

222
Remove #1st "&" character from each line
REMOVE(SelectString(STRING(&), ALWAYS(), INTEGER(1)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]

223
Eliminate the #1st character from all the lines
REMOVE(SelectString(CHARTOKEN(), ALWAYS(), INTEGER(1)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['eliminate', 'REMOVE', 0.855], ['character', 'CHARTOKEN', 0.95], ['lines', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['eliminate', 'REMOVE', 0.855], ['lines', 'LINESCOPE', 0.95], ['character', 'CHARTOKEN', 0.95], ['all', 'ALL', 0.95]]

224
delete #1st occurrence of "&" symbol
REMOVE(SelectString(STRING(&), ALWAYS(), INTEGER(1)), DOCUMENT())
options for additions -##**##- [['delete', 'REMOVE', 0.4275]]
actual additions -**##**- [['delete', 'REMOVE', 0.4275]]

225
Remove "&" before every line
REMOVE(SelectString(STRING(&), BEFORE(LINETOKEN()), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['before', 'BEFORE', 0.95], ['line', 'LINETOKEN', 0.9025], ['every', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['line', 'LINETOKEN', 0.9025], ['before', 'BEFORE', 0.95], ['every', 'ALL', 0.95]]

226
Remove every #1st occurrence of "&" from all the lines
REMOVE(SelectString(STRING(&), ALWAYS(), INTEGER(1)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['lines', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['lines', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]

227
remove the #1st occurrence of character "&" in the text
REMOVE(SelectString(STRING(&), ALWAYS(), INTEGER(1)), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95]]

228
add "&"
INSERT(STRING(&), END(), DOCUMENT())
options for additions -##**##- [['add', 'INSERT', 0.4275], ['add', 'END', 0.3]]
actual additions -**##**- [['add', 'INSERT', 0.4275]]

229
Remove the #1st occurrence of "&" in each line
REMOVE(SelectString(STRING(&), ALWAYS(), INTEGER(1)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]

230
Remove #1st "&" from every line
REMOVE(SelectString(STRING(&), ALWAYS(), INTEGER(1)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]

231
print everything between the occurrences of "--" and "--"
PRINT(SelectString(TEXTTOKEN(), BETWEEN(STRING(--), TO(STRING(--))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['everything', 'TEXTTOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['everything', 'TEXTTOKEN', 0.95], ['print', 'PRINT', 0.95], ['between', 'BETWEEN', 0.95]]

232
Extract the word immediately following the #1st "--"
PRINT(SelectString(WORDTOKEN(), AFTER(STRING(--)), INTEGER(1)), DOCUMENT())
options for additions -##**##- [['extract', 'PRINT', 0.95], ['word', 'WORDTOKEN', 0.95], ['following', 'AFTER', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['extract', 'PRINT', 0.95], ['following', 'AFTER', 0.95]]

233
extract all words that have "www" or have "com"
PRINT(SelectString(WORDTOKEN(), OR(CONTAINS(STRING(www)), CONTAINS(STRING(com))), ALL()), DOCUMENT())
options for additions -##**##- [['extract', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['or', 'OR', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['extract', 'PRINT', 0.95], ['or', 'OR', 0.95], ['all', 'ALL', 0.95]]

234
Remove everything before "--"
REMOVE(SelectString(TEXTTOKEN(), BEFORE(STRING(--)), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['everything', 'TEXTTOKEN', 0.95], ['before', 'BEFORE', 0.95]]
actual additions -**##**- [['everything', 'TEXTTOKEN', 0.95], ['remove', 'REMOVE', 0.95], ['before', 'BEFORE', 0.95]]

235
Extract everything immediately after "-- "
PRINT(SelectString(TEXTTOKEN(), AFTER(STRING(-- )), ALL()), DOCUMENT())
options for additions -##**##- [['extract', 'PRINT', 0.95], ['everything', 'TEXTTOKEN', 0.95], ['after', 'AFTER', 0.95]]
actual additions -**##**- [['everything', 'TEXTTOKEN', 0.95], ['extract', 'PRINT', 0.95], ['after', 'AFTER', 0.95]]

236
Extract everything before next "--"
PRINT(SelectString(TEXTTOKEN(), BEFORE(STRING(--)), ALL()), DOCUMENT())
options for additions -##**##- [['extract', 'PRINT', 0.95], ['everything', 'TEXTTOKEN', 0.95], ['before', 'BEFORE', 0.95]]
actual additions -**##**- [['everything', 'TEXTTOKEN', 0.95], ['extract', 'PRINT', 0.95], ['before', 'BEFORE', 0.95]]

237
Remove all empty lines.
REMOVE(SelectString(BLANKLINETOKEN(), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['empty', 'BLANKLINETOKEN', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['empty', 'BLANKLINETOKEN', 0.95], ['all', 'ALL', 0.95]]

238
remove blank lines if any.
REMOVE(SelectString(BLANKLINETOKEN(), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['blank', 'BLANKLINETOKEN', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['blank', 'BLANKLINETOKEN', 0.95]]

239
Remove any empty line
REMOVE(SelectString(BLANKLINETOKEN(), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['empty', 'BLANKLINETOKEN', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['empty', 'BLANKLINETOKEN', 0.95]]

240
Remove the lines containing no characters.
REMOVE(SelectString(LINETOKEN(), NOT(CONTAINS(CHARTOKEN())), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['lines', 'LINETOKEN', 0.9025], ['no', 'NOT', 0.95], ['containing', 'CONTAINS', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['no', 'NOT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['containing', 'CONTAINS', 0.95]]

241
Remove Blank lines
REMOVE(SelectString(BLANKLINETOKEN(), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['blank', 'BLANKLINETOKEN', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['blank', 'BLANKLINETOKEN', 0.95]]

242
remove the empty line
REMOVE(SelectString(BLANKLINETOKEN(), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['empty', 'BLANKLINETOKEN', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['empty', 'BLANKLINETOKEN', 0.95]]

243
remove all the blank lines.
REMOVE(SelectString(BLANKLINETOKEN(), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['blank', 'BLANKLINETOKEN', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['blank', 'BLANKLINETOKEN', 0.95], ['all', 'ALL', 0.95]]

244
Remove empty lines.
REMOVE(SelectString(BLANKLINETOKEN(), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['empty', 'BLANKLINETOKEN', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['empty', 'BLANKLINETOKEN', 0.95]]

245
Remove lines containing no characters.
REMOVE(SelectString(LINETOKEN(), NOT(CONTAINS(CHARTOKEN())), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['lines', 'LINETOKEN', 0.9025], ['no', 'NOT', 0.95], ['containing', 'CONTAINS', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['no', 'NOT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['containing', 'CONTAINS', 0.95]]

246
remove all blank lines.
REMOVE(SelectString(BLANKLINETOKEN(), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['blank', 'BLANKLINETOKEN', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['blank', 'BLANKLINETOKEN', 0.95], ['all', 'ALL', 0.95]]

247
Remove the blank lines.
REMOVE(SelectString(BLANKLINETOKEN(), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['blank', 'BLANKLINETOKEN', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['blank', 'BLANKLINETOKEN', 0.95]]

248
Remove all the blank lines.
REMOVE(SelectString(BLANKLINETOKEN(), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['blank', 'BLANKLINETOKEN', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['blank', 'BLANKLINETOKEN', 0.95], ['all', 'ALL', 0.95]]

249
Remove all the blank lines.
REMOVE(SelectString(BLANKLINETOKEN(), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['blank', 'BLANKLINETOKEN', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['blank', 'BLANKLINETOKEN', 0.95], ['all', 'ALL', 0.95]]

250
Delete empty lines.
REMOVE(SelectString(BLANKLINETOKEN(), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['empty', 'REMOVE', 0.45], ['empty', 'BLANKLINETOKEN', 0.95]]
actual additions -**##**- [['empty', 'BLANKLINETOKEN', 0.95]]

251
Remove the "-" and remove the digits between "-" and "-"
SEQ(REMOVE(SelectString(STRING(-), ALWAYS(), ALL()), DOCUMENT()), REMOVE(SelectString(NUMBERTOKEN(), BETWEEN(STRING(-), TO(STRING(-))), ALL()), DOCUMENT()))
options for additions -##**##- [['and', 'SEQ', 0.95], ['remove', 'REMOVE', 0.95], ['remove', 'REMOVE', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['remove', 'REMOVE', 0.95], ['between', 'BETWEEN', 0.95]]

252
Remove all the "-" and remove the number between "-" and "-"
SEQ(REMOVE(SelectString(STRING(-), ALWAYS(), ALL()), DOCUMENT()), REMOVE(SelectString(NUMBERTOKEN(), BETWEEN(STRING(-), TO(STRING(-))), ALL()), DOCUMENT()))
options for additions -##**##- [['and', 'SEQ', 0.95], ['remove', 'REMOVE', 0.95], ['all', 'ALL', 0.95], ['remove', 'REMOVE', 0.95], ['number', 'NUMBERTOKEN', 0.9025], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['remove', 'REMOVE', 0.95], ['number', 'NUMBERTOKEN', 0.9025], ['between', 'BETWEEN', 0.95], ['all', 'ALL', 0.95]]

253
Eliminate all the "-" and remove the characters between "-" and "-"
SEQ(REMOVE(SelectString(STRING(-), ALWAYS(), ALL()), DOCUMENT()), REMOVE(SelectString(CHARTOKEN(), BETWEEN(STRING(-), TO(STRING(-))), ALL()), DOCUMENT()))
options for additions -##**##- [['and', 'SEQ', 0.95], ['remove', 'REMOVE', 0.95], ['all', 'ALL', 0.95], ['remove', 'REMOVE', 0.95], ['characters', 'CHARTOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['remove', 'REMOVE', 0.95], ['characters', 'CHARTOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['all', 'ALL', 0.95]]

254
Remove everything before "--".
REMOVE(SelectString(TEXTTOKEN(), BEFORE(STRING(--)), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['everything', 'TEXTTOKEN', 0.95], ['before', 'BEFORE', 0.95]]
actual additions -**##**- [['everything', 'TEXTTOKEN', 0.95], ['remove', 'REMOVE', 0.95], ['before', 'BEFORE', 0.95]]

255
remove the "--"
REMOVE(SelectString(STRING(--), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95]]

256
Extract everything immediately after "-- " and till next "--"
PRINT(SelectString(TEXTTOKEN(), AND(AFTER(STRING(-- )), BEFORE(STRING(--))), ALL()), DOCUMENT())
options for additions -##**##- [['extract', 'PRINT', 0.95], ['everything', 'TEXTTOKEN', 0.95], ['and', 'AND', 0.95], ['after', 'AFTER', 0.95], ['till', 'BEFORE', 0.95]]
actual additions -**##**- [['everything', 'TEXTTOKEN', 0.95], ['extract', 'PRINT', 0.95], ['till', 'BEFORE', 0.95], ['and', 'AND', 0.95], ['after', 'AFTER', 0.95]]

257
Insert "     " at beginning of each line.
INSERT(STRING(     ), START(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['beginning', 'START', 0.855], ['insert', 'LINESCOPE', 0.45], ['each', 'ALL', 0.95]]
actual additions -**##**- [['beginning', 'START', 0.855], ['insert', 'INSERT', 0.95], ['each', 'ALL', 0.95]]

258
Add a "<" and " " to each line.
INSERT(CONCATENATE(STRING(<), STRING( )), END(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['and', 'CONCATENATE', 0.95], ['add', 'END', 0.3], ['each', 'ALL', 0.95]]
actual additions -**##**- [['add', 'INSERT', 0.4275], ['and', 'CONCATENATE', 0.95], ['each', 'ALL', 0.95]]

259
Add a "\n" after every nonblank line.
INSERT(STRING(\n), Position(AFTER(NONBLANKLINETOKEN()), ALL()), DOCUMENT())
options for additions -##**##- [['add', 'INSERT', 0.4275], ['after', 'AFTER', 0.95], ['nonblank', 'NONBLANKLINETOKEN', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['nonblank', 'NONBLANKLINETOKEN', 0.95], ['add', 'INSERT', 0.4275], ['every', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

260
Add "$nbsp;$nbsp;" at the beginning of every line that does not start with "<".
INSERT(STRING($nbsp;$nbsp;), START(), IterationScope(LINESCOPE(), NOT(STARTSWITH(STRING(<))), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['start', 'START', 0.9025], ['line', 'LINESCOPE', 0.95], ['not', 'NOT', 0.95], ['beginning', 'STARTSWITH', 0.9025], ['every', 'ALL', 0.95]]
actual additions -**##**- [['beginning', 'STARTSWITH', 0.9025], ['start', 'START', 0.9025], ['not', 'NOT', 0.95], ['line', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['every', 'ALL', 0.95]]

261
Add a ":" after the #8th character in each line.
INSERT(STRING(:), Position(AFTER(CHARTOKEN()), INTEGER(8)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['after', 'AFTER', 0.95], ['character', 'CHARTOKEN', 0.95], ['character', 'LINESCOPE', 0.405], ['each', 'ALL', 0.95]]
actual additions -**##**- [['add', 'INSERT', 0.4275], ['character', 'CHARTOKEN', 0.95], ['each', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

262
If some line does not end with a ".", add "."
INSERT(STRING(.), END(), IterationScope(LINESCOPE(), NOT(ENDSWITH(STRING(.))), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['end', 'END', 0.95], ['line', 'LINESCOPE', 0.95], ['not', 'NOT', 0.95], ['end', 'ENDSWITH', 0.95]]
actual additions -**##**- [['not', 'NOT', 0.95], ['line', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['end', 'ENDSWITH', 0.95]]

263
Add the suffix "_IDM" to the word right after "idiom:"
INSERT(STRING(_IDM), END(), IterationScope(WORDSCOPE(), AFTER(STRING(idiom:)), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['suffix', 'END', 0.95], ['word', 'WORDSCOPE', 0.95], ['suffix', 'AFTER', 0.95]]
actual additions -**##**- [['word', 'WORDSCOPE', 0.95], ['add', 'INSERT', 0.4275], ['suffix', 'AFTER', 0.95]]

264
Add a "." at the end of any line which does not already have "."
INSERT(STRING(.), END(), IterationScope(LINESCOPE(), NOT(CONTAINS(STRING(.))), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['end', 'END', 0.95], ['line', 'LINESCOPE', 0.95], ['not', 'NOT', 0.95], ['add', 'CONTAINS', 0.3]]
actual additions -**##**- [['not', 'NOT', 0.95], ['line', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['end', 'END', 0.95]]

265
Add "/VB" at the end of the #1st word in each line.
INSERT(STRING(/VB), Position(AFTER(WORDTOKEN()), INTEGER(1)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['add', 'AFTER', 0.3], ['word', 'WORDTOKEN', 0.95], ['word', 'LINESCOPE', 0.3], ['each', 'ALL', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['add', 'INSERT', 0.4275], ['each', 'ALL', 0.95]]

266
Next to the #1st character, add an "!"
INSERT(STRING(!), Position(AFTER(CHARTOKEN()), INTEGER(1)), DOCUMENT())
options for additions -##**##- [['add', 'INSERT', 0.4275], ['next', 'AFTER', 0.95]]
actual additions -**##**- [['add', 'INSERT', 0.4275], ['next', 'AFTER', 0.95]]

267
On every #2 lines, insert an "\t"
INSERT(STRING(\t), END(), IterationScope(LINESCOPE(), ALWAYS(), EVERY(INTEGER(2), INTEGER(1))))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['insert', 'END', 0.3], ['insert', 'LINESCOPE', 0.45], ['every', 'EVERY', 0.95]]
actual additions -**##**- [['insert', 'INSERT', 0.95], ['every', 'EVERY', 0.95]]

268
Add an additional "\n" between line and line
INSERT(STRING(\n), Position(BETWEEN(LINETOKEN(), TO(LINETOKEN())), ALL()), DOCUMENT())
options for additions -##**##- [['add', 'INSERT', 0.4275], ['between', 'BETWEEN', 0.95], ['line', 'LINETOKEN', 0.9025], ['and', 'TO', 0.95], ['line', 'LINETOKEN', 0.9025]]
actual additions -**##**- [['and', 'TO', 0.95], ['line', 'LINETOKEN', 0.9025], ['add', 'INSERT', 0.4275], ['between', 'BETWEEN', 0.95]]

269
Add "," characters between number and number in the line
INSERT(STRING(,), Position(BETWEEN(NUMBERTOKEN(), TO(NUMBERTOKEN())), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['between', 'BETWEEN', 0.95], ['number', 'NUMBERTOKEN', 0.9025], ['and', 'TO', 0.95], ['number', 'NUMBERTOKEN', 0.9025], ['line', 'LINESCOPE', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['number', 'NUMBERTOKEN', 0.9025], ['line', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['between', 'BETWEEN', 0.95]]

270
Put "-" between number and number
INSERT(STRING(-), Position(BETWEEN(NUMBERTOKEN(), TO(NUMBERTOKEN())), ALL()), DOCUMENT())
options for additions -##**##- [['put', 'INSERT', 0.4275], ['between', 'BETWEEN', 0.95], ['number', 'NUMBERTOKEN', 0.9025], ['and', 'TO', 0.95], ['number', 'NUMBERTOKEN', 0.9025]]
actual additions -**##**- [['and', 'TO', 0.95], ['number', 'NUMBERTOKEN', 0.9025], ['put', 'INSERT', 0.4275], ['between', 'BETWEEN', 0.95]]

271
Append at the end of the line "THE END"
INSERT(STRING(THE END), END(), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['append', 'INSERT', 0.4275], ['end', 'END', 0.95], ['end', 'END', 0.95], ['line', 'LINESCOPE', 0.95]]
actual additions -**##**- [['line', 'LINESCOPE', 0.95], ['append', 'INSERT', 0.4275], ['end', 'END', 0.95]]

272
Append "***" to the end of lines starting with "Fred"
INSERT(STRING(***), END(), IterationScope(LINESCOPE(), STARTSWITH(STRING(Fred)), ALL()))
options for additions -##**##- [['append', 'INSERT', 0.4275], ['end', 'END', 0.95], ['lines', 'LINESCOPE', 0.95], ['starting', 'STARTSWITH', 0.855]]
actual additions -**##**- [['starting', 'STARTSWITH', 0.855], ['lines', 'LINESCOPE', 0.95], ['append', 'INSERT', 0.4275], ['end', 'END', 0.95]]

273
Add a "$" to the lines unless it already starts with a "$"
INSERT(STRING($), END(), IterationScope(LINESCOPE(), NOT(STARTSWITH(STRING($))), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['add', 'END', 0.3], ['lines', 'LINESCOPE', 0.95], ['unless', 'NOT', 0.95], ['starts', 'STARTSWITH', 0.855]]
actual additions -**##**- [['starts', 'STARTSWITH', 0.855], ['unless', 'NOT', 0.95], ['lines', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275]]

274
Add "," to words
INSERT(STRING(,), END(), IterationScope(WORDSCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['add', 'END', 0.3], ['words', 'WORDSCOPE', 0.95]]
actual additions -**##**- [['words', 'WORDSCOPE', 0.95], ['add', 'INSERT', 0.4275]]

275
Add an "!" followed by a "?" at the end of every word
INSERT(CONCATENATE(STRING(!), STRING(?)), END(), IterationScope(WORDSCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['followed', 'CONCATENATE', 0.95], ['end', 'END', 0.95], ['word', 'WORDSCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['word', 'WORDSCOPE', 0.95], ['add', 'INSERT', 0.4275], ['end', 'END', 0.95], ['followed', 'CONCATENATE', 0.95], ['every', 'ALL', 0.95]]

276
Add a ":" after the #80th character in each line
INSERT(STRING(:), Position(AFTER(CHARTOKEN()), INTEGER(80)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['add', 'INSERT', 0.4275], ['after', 'AFTER', 0.95], ['character', 'CHARTOKEN', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['line', 'LINESCOPE', 0.95], ['add', 'INSERT', 0.4275], ['character', 'CHARTOKEN', 0.95], ['each', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

277
Insert a "\n" above every line that matches "ABC"
INSERT(STRING(\n), START(), IterationScope(LINESCOPE(), MATCHES(STRING(ABC)), ALL()))
options for additions -##**##- [['insert', 'INSERT', 0.95], ['above', 'START', 0.95], ['line', 'LINESCOPE', 0.95], ['matches', 'MATCHES', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['above', 'START', 0.95], ['matches', 'MATCHES', 0.95], ['line', 'LINESCOPE', 0.95], ['insert', 'INSERT', 0.95], ['every', 'ALL', 0.95]]

278
Insert above the #1st line the title "PERSONNEL FILE"
INSERT(STRING(PERSONNEL FILE), Position(BEFORE(LINETOKEN()), INTEGER(1)), DOCUMENT())
options for additions -##**##- [['insert', 'INSERT', 0.95], ['above', 'BEFORE', 0.95], ['line', 'LINETOKEN', 0.9025]]
actual additions -**##**- [['line', 'LINETOKEN', 0.9025], ['insert', 'INSERT', 0.95], ['above', 'BEFORE', 0.95]]

279
Insert a "\n" after every #3 lines
INSERT(STRING(\n), Position(AFTER(LINETOKEN()), EVERY(INTEGER(3), INTEGER(1))), DOCUMENT())
options for additions -##**##- [['insert', 'INSERT', 0.95], ['after', 'AFTER', 0.95], ['lines', 'LINETOKEN', 0.9025], ['every', 'EVERY', 0.95]]
actual additions -**##**- [['lines', 'LINETOKEN', 0.9025], ['insert', 'INSERT', 0.95], ['every', 'EVERY', 0.95], ['after', 'AFTER', 0.95]]

280
Attach "rfc" before all words including an "@"
INSERT(STRING(rfc), START(), IterationScope(WORDSCOPE(), CONTAINS(STRING(@)), ALL()))
options for additions -##**##- [['attach', 'INSERT', 0.45], ['before', 'START', 0.95], ['words', 'WORDSCOPE', 0.95], ['including', 'CONTAINS', 0.45], ['all', 'ALL', 0.95]]
actual additions -**##**- [['words', 'WORDSCOPE', 0.95], ['before', 'START', 0.95], ['attach', 'INSERT', 0.45], ['including', 'CONTAINS', 0.45], ['all', 'ALL', 0.95]]

281
Place "," between word and word in each line
INSERT(STRING(,), Position(BETWEEN(WORDTOKEN(), TO(WORDTOKEN())), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['place', 'INSERT', 0.4275], ['between', 'BETWEEN', 0.95], ['word', 'WORDTOKEN', 0.95], ['and', 'TO', 0.95], ['word', 'WORDTOKEN', 0.95], ['each', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['and', 'TO', 0.95], ['line', 'LINESCOPE', 0.95], ['place', 'INSERT', 0.4275], ['between', 'BETWEEN', 0.95], ['each', 'ALL', 0.95]]

282
After each instance of "href=", add "page="
INSERT(STRING(page=), Position(AFTER(STRING(href=)), ALL()), DOCUMENT())
options for additions -##**##- [['add', 'INSERT', 0.4275], ['after', 'AFTER', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['add', 'INSERT', 0.4275], ['each', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

283
Insert "\n" between digit and digit
INSERT(STRING(\n), Position(BETWEEN(DIGITTOKEN(), TO(DIGITTOKEN())), ALL()), DOCUMENT())
options for additions -##**##- [['insert', 'INSERT', 0.95], ['between', 'BETWEEN', 0.95], ['digit', 'DIGITTOKEN', 0.95], ['and', 'TO', 0.95], ['digit', 'DIGITTOKEN', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['insert', 'INSERT', 0.95], ['digit', 'DIGITTOKEN', 0.95], ['between', 'BETWEEN', 0.95]]

284
Put a "\" before a current "\"
INSERT(STRING(\), Position(BEFORE(STRING(\)), ALL()), DOCUMENT())
options for additions -##**##- [['put', 'INSERT', 0.4275], ['before', 'BEFORE', 0.95]]
actual additions -**##**- [['put', 'INSERT', 0.4275], ['before', 'BEFORE', 0.95]]

285
Insert "\" right before opening "<"
INSERT(STRING(\), Position(BEFORE(STRING(<)), ALL()), DOCUMENT())
options for additions -##**##- [['insert', 'INSERT', 0.95], ['before', 'BEFORE', 0.95]]
actual additions -**##**- [['insert', 'INSERT', 0.95], ['before', 'BEFORE', 0.95]]

286
Place a " " between ";" and ";"
INSERT(STRING( ), Position(BETWEEN(STRING(;), TO(STRING(;))), ALL()), DOCUMENT())
options for additions -##**##- [['place', 'INSERT', 0.4275], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['place', 'INSERT', 0.4275], ['between', 'BETWEEN', 0.95]]

287
Place "FINISH" at the end of line only if it does not already end with "FINISH"
INSERT(STRING(FINISH), END(), IterationScope(LINESCOPE(), NOT(ENDSWITH(STRING(FINISH))), ALL()))
options for additions -##**##- [['place', 'INSERT', 0.4275], ['end', 'END', 0.95], ['line', 'LINESCOPE', 0.95], ['not', 'NOT', 0.95], ['end', 'ENDSWITH', 0.95]]
actual additions -**##**- [['not', 'NOT', 0.95], ['line', 'LINESCOPE', 0.95], ['place', 'INSERT', 0.4275], ['end', 'ENDSWITH', 0.95]]

288
Insert "BEGIN" at the beginning of text
INSERT(STRING(BEGIN), START(), DOCUMENT())
options for additions -##**##- [['insert', 'INSERT', 0.95], ['beginning', 'START', 0.855]]
actual additions -**##**- [['beginning', 'START', 0.855], ['insert', 'INSERT', 0.95]]

289
Add "END" at the end of the file
INSERT(STRING(END), END(), DOCUMENT())
options for additions -##**##- [['add', 'INSERT', 0.4275], ['end', 'END', 0.95], ['end', 'END', 0.95]]
actual additions -**##**- [['add', 'INSERT', 0.4275], ['end', 'END', 0.95]]

290
remove all instances of "|"
REMOVE(SelectString(STRING(|), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['all', 'ALL', 0.95]]

291
Delete all blank lines
REMOVE(SelectString(BLANKLINETOKEN(), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['blank', 'BLANKLINETOKEN', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['delete', 'REMOVE', 0.4275], ['blank', 'BLANKLINETOKEN', 0.95], ['all', 'ALL', 0.95]]

292
Delete the last #2 lines of the input
REMOVE(SelectString(LINETOKEN(), ALWAYS(), LASTFEW(INTEGER(2))), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['input', 'LINETOKEN', 0.95], ['last', 'LASTFEW', 0.95], ['lines', 'LINESCOPE', 0.95]]
actual additions -**##**- [['delete', 'REMOVE', 0.4275], ['input', 'LINETOKEN', 0.95], ['lines', 'LINESCOPE', 0.95], ['last', 'LASTFEW', 0.95]]

293
Remove all the lines between an occurrence of "start" and an occurrence of "stop"
REMOVE(SelectString(LINETOKEN(), BETWEEN(STRING(start), TO(STRING(stop))), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['lines', 'LINETOKEN', 0.9025], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['remove', 'REMOVE', 0.95], ['lines', 'LINETOKEN', 0.9025], ['between', 'BETWEEN', 0.95], ['all', 'ALL', 0.95]]

294
Remove every #3 occurrence of the word "Apple"
REMOVE(SelectString(STRING(Apple), ALWAYS(), EVERY(INTEGER(3), INTEGER(1))), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['every', 'EVERY', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['every', 'EVERY', 0.95]]

295
Delete all consecutive blank lines from the input
REMOVE(SelectString(BLANKLINETOKEN(), ALWAYS(), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['blank', 'BLANKLINETOKEN', 0.95], ['all', 'ALL', 0.95], ['lines', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['delete', 'REMOVE', 0.4275], ['lines', 'LINESCOPE', 0.95], ['blank', 'BLANKLINETOKEN', 0.95], ['all', 'ALL', 0.95]]

296
Delete the #1st number on all lines that start with a "%%"
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), INTEGER(1)), IterationScope(LINESCOPE(), STARTSWITH(STRING(%%)), ALL()))
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['number', 'NUMBERTOKEN', 0.9025], ['lines', 'LINESCOPE', 0.95], ['start', 'STARTSWITH', 0.855], ['all', 'ALL', 0.95]]
actual additions -**##**- [['start', 'STARTSWITH', 0.855], ['delete', 'REMOVE', 0.4275], ['number', 'NUMBERTOKEN', 0.9025], ['lines', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]

297
Remove the string "<br>" from every line whose immediately following line is "INPUT"
REMOVE(SelectString(STRING(<br>), ALWAYS(), ALL()), IterationScope(LINESCOPE(), AFTER(LINE(STRING(INPUT))), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['every', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['from', 'AFTER', 0.95], ['line', 'LINE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['line', 'LINE', 0.95], ['every', 'ALL', 0.95], ['from', 'AFTER', 0.95]]

298
Delete the first #3 lines
REMOVE(SelectString(LINETOKEN(), ALWAYS(), FIRSTFEW(INTEGER(3))), DOCUMENT())
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['lines', 'LINETOKEN', 0.9025], ['first', 'FIRSTFEW', 0.95]]
actual additions -**##**- [['delete', 'REMOVE', 0.4275], ['lines', 'LINETOKEN', 0.9025], ['first', 'FIRSTFEW', 0.95]]

299
Delete all empty lines
REMOVE(SelectString(BLANKLINETOKEN(), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['empty', 'REMOVE', 0.45], ['empty', 'BLANKLINETOKEN', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['empty', 'BLANKLINETOKEN', 0.95], ['all', 'ALL', 0.95]]

300
Delete every #4th line
REMOVE(SelectString(LINETOKEN(), ALWAYS(), EVERY(INTEGER(4), INTEGER(1))), DOCUMENT())
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['line', 'LINETOKEN', 0.9025], ['every', 'EVERY', 0.95]]
actual additions -**##**- [['delete', 'REMOVE', 0.4275], ['line', 'LINETOKEN', 0.9025], ['every', 'EVERY', 0.95]]

301
Remove "!" everywhere except in the lines between "start" and "stop"
REMOVE(SelectString(STRING(!), ALWAYS(), ALL()), IterationScope(LINESCOPE(), NOT(BETWEEN(STRING(start), TO(STRING(stop)))), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['lines', 'LINESCOPE', 0.95], ['except', 'NOT', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['remove', 'REMOVE', 0.95], ['except', 'NOT', 0.95], ['lines', 'LINESCOPE', 0.95], ['between', 'BETWEEN', 0.95]]

302
Delete every line that has a "," or has "and" in it
REMOVE(SelectString(LINETOKEN(), OR(CONTAINS(STRING(,)), CONTAINS(STRING(and))), ALL()), DOCUMENT())
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['line', 'LINETOKEN', 0.9025], ['or', 'OR', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['delete', 'REMOVE', 0.4275], ['or', 'OR', 0.95], ['line', 'LINETOKEN', 0.9025], ['every', 'ALL', 0.95]]

303
Delete the last line of the input
REMOVE(SelectString(LINETOKEN(), ALWAYS(), LASTONE()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['input', 'LINETOKEN', 0.95], ['last', 'LASTONE', 0.95], ['line', 'LINESCOPE', 0.95]]
actual additions -**##**- [['delete', 'REMOVE', 0.4275], ['input', 'LINETOKEN', 0.95], ['line', 'LINESCOPE', 0.95], ['last', 'LASTONE', 0.95]]

304
Remove all the #2nd fields ending in "500"
REMOVE(SelectString(WORDTOKEN(), ENDSWITH(STRING(500)), INTEGER(2)), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['fields', 'WORDTOKEN', 0.95], ['ending', 'ENDSWITH', 0.95]]
actual additions -**##**- [['fields', 'WORDTOKEN', 0.95], ['remove', 'REMOVE', 0.95], ['ending', 'ENDSWITH', 0.95]]

305
Delete lines containing "Lane"
REMOVE(SelectString(LINETOKEN(), CONTAINS(STRING(Lane)), ALL()), DOCUMENT())
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['lines', 'LINETOKEN', 0.9025], ['containing', 'CONTAINS', 0.95]]
actual additions -**##**- [['delete', 'REMOVE', 0.4275], ['lines', 'LINETOKEN', 0.9025], ['containing', 'CONTAINS', 0.95]]

306
Delete the #1st number on line #3
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), INTEGER(1)), IterationScope(LINESCOPE(), ALWAYS(), INTEGER(3)))
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['number', 'NUMBERTOKEN', 0.9025], ['line', 'LINESCOPE', 0.95]]
actual additions -**##**- [['delete', 'REMOVE', 0.4275], ['number', 'NUMBERTOKEN', 0.9025], ['line', 'LINESCOPE', 0.95]]

307
Delete the #2nd field on each line
REMOVE(SelectString(WORDTOKEN(), ALWAYS(), INTEGER(2)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['field', 'WORDTOKEN', 0.9025], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['field', 'WORDTOKEN', 0.9025], ['delete', 'REMOVE', 0.4275], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]

308
Delete "<" from each line
REMOVE(SelectString(STRING(<), ALWAYS(), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['each', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['delete', 'REMOVE', 0.4275], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]

309
Delete lines that match regular expression pattern "ABC"
REMOVE(SelectString(LINETOKEN(), MATCHES(STRING(ABC)), ALL()), DOCUMENT())
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['lines', 'LINETOKEN', 0.9025], ['match', 'MATCHES', 0.95]]
actual additions -**##**- [['delete', 'REMOVE', 0.4275], ['match', 'MATCHES', 0.95], ['lines', 'LINETOKEN', 0.9025]]

310
Remove the last word
REMOVE(SelectString(WORDTOKEN(), ALWAYS(), LASTONE()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['word', 'WORDTOKEN', 0.95], ['last', 'LASTONE', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['remove', 'REMOVE', 0.95], ['last', 'LASTONE', 0.95]]

311
Delete all consecutive blank lines from the input except the first #2
REMOVE(SelectString(BLANKLINETOKEN(), ALWAYS(), ALLBUT(FIRSTFEW(INTEGER(2)))), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['blank', 'BLANKLINETOKEN', 0.95], ['except', 'ALLBUT', 0.95], ['first', 'FIRSTFEW', 0.95], ['lines', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['delete', 'REMOVE', 0.4275], ['lines', 'LINESCOPE', 0.95], ['first', 'FIRSTFEW', 0.95], ['blank', 'BLANKLINETOKEN', 0.95], ['except', 'ALLBUT', 0.95], ['all', 'ALL', 0.95]]

312
Delete all blank lines from the input
REMOVE(SelectString(BLANKLINETOKEN(), ALWAYS(), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['blank', 'BLANKLINETOKEN', 0.95], ['all', 'ALL', 0.95], ['lines', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['delete', 'REMOVE', 0.4275], ['lines', 'LINESCOPE', 0.95], ['blank', 'BLANKLINETOKEN', 0.95], ['all', 'ALL', 0.95]]

313
Remove a line containing "del"
REMOVE(SelectString(LINETOKEN(), CONTAINS(STRING(del)), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['line', 'LINETOKEN', 0.9025], ['containing', 'CONTAINS', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['line', 'LINETOKEN', 0.9025], ['containing', 'CONTAINS', 0.95]]

314
Remove a line ending with "&D"
REMOVE(SelectString(LINETOKEN(), ENDSWITH(STRING(&D)), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['line', 'LINETOKEN', 0.9025], ['ending', 'ENDSWITH', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['line', 'LINETOKEN', 0.9025], ['ending', 'ENDSWITH', 0.95]]

315
Remove the #2nd occurrence of a line ending in "c" from the file
REMOVE(SelectString(LINETOKEN(), ENDSWITH(STRING(c)), INTEGER(2)), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['line', 'LINETOKEN', 0.9025], ['ending', 'ENDSWITH', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['line', 'LINETOKEN', 0.9025], ['ending', 'ENDSWITH', 0.95]]

316
Delete the #1st and #3rd columns of the input
REMOVE(SelectString(WORDTOKEN(), ALWAYS(), INTSET(IntegerSet(INTEGER(1), INTEGER(3)))), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['columns', 'WORDTOKEN', 0.95], ['and', 'INTSET', 0.95], ['input', 'LINESCOPE', 0.95]]
actual additions -**##**- [['columns', 'WORDTOKEN', 0.95], ['delete', 'REMOVE', 0.4275], ['input', 'LINESCOPE', 0.95], ['and', 'INTSET', 0.95]]

317
delete the first #3 words
REMOVE(SelectString(WORDTOKEN(), ALWAYS(), FIRSTFEW(INTEGER(3))), DOCUMENT())
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['words', 'WORDTOKEN', 0.95], ['first', 'FIRSTFEW', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['delete', 'REMOVE', 0.4275], ['first', 'FIRSTFEW', 0.95]]

318
Delete all digits in the #2nd word
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), ALL()), IterationScope(WORDSCOPE(), ALWAYS(), INTEGER(2)))
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['word', 'NUMBERTOKEN', 0.3], ['all', 'ALL', 0.95], ['word', 'WORDSCOPE', 0.95]]
actual additions -**##**- [['word', 'WORDSCOPE', 0.95], ['delete', 'REMOVE', 0.4275], ['all', 'ALL', 0.95]]

319
Delete " " between the word and "\r" of each sentence
REMOVE(SelectString(STRING( ), BETWEEN(WORDTOKEN(), TO(STRING(\r))), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['between', 'BETWEEN', 0.95], ['word', 'WORDTOKEN', 0.95], ['and', 'TO', 0.95], ['each', 'ALL', 0.95], ['sentence', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['and', 'TO', 0.95], ['delete', 'REMOVE', 0.4275], ['sentence', 'LINESCOPE', 0.95], ['between', 'BETWEEN', 0.95], ['each', 'ALL', 0.95]]

320
delete everything inside "<" and ">"
REMOVE(SelectString(TEXTTOKEN(), BETWEEN(STRING(<), TO(STRING(>))), ALL()), DOCUMENT())
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['everything', 'TEXTTOKEN', 0.95], ['inside', 'BETWEEN', 0.95], ['and', 'TO', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['everything', 'TEXTTOKEN', 0.95], ['delete', 'REMOVE', 0.4275], ['inside', 'BETWEEN', 0.95]]

321
Remove all blank lines between line and line
REMOVE(SelectString(BLANKLINETOKEN(), BETWEEN(LINETOKEN(), TO(LINETOKEN())), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['blank', 'BLANKLINETOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['lines', 'LINETOKEN', 0.9025], ['and', 'TO', 0.95], ['lines', 'LINETOKEN', 0.9025], ['all', 'ALL', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['remove', 'REMOVE', 0.95], ['lines', 'LINETOKEN', 0.9025], ['blank', 'BLANKLINETOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['all', 'ALL', 0.95]]

322
Remove the terminal "/" on every line but the last #1
REMOVE(SelectString(STRING(/), ALWAYS(), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALLBUT(LASTONE())))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['every', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['but', 'ALLBUT', 0.95], ['last', 'LASTONE', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['line', 'LINESCOPE', 0.95], ['last', 'LASTONE', 0.95], ['but', 'ALLBUT', 0.95], ['every', 'ALL', 0.95]]

323
Remove the #2nd instance of the line "The mulberry bush"
REMOVE(SelectString(LINE(STRING(The mulberry bush)), ALWAYS(), INTEGER(2)), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['line', 'LINE', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['line', 'LINE', 0.95]]

324
Remove the "n" before an "e" or after an "o"
REMOVE(SelectString(STRING(n), OR(BEFORE(STRING(e)), AFTER(STRING(o))), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['or', 'OR', 0.95], ['before', 'BEFORE', 0.95], ['after', 'AFTER', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['or', 'OR', 0.95], ['before', 'BEFORE', 0.95], ['after', 'AFTER', 0.95]]

325
remove all "." and remove all ","
SEQ(REMOVE(SelectString(STRING(.), ALWAYS(), ALL()), DOCUMENT()), REMOVE(SelectString(STRING(,), ALWAYS(), ALL()), DOCUMENT()))
options for additions -##**##- [['and', 'SEQ', 0.95], ['remove', 'REMOVE', 0.95], ['all', 'ALL', 0.95], ['remove', 'REMOVE', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['and', 'SEQ', 0.95], ['remove', 'REMOVE', 0.95], ['all', 'ALL', 0.95]]

326
Eliminate the #1st number on each line
REMOVE(SelectString(NUMBERTOKEN(), ALWAYS(), INTEGER(1)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['eliminate', 'REMOVE', 0.855], ['number', 'NUMBERTOKEN', 0.9025], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['eliminate', 'REMOVE', 0.855], ['number', 'NUMBERTOKEN', 0.9025], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]

327
Delete all but the #1st occurrence of "Cook"
REMOVE(SelectString(STRING(Cook), ALWAYS(), ALLBUT(INTEGER(1))), DOCUMENT())
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['but', 'ALLBUT', 0.95]]
actual additions -**##**- [['delete', 'REMOVE', 0.4275], ['but', 'ALLBUT', 0.95]]

328
Delete the word "the" wherever it comes after "all"
REMOVE(SelectString(WORD(STRING(the)), AFTER(STRING(all)), ALL()), DOCUMENT())
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['word', 'WORD', 0.95], ['after', 'AFTER', 0.95]]
actual additions -**##**- [['word', 'WORD', 0.95], ['delete', 'REMOVE', 0.4275], ['after', 'AFTER', 0.95]]

329
Remove all characters between "a" and "d" in the same word
REMOVE(SelectString(CHARTOKEN(), BETWEEN(STRING(a), TO(STRING(d))), ALL()), IterationScope(WORDSCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['characters', 'CHARTOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95], ['all', 'ALL', 0.95], ['word', 'WORDSCOPE', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['word', 'WORDSCOPE', 0.95], ['and', 'TO', 0.95], ['remove', 'REMOVE', 0.95], ['characters', 'CHARTOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['all', 'ALL', 0.95]]

330
delete every line that contains "&" or contains word "and"
REMOVE(SelectString(LINETOKEN(), OR(CONTAINS(STRING(&)), CONTAINS(WORD(STRING(and)))), ALL()), DOCUMENT())
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['line', 'LINETOKEN', 0.9025], ['or', 'OR', 0.95], ['contains', 'CONTAINS', 0.95], ['contains', 'CONTAINS', 0.95], ['word', 'WORD', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['word', 'WORD', 0.95], ['delete', 'REMOVE', 0.4275], ['or', 'OR', 0.95], ['line', 'LINETOKEN', 0.9025], ['contains', 'CONTAINS', 0.95], ['every', 'ALL', 0.95]]

331
Delete "Kookaburra" anywhere if it is followed by a ","
REMOVE(SelectString(STRING(Kookaburra), BEFORE(STRING(,)), ALL()), DOCUMENT())
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['is', 'BEFORE', 0.45]]
actual additions -**##**- [['delete', 'REMOVE', 0.4275], ['is', 'BEFORE', 0.45]]

332
Delete all empty lines
REMOVE(SelectString(BLANKLINETOKEN(), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['empty', 'REMOVE', 0.45], ['empty', 'BLANKLINETOKEN', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['empty', 'BLANKLINETOKEN', 0.95], ['all', 'ALL', 0.95]]

333
Delete the last #10 lines of a file
REMOVE(SelectString(LINETOKEN(), ALWAYS(), LASTFEW(INTEGER(10))), DOCUMENT())
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['lines', 'LINETOKEN', 0.9025], ['last', 'LASTFEW', 0.95]]
actual additions -**##**- [['delete', 'REMOVE', 0.4275], ['lines', 'LINETOKEN', 0.9025], ['last', 'LASTFEW', 0.95]]

334
Delete every #8th line
REMOVE(SelectString(LINETOKEN(), ALWAYS(), EVERY(INTEGER(8), INTEGER(1))), DOCUMENT())
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['line', 'LINETOKEN', 0.9025], ['every', 'EVERY', 0.95]]
actual additions -**##**- [['delete', 'REMOVE', 0.4275], ['line', 'LINETOKEN', 0.9025], ['every', 'EVERY', 0.95]]

335
Remove text between "[img]" and "[/img]"
REMOVE(SelectString(TEXTTOKEN(), BETWEEN(STRING([img]), TO(STRING([/img]))), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['text', 'TEXTTOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['text', 'TEXTTOKEN', 0.95], ['remove', 'REMOVE', 0.95], ['between', 'BETWEEN', 0.95]]

336
Delete the character "a" unless it comes before an "r"
REMOVE(SelectString(STRING(a), NOT(BEFORE(STRING(r))), ALL()), DOCUMENT())
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['unless', 'NOT', 0.95], ['before', 'BEFORE', 0.95]]
actual additions -**##**- [['delete', 'REMOVE', 0.4275], ['unless', 'NOT', 0.95], ['before', 'BEFORE', 0.95]]

337
Reject words which have numbercharacters in them
REMOVE(SelectString(WORDTOKEN(), CONTAINS(DIGITTOKEN()), ALL()), DOCUMENT())
options for additions -##**##- [['reject', 'REMOVE', 0.95], ['words', 'WORDTOKEN', 0.95], ['numbercharacters', 'DIGITTOKEN', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['reject', 'REMOVE', 0.95], ['numbercharacters', 'DIGITTOKEN', 0.95]]

338
Remove all symbols which are not numbers
REMOVE(SelectString(CHARTOKEN(), NOT(MATCHES(NUMBERTOKEN())), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['symbols', 'CHARTOKEN', 0.3], ['not', 'NOT', 0.95], ['are', 'MATCHES', 0.45], ['numbers', 'NUMBERTOKEN', 0.9025], ['all', 'ALL', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['not', 'NOT', 0.95], ['are', 'MATCHES', 0.45], ['symbols', 'CHARTOKEN', 0.3], ['all', 'ALL', 0.95]]

339
Delete the bottom #3 lines
REMOVE(SelectString(LINETOKEN(), ALWAYS(), LASTFEW(INTEGER(3))), DOCUMENT())
options for additions -##**##- [['delete', 'REMOVE', 0.4275], ['lines', 'LINETOKEN', 0.9025], ['bottom', 'LASTFEW', 0.95]]
actual additions -**##**- [['delete', 'REMOVE', 0.4275], ['lines', 'LINETOKEN', 0.9025], ['bottom', 'LASTFEW', 0.95]]

340
Remove lines having the character "$"
REMOVE(SelectString(LINETOKEN(), CONTAINS(STRING($)), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['lines', 'LINETOKEN', 0.9025]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['lines', 'LINETOKEN', 0.9025]]

341
Remove text after "." in each line
REMOVE(SelectString(TEXTTOKEN(), AFTER(STRING(.)), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['text', 'TEXTTOKEN', 0.95], ['after', 'AFTER', 0.95], ['each', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['text', 'TEXTTOKEN', 0.95], ['remove', 'REMOVE', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

342
Remove the word "sparkle" from the file
REMOVE(SelectString(WORD(STRING(sparkle)), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['word', 'WORD', 0.95]]
actual additions -**##**- [['word', 'WORD', 0.95], ['remove', 'REMOVE', 0.95]]

343
Remove lines that begin with "ie6"
REMOVE(SelectString(LINETOKEN(), STARTSWITH(STRING(ie6)), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['lines', 'LINETOKEN', 0.9025], ['begin', 'STARTSWITH', 0.9025]]
actual additions -**##**- [['begin', 'STARTSWITH', 0.9025], ['remove', 'REMOVE', 0.95], ['lines', 'LINETOKEN', 0.9025]]

344
Remove all spaces
REMOVE(SelectString(WHITESPACETOKEN(), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['spaces', 'WHITESPACETOKEN', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['spaces', 'WHITESPACETOKEN', 0.95], ['remove', 'REMOVE', 0.95], ['all', 'ALL', 0.95]]

345
Remove blanklines before the nonblankline of text
REMOVE(SelectString(BLANKLINETOKEN(), BEFORE(NONBLANKLINETOKEN()), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['blanklines', 'BLANKLINETOKEN', 0.95], ['before', 'BEFORE', 0.95], ['nonblankline', 'NONBLANKLINETOKEN', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['nonblankline', 'NONBLANKLINETOKEN', 0.95], ['blanklines', 'BLANKLINETOKEN', 0.95], ['before', 'BEFORE', 0.95]]

346
Remove "---" in the file.
REMOVE(SelectString(STRING(---), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95]]
actual additions -**##**- [['remove', 'REMOVE', 0.95]]

347
Remove "<i>" and remove "</i>"
SEQ(REMOVE(SelectString(STRING(<i>), ALWAYS(), ALL()), DOCUMENT()), REMOVE(SelectString(STRING(</i>), ALWAYS(), ALL()), DOCUMENT()))
options for additions -##**##- [['and', 'SEQ', 0.95], ['remove', 'REMOVE', 0.95], ['remove', 'REMOVE', 0.95]]
actual additions -**##**- [['and', 'SEQ', 0.95], ['remove', 'REMOVE', 0.95]]

348
Remove lines that include the string "doesn't work"
REMOVE(SelectString(LINETOKEN(), CONTAINS(STRING(doesn't work)), ALL()), DOCUMENT())
options for additions -##**##- [['remove', 'REMOVE', 0.95], ['lines', 'LINETOKEN', 0.9025], ['string', 'CONTAINS', 0.45]]
actual additions -**##**- [['remove', 'REMOVE', 0.95], ['lines', 'LINETOKEN', 0.9025], ['string', 'CONTAINS', 0.45]]

349
Ignore every word that contains digits from every #3rd line
REMOVE(SelectString(WORDTOKEN(), CONTAINS(NUMBERTOKEN()), ALL()), IterationScope(LINESCOPE(), ALWAYS(), EVERY(INTEGER(3), INTEGER(1))))
options for additions -##**##- [['ignore', 'REMOVE', 0.45], ['word', 'WORDTOKEN', 0.95], ['contains', 'CONTAINS', 0.95], ['word', 'NUMBERTOKEN', 0.3], ['every', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'EVERY', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['ignore', 'REMOVE', 0.45], ['line', 'LINESCOPE', 0.95], ['every', 'EVERY', 0.95], ['contains', 'CONTAINS', 0.95]]

350
Replace every "++" with "+"
REPLACE(SelectString(STRING(++), ALWAYS(), ALL()), BY(STRING(+)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['every', 'ALL', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95], ['every', 'ALL', 0.95]]

351
Substitute  the #4th occurrence of "foo" with "bar" on each line
REPLACE(SelectString(STRING(foo), ALWAYS(), INTEGER(4)), BY(STRING(bar)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['substitute', 'REPLACE', 0.9], ['with', 'BY', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['substitute', 'REPLACE', 0.9], ['line', 'LINESCOPE', 0.95], ['with', 'BY', 0.95], ['each', 'ALL', 0.95]]

352
Replace the line containing "Jose" with "JOSE HAS RETIRED"
REPLACE(SelectString(LINETOKEN(), CONTAINS(STRING(Jose)), ALL()), BY(STRING(JOSE HAS RETIRED)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['line', 'LINETOKEN', 0.9025], ['containing', 'CONTAINS', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['line', 'LINETOKEN', 0.9025], ['containing', 'CONTAINS', 0.95], ['with', 'BY', 0.95]]

353
Substitute "A" with "a" in the first #3 line
REPLACE(SelectString(STRING(A), ALWAYS(), ALL()), BY(STRING(a)), IterationScope(LINESCOPE(), ALWAYS(), FIRSTFEW(INTEGER(3))))
options for additions -##**##- [['substitute', 'REPLACE', 0.855], ['with', 'BY', 0.95], ['line', 'LINESCOPE', 0.95], ['first', 'FIRSTFEW', 0.95]]
actual additions -**##**- [['substitute', 'REPLACE', 0.855], ['line', 'LINESCOPE', 0.95], ['first', 'FIRSTFEW', 0.95], ['with', 'BY', 0.95]]

354
replace "a" with "b" in all lines
REPLACE(SelectString(STRING(a), ALWAYS(), ALL()), BY(STRING(b)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['all', 'ALL', 0.95], ['with', 'BY', 0.95], ['lines', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['lines', 'LINESCOPE', 0.95], ['with', 'BY', 0.95], ['all', 'ALL', 0.95]]

355
Substitute "DOG" with "dog" in the last #2 lines
REPLACE(SelectString(STRING(DOG), ALWAYS(), ALL()), BY(STRING(dog)), IterationScope(LINESCOPE(), ALWAYS(), LASTFEW(INTEGER(2))))
options for additions -##**##- [['substitute', 'REPLACE', 0.855], ['with', 'BY', 0.95], ['lines', 'LINESCOPE', 0.95], ['last', 'LASTFEW', 0.95]]
actual additions -**##**- [['substitute', 'REPLACE', 0.855], ['lines', 'LINESCOPE', 0.95], ['last', 'LASTFEW', 0.95], ['with', 'BY', 0.95]]

356
replace all "," with "|"
REPLACE(SelectString(STRING(,), ALWAYS(), ALL()), BY(STRING(|)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['all', 'ALL', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95], ['all', 'ALL', 0.95]]

357
Replace every #2nd occurrence of "mutex->list" with "mutex->queue"
REPLACE(SelectString(STRING(mutex->list), ALWAYS(), EVERY(INTEGER(2), INTEGER(1))), BY(STRING(mutex->queue)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['every', 'EVERY', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['every', 'EVERY', 0.95], ['with', 'BY', 0.95]]

358
Substitute "Cat" with "Dog" in all lines except the first #2 lines
REPLACE(SelectString(STRING(Cat), ALWAYS(), ALL()), BY(STRING(Dog)), IterationScope(LINESCOPE(), ALWAYS(), ALLBUT(FIRSTFEW(INTEGER(2)))))
options for additions -##**##- [['substitute', 'REPLACE', 0.855], ['all', 'ALL', 0.95], ['with', 'BY', 0.95], ['lines', 'LINESCOPE', 0.95], ['except', 'ALLBUT', 0.95], ['first', 'FIRSTFEW', 0.95]]
actual additions -**##**- [['substitute', 'REPLACE', 0.855], ['lines', 'LINESCOPE', 0.95], ['first', 'FIRSTFEW', 0.95], ['with', 'BY', 0.95], ['except', 'ALLBUT', 0.95], ['all', 'ALL', 0.95]]

359
replace all whitespace gaps to a " "
REPLACE(SelectString(WHITESPACETOKEN(), ALWAYS(), ALL()), BY(STRING( )), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['whitespace', 'WHITESPACETOKEN', 0.95], ['all', 'ALL', 0.95], ['to', 'BY', 0.95]]
actual additions -**##**- [['whitespace', 'WHITESPACETOKEN', 0.95], ['replace', 'REPLACE', 0.95], ['to', 'BY', 0.95], ['all', 'ALL', 0.95]]

360
Replace every #3rd occurrence of the line "--------"  with a "\n"
REPLACE(SelectString(LINE(STRING(--------)), ALWAYS(), EVERY(INTEGER(3), INTEGER(1))), BY(STRING(\n)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['line', 'LINE', 0.95], ['every', 'EVERY', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['line', 'LINE', 0.95], ['every', 'EVERY', 0.95], ['with', 'BY', 0.95]]

361
Substitute only the last occurrence of "foo" with "bar"
REPLACE(SelectString(STRING(foo), ALWAYS(), LASTONE()), BY(STRING(bar)), DOCUMENT())
options for additions -##**##- [['substitute', 'REPLACE', 0.855], ['last', 'LASTONE', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['substitute', 'REPLACE', 0.855], ['last', 'LASTONE', 0.95], ['with', 'BY', 0.95]]

362
Substitute "foo" with "bar" only on lines that do not contain "baz"
REPLACE(SelectString(STRING(foo), ALWAYS(), ALL()), BY(STRING(bar)), IterationScope(LINESCOPE(), NOT(CONTAINS(STRING(baz))), ALL()))
options for additions -##**##- [['substitute', 'REPLACE', 0.855], ['with', 'BY', 0.95], ['lines', 'LINESCOPE', 0.95], ['not', 'NOT', 0.95], ['contain', 'CONTAINS', 0.95]]
actual additions -**##**- [['substitute', 'REPLACE', 0.855], ['not', 'NOT', 0.95], ['lines', 'LINESCOPE', 0.95], ['contain', 'CONTAINS', 0.95], ['with', 'BY', 0.95]]

363
Replace the first occurrence of "dog" in a line having "mouse" with an occurrence of "cat"
REPLACE(SelectString(STRING(dog), ALWAYS(), FIRSTONE()), BY(STRING(cat)), IterationScope(LINESCOPE(), CONTAINS(STRING(mouse)), ALL()))
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['first', 'FIRSTONE', 0.95], ['with', 'BY', 0.95], ['line', 'LINESCOPE', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['line', 'LINESCOPE', 0.95], ['first', 'FIRSTONE', 0.95], ['with', 'BY', 0.95]]

364
Replace each occurrence of the number "92" with an "%%"
REPLACE(SelectString(STRING(92), ALWAYS(), ALL()), BY(STRING(%%)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['each', 'ALL', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95], ['each', 'ALL', 0.95]]

365
Replace the "/" with a " "
REPLACE(SelectString(STRING(/), ALWAYS(), ALL()), BY(STRING( )), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]

366
Replace "sq" with "dq"
REPLACE(SelectString(STRING(sq), ALWAYS(), ALL()), BY(STRING(dq)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]

367
Replace all substrings "1250" by "120" unless the word starts with "run"
REPLACE(SelectString(STRING(1250), ALWAYS(), ALL()), BY(STRING(120)), IterationScope(WORDSCOPE(), STARTSWITH(STRING(run)), ALL()))
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['all', 'ALL', 0.95], ['by', 'BY', 0.95], ['word', 'WORDSCOPE', 0.95], ['starts', 'STARTSWITH', 0.855], ['all', 'ALL', 0.95]]
actual additions -**##**- [['word', 'WORDSCOPE', 0.95], ['starts', 'STARTSWITH', 0.855], ['replace', 'REPLACE', 0.95], ['by', 'BY', 0.95], ['all', 'ALL', 0.95]]

368
Replace "<" with "-LRB-"
REPLACE(SelectString(STRING(<), ALWAYS(), ALL()), BY(STRING(-LRB-)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]

369
Replace "!" with a "," and "\n"
REPLACE(SelectString(STRING(!), ALWAYS(), ALL()), BY(CONCATENATE(STRING(,), STRING(\n))), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95], ['and', 'CONCATENATE', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['and', 'CONCATENATE', 0.95], ['with', 'BY', 0.95]]

370
Change "day" to "night" in the input
REPLACE(SelectString(STRING(day), ALWAYS(), ALL()), BY(STRING(night)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['change', 'REPLACE', 0.45], ['to', 'BY', 0.95], ['input', 'LINESCOPE', 0.95]]
actual additions -**##**- [['change', 'REPLACE', 0.45], ['input', 'LINESCOPE', 0.95], ['to', 'BY', 0.95]]

371
Change the name "Jon" to "Jonathan"
REPLACE(SelectString(STRING(Jon), ALWAYS(), ALL()), BY(STRING(Jonathan)), DOCUMENT())
options for additions -##**##- [['change', 'REPLACE', 0.4275], ['to', 'BY', 0.95]]
actual additions -**##**- [['change', 'REPLACE', 0.4275], ['to', 'BY', 0.95]]

372
Change every word on a line but the #3rd to "Deleted"
REPLACE(SelectString(WORDTOKEN(), ALWAYS(), ALLBUT(INTEGER(3))), BY(STRING(Deleted)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['change', 'REPLACE', 0.4275], ['word', 'WORDTOKEN', 0.95], ['but', 'ALLBUT', 0.95], ['to', 'BY', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['change', 'REPLACE', 0.4275], ['line', 'LINESCOPE', 0.95], ['to', 'BY', 0.95], ['but', 'ALLBUT', 0.95], ['every', 'ALL', 0.95]]

373
Convert every " " into a "\n"
REPLACE(SelectString(STRING( ), ALWAYS(), ALL()), BY(STRING(\n)), DOCUMENT())
options for additions -##**##- [['convert', 'REPLACE', 0.4275], ['every', 'ALL', 0.95], ['into', 'BY', 0.95]]
actual additions -**##**- [['convert', 'REPLACE', 0.4275], ['into', 'BY', 0.95], ['every', 'ALL', 0.95]]

374
Change all instances of "Mullberry Bush" to "mullberry bush."
REPLACE(SelectString(STRING(Mullberry Bush), ALWAYS(), ALL()), BY(STRING(mullberry bush.)), DOCUMENT())
options for additions -##**##- [['change', 'REPLACE', 0.4275], ['all', 'ALL', 0.95], ['to', 'BY', 0.95]]
actual additions -**##**- [['change', 'REPLACE', 0.4275], ['to', 'BY', 0.95], ['all', 'ALL', 0.95]]

375
Substitute "Mary" with "John" in lines #2nd, #3rd, #4th and #5th
REPLACE(SelectString(STRING(Mary), ALWAYS(), ALL()), BY(STRING(John)), IterationScope(LINESCOPE(), ALWAYS(), INTSET(IntegerSet(INTEGER(2), INTEGER(3), INTEGER(4), INTEGER(5)))))
options for additions -##**##- [['substitute', 'REPLACE', 0.855], ['with', 'BY', 0.95], ['lines', 'LINESCOPE', 0.95], ['and', 'INTSET', 0.95]]
actual additions -**##**- [['substitute', 'REPLACE', 0.855], ['lines', 'LINESCOPE', 0.95], ['and', 'INTSET', 0.95], ['with', 'BY', 0.95]]

376
In every line, replace the word next to "abc" by "Replaced"
REPLACE(SelectString(WORDTOKEN(), AFTER(STRING(abc)), ALL()), BY(STRING(Replaced)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['word', 'WORDTOKEN', 0.95], ['next', 'AFTER', 0.95], ['every', 'ALL', 0.95], ['to', 'BY', 0.95], ['word', 'LINESCOPE', 0.3], ['every', 'ALL', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['replace', 'REPLACE', 0.95], ['to', 'BY', 0.95], ['every', 'ALL', 0.95], ['next', 'AFTER', 0.95]]

377
Replace any sequence of one or more whitespace except those anywhere inside "<" and ">" with a " "
REPLACE(SelectString(WHITESPACETOKEN(), NOT(BETWEEN(STRING(<), TO(STRING(>)))), ALL()), BY(STRING( )), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['whitespace', 'WHITESPACETOKEN', 0.95], ['except', 'NOT', 0.95], ['inside', 'BETWEEN', 0.95], ['and', 'TO', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['whitespace', 'WHITESPACETOKEN', 0.95], ['and', 'TO', 0.95], ['replace', 'REPLACE', 0.95], ['except', 'NOT', 0.95], ['with', 'BY', 0.95], ['inside', 'BETWEEN', 0.95]]

378
Replace "word" with "board" everywhere in the input
REPLACE(SelectString(STRING(word), ALWAYS(), ALL()), BY(STRING(board)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95], ['input', 'LINESCOPE', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['input', 'LINESCOPE', 0.95], ['with', 'BY', 0.95]]

379
Substitute "ABC" with "BCA"
REPLACE(SelectString(STRING(ABC), ALWAYS(), ALL()), BY(STRING(BCA)), DOCUMENT())
options for additions -##**##- [['substitute', 'REPLACE', 0.855], ['with', 'BY', 0.95]]
actual additions -**##**- [['substitute', 'REPLACE', 0.855], ['with', 'BY', 0.95]]

380
Replace every occurrence of ".." with "."
REPLACE(SelectString(STRING(..), ALWAYS(), ALL()), BY(STRING(.)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['every', 'ALL', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95], ['every', 'ALL', 0.95]]

381
Replace "&" with "&&" unless it is inside "'" and "'"
REPLACE(SelectString(STRING(&), NOT(BETWEEN(STRING('), TO(STRING(')))), ALL()), BY(STRING(&&)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['unless', 'NOT', 0.95], ['inside', 'BETWEEN', 0.95], ['and', 'TO', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['replace', 'REPLACE', 0.95], ['unless', 'NOT', 0.95], ['with', 'BY', 0.95], ['inside', 'BETWEEN', 0.95]]

382
Replace "<br>" with "<p></p>"
REPLACE(SelectString(STRING(<br>), ALWAYS(), ALL()), BY(STRING(<p></p>)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]

383
Change all occurrences of "fontcolor" to "color"
REPLACE(SelectString(STRING(fontcolor), ALWAYS(), ALL()), BY(STRING(color)), DOCUMENT())
options for additions -##**##- [['change', 'REPLACE', 0.4275], ['all', 'ALL', 0.95], ['to', 'BY', 0.95]]
actual additions -**##**- [['change', 'REPLACE', 0.4275], ['to', 'BY', 0.95], ['all', 'ALL', 0.95]]

384
Replace "eregi" with "preg_match"
REPLACE(SelectString(STRING(eregi), ALWAYS(), ALL()), BY(STRING(preg_match)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]

385
Replace "enrol" with "enroll"
REPLACE(SelectString(STRING(enrol), ALWAYS(), ALL()), BY(STRING(enroll)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]

386
Replace the #2nd word in each line with "TWO"
REPLACE(SelectString(WORDTOKEN(), ALWAYS(), INTEGER(2)), BY(STRING(TWO)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['word', 'WORDTOKEN', 0.95], ['with', 'BY', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['replace', 'REPLACE', 0.95], ['line', 'LINESCOPE', 0.95], ['with', 'BY', 0.95], ['each', 'ALL', 0.95]]

387
Replace any word ending with ".com" with "WEBSITE"
REPLACE(SelectString(WORDTOKEN(), ENDSWITH(STRING(.com)), ALL()), BY(STRING(WEBSITE)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['word', 'WORDTOKEN', 0.95], ['ending', 'ENDSWITH', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['replace', 'REPLACE', 0.95], ['ending', 'ENDSWITH', 0.95], ['with', 'BY', 0.95]]

388
If "/start/here/" is at the beginning of the line, replace "/start/here/" with "/testdir/"
REPLACE(SelectString(STRING(/start/here/), ALWAYS(), ALL()), BY(STRING(/testdir/)), IterationScope(LINESCOPE(), STARTSWITH(STRING(/start/here/)), ALL()))
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95], ['is', 'LINESCOPE', 0.3], ['beginning', 'STARTSWITH', 0.9025]]
actual additions -**##**- [['beginning', 'STARTSWITH', 0.9025], ['replace', 'REPLACE', 0.95], ['is', 'LINESCOPE', 0.3], ['with', 'BY', 0.95]]

389
Replace the word "10" with "ten"
REPLACE(SelectString(WORD(STRING(10)), ALWAYS(), ALL()), BY(STRING(ten)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['word', 'WORD', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['word', 'WORD', 0.95], ['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]

390
Replace "<td>" with "break"
REPLACE(SelectString(STRING(<td>), ALWAYS(), ALL()), BY(STRING(break)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]

391
Replace "'" with " "
REPLACE(SelectString(STRING('), ALWAYS(), ALL()), BY(STRING( )), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]

392
Replace all numbers with "*"
REPLACE(SelectString(NUMBERTOKEN(), ALWAYS(), ALL()), BY(STRING(*)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['all', 'ALL', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['with', 'BY', 0.95], ['all', 'ALL', 0.95]]

393
Replace "f" with "//"
REPLACE(SelectString(STRING(f), ALWAYS(), ALL()), BY(STRING(//)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]

394
Replace the word "pt" with "thousands"
REPLACE(SelectString(WORD(STRING(pt)), ALWAYS(), ALL()), BY(STRING(thousands)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['word', 'WORD', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['word', 'WORD', 0.95], ['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]

395
Replace the first "." in every line with a ":"
REPLACE(SelectString(STRING(.), ALWAYS(), FIRSTONE()), BY(STRING(:)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['first', 'FIRSTONE', 0.95], ['with', 'BY', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['line', 'LINESCOPE', 0.95], ['first', 'FIRSTONE', 0.95], ['with', 'BY', 0.95], ['every', 'ALL', 0.95]]

396
Replace all characters immediately followed by "s" with "*"
REPLACE(SelectString(CHARTOKEN(), BEFORE(STRING(s)), ALL()), BY(STRING(*)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['characters', 'CHARTOKEN', 0.95], ['followed', 'BEFORE', 0.405], ['all', 'ALL', 0.95], ['by', 'BY', 0.95]]
actual additions -**##**- [['replace', 'REPLACE', 0.95], ['characters', 'CHARTOKEN', 0.95], ['by', 'BY', 0.95], ['followed', 'BEFORE', 0.405], ['all', 'ALL', 0.95]]

397
Replace words beginning with "<ahref" with "<sup>"
REPLACE(SelectString(WORDTOKEN(), STARTSWITH(STRING(<ahref)), ALL()), BY(STRING(<sup>)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['words', 'WORDTOKEN', 0.95], ['beginning', 'STARTSWITH', 0.9025], ['with', 'BY', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['beginning', 'STARTSWITH', 0.9025], ['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95]]

398
Replace text between "<b>" and "</b>" with "1"
REPLACE(SelectString(TEXTTOKEN(), BETWEEN(STRING(<b>), TO(STRING(</b>))), ALL()), BY(STRING(1)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['text', 'TEXTTOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['text', 'TEXTTOKEN', 0.95], ['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95], ['between', 'BETWEEN', 0.95]]

399
Change all words ending in ".jpg" to "REMOVED"
REPLACE(SelectString(WORDTOKEN(), ENDSWITH(STRING(.jpg)), ALL()), BY(STRING(REMOVED)), DOCUMENT())
options for additions -##**##- [['change', 'REPLACE', 0.4275], ['words', 'WORDTOKEN', 0.95], ['ending', 'ENDSWITH', 0.95], ['all', 'ALL', 0.95], ['to', 'BY', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['change', 'REPLACE', 0.4275], ['ending', 'ENDSWITH', 0.95], ['to', 'BY', 0.95], ['all', 'ALL', 0.95]]

400
Replace what is between "dq" and "dq" with "*"
REPLACE(SelectString(TEXTTOKEN(), BETWEEN(STRING(dq), TO(STRING(dq))), ALL()), BY(STRING(*)), DOCUMENT())
options for additions -##**##- [['replace', 'REPLACE', 0.95], ['what', 'TEXTTOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95], ['with', 'BY', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['what', 'TEXTTOKEN', 0.95], ['replace', 'REPLACE', 0.95], ['with', 'BY', 0.95], ['between', 'BETWEEN', 0.95]]

401
Print the lines after the word "SUBJECT:"
PRINT(SelectString(LINETOKEN(), AFTER(WORD(STRING(SUBJECT:))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['after', 'AFTER', 0.95], ['word', 'WORD', 0.95]]
actual additions -**##**- [['word', 'WORD', 0.95], ['print', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['after', 'AFTER', 0.95]]

402
Print the last field of the last line
PRINT(SelectString(WORDTOKEN(), ALWAYS(), LASTONE()), IterationScope(LINESCOPE(), ALWAYS(), LASTONE()))
options for additions -##**##- [['print', 'PRINT', 0.95], ['field', 'WORDTOKEN', 0.9025], ['last', 'LASTONE', 0.95], ['line', 'LINESCOPE', 0.95], ['last', 'LASTONE', 0.95]]
actual additions -**##**- [['field', 'WORDTOKEN', 0.9025], ['print', 'PRINT', 0.95], ['line', 'LINESCOPE', 0.95], ['last', 'LASTONE', 0.95]]

403
Search for lines that contain "0" or contains whitespaces
PRINT(SelectString(LINETOKEN(), OR(CONTAINS(STRING(0)), CONTAINS(WHITESPACETOKEN())), ALL()), DOCUMENT())
options for additions -##**##- [['search', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['or', 'OR', 0.95], ['contain', 'CONTAINS', 0.95], ['contain', 'CONTAINS', 0.95], ['whitespaces', 'WHITESPACETOKEN', 0.95]]
actual additions -**##**- [['whitespaces', 'WHITESPACETOKEN', 0.95], ['search', 'PRINT', 0.95], ['or', 'OR', 0.95], ['lines', 'LINETOKEN', 0.9025], ['contain', 'CONTAINS', 0.95]]

404
list the #3rd field of those lines of the file in which the letter "r" appears
PRINT(SelectString(WORDTOKEN(), ALWAYS(), INTEGER(3)), IterationScope(LINESCOPE(), CONTAINS(STRING(r)), ALL()))
options for additions -##**##- [['list', 'PRINT', 0.95], ['field', 'WORDTOKEN', 0.9025], ['lines', 'LINESCOPE', 0.95], ['appears', 'CONTAINS', 0.45]]
actual additions -**##**- [['field', 'WORDTOKEN', 0.9025], ['list', 'PRINT', 0.95], ['lines', 'LINESCOPE', 0.95], ['appears', 'CONTAINS', 0.45]]

405
Print the last #2 lines of a file
PRINT(SelectString(LINETOKEN(), ALWAYS(), LASTFEW(INTEGER(2))), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['last', 'LASTFEW', 0.95]]
actual additions -**##**- [['print', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['last', 'LASTFEW', 0.95]]

406
Find everything between "<" and ">" and print it
PRINT(SelectString(TEXTTOKEN(), BETWEEN(STRING(<), TO(STRING(>))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['everything', 'TEXTTOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['everything', 'TEXTTOKEN', 0.95], ['print', 'PRINT', 0.95], ['between', 'BETWEEN', 0.95]]

407
Print the last field of each line
PRINT(SelectString(WORDTOKEN(), ALWAYS(), LASTONE()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['print', 'PRINT', 0.95], ['field', 'WORDTOKEN', 0.9025], ['last', 'LASTONE', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['field', 'WORDTOKEN', 0.9025], ['print', 'PRINT', 0.95], ['line', 'LINESCOPE', 0.95], ['last', 'LASTONE', 0.95], ['each', 'ALL', 0.95]]

408
Print all words containing the "a" anywhere in the word
PRINT(SelectString(WORDTOKEN(), CONTAINS(STRING(a)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['containing', 'CONTAINS', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['print', 'PRINT', 0.95], ['containing', 'CONTAINS', 0.95], ['all', 'ALL', 0.95]]

409
Print a line if it contains "AAA" and contains "BBB" in any order
PRINT(SelectString(LINETOKEN(), AND(CONTAINS(STRING(AAA)), CONTAINS(STRING(BBB))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['line', 'LINETOKEN', 0.9025], ['and', 'AND', 0.95], ['contains', 'CONTAINS', 0.95], ['contains', 'CONTAINS', 0.95]]
actual additions -**##**- [['print', 'PRINT', 0.95], ['line', 'LINETOKEN', 0.9025], ['contains', 'CONTAINS', 0.95], ['and', 'AND', 0.95]]

410
print just the #4th field of the record ending in "\"
PRINT(SelectString(WORDTOKEN(), ALWAYS(), INTEGER(4)), IterationScope(LINESCOPE(), ENDSWITH(STRING(\)), ALL()))
options for additions -##**##- [['print', 'PRINT', 0.95], ['field', 'WORDTOKEN', 0.9025], ['print', 'LINESCOPE', 0.45], ['ending', 'ENDSWITH', 0.95]]
actual additions -**##**- [['field', 'WORDTOKEN', 0.9025], ['print', 'PRINT', 0.95], ['ending', 'ENDSWITH', 0.95]]

411
Print everything between an occurrence of  "???" and "/???"
PRINT(SelectString(TEXTTOKEN(), BETWEEN(STRING(???), TO(STRING(/???))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['everything', 'TEXTTOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['everything', 'TEXTTOKEN', 0.95], ['print', 'PRINT', 0.95], ['between', 'BETWEEN', 0.95]]

412
Print line numbered #52
PRINT(SelectString(LINETOKEN(), ALWAYS(), INTEGER(52)), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['line', 'LINETOKEN', 0.9025]]
actual additions -**##**- [['print', 'PRINT', 0.95], ['line', 'LINETOKEN', 0.9025]]

413
Print lines containing "Lincoln" or containing "lincoln"
PRINT(SelectString(LINETOKEN(), OR(CONTAINS(STRING(Lincoln)), CONTAINS(STRING(lincoln))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['or', 'OR', 0.95], ['containing', 'CONTAINS', 0.95], ['containing', 'CONTAINS', 0.95]]
actual additions -**##**- [['print', 'PRINT', 0.95], ['or', 'OR', 0.95], ['lines', 'LINETOKEN', 0.9025], ['containing', 'CONTAINS', 0.95]]

414
Print out any line that mentions "mark" and mentions "mary"
PRINT(SelectString(LINETOKEN(), AND(CONTAINS(STRING(mark)), CONTAINS(STRING(mary))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['line', 'LINETOKEN', 0.9025], ['and', 'AND', 0.95], ['mentions', 'CONTAINS', 0.95], ['mentions', 'CONTAINS', 0.95]]
actual additions -**##**- [['print', 'PRINT', 0.95], ['line', 'LINETOKEN', 0.9025], ['mentions', 'CONTAINS', 0.95], ['and', 'AND', 0.95]]

415
List words ending in "x" or ending in "y"
PRINT(SelectString(WORDTOKEN(), OR(ENDSWITH(STRING(x)), ENDSWITH(STRING(y))), ALL()), DOCUMENT())
options for additions -##**##- [['list', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['or', 'OR', 0.95], ['ending', 'ENDSWITH', 0.95], ['ending', 'ENDSWITH', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['list', 'PRINT', 0.95], ['or', 'OR', 0.95], ['ending', 'ENDSWITH', 0.95]]

416
search the lines containing the word "WORD"
PRINT(SelectString(LINETOKEN(), CONTAINS(WORD(STRING(WORD))), ALL()), DOCUMENT())
options for additions -##**##- [['search', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['containing', 'CONTAINS', 0.95], ['word', 'WORD', 0.95], ['word', 'WORD', 0.95]]
actual additions -**##**- [['word', 'WORD', 0.95], ['search', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['containing', 'CONTAINS', 0.95]]

417
List fields ending in "10" or ending in "11"
PRINT(SelectString(WORDTOKEN(), OR(ENDSWITH(STRING(10)), ENDSWITH(STRING(11))), ALL()), DOCUMENT())
options for additions -##**##- [['list', 'PRINT', 0.95], ['fields', 'WORDTOKEN', 0.9025], ['or', 'OR', 0.95], ['ending', 'ENDSWITH', 0.95], ['ending', 'ENDSWITH', 0.95]]
actual additions -**##**- [['fields', 'WORDTOKEN', 0.9025], ['list', 'PRINT', 0.95], ['or', 'OR', 0.95], ['ending', 'ENDSWITH', 0.95]]

418
Print the last line of a file
PRINT(SelectString(LINETOKEN(), ALWAYS(), LASTONE()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['line', 'LINETOKEN', 0.9025], ['last', 'LASTONE', 0.95]]
actual additions -**##**- [['print', 'PRINT', 0.95], ['line', 'LINETOKEN', 0.9025], ['last', 'LASTONE', 0.95]]

419
Print all words beginning with "D"
PRINT(SelectString(WORDTOKEN(), STARTSWITH(STRING(D)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['beginning', 'STARTSWITH', 0.9025], ['all', 'ALL', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['beginning', 'STARTSWITH', 0.9025], ['print', 'PRINT', 0.95], ['all', 'ALL', 0.95]]

420
Print the #2nd word after pattern "ABC" on every line
PRINT(SelectString(WORDTOKEN(), AFTER(STRING(ABC)), INTEGER(2)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['print', 'PRINT', 0.95], ['word', 'WORDTOKEN', 0.95], ['after', 'AFTER', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['print', 'PRINT', 0.95], ['line', 'LINESCOPE', 0.95], ['every', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

421
Print all lines ending in "700"
PRINT(SelectString(LINETOKEN(), ENDSWITH(STRING(700)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['ending', 'ENDSWITH', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['print', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['ending', 'ENDSWITH', 0.95], ['all', 'ALL', 0.95]]

422
Print all lines containing the string "San"
PRINT(SelectString(LINETOKEN(), CONTAINS(STRING(San)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['containing', 'CONTAINS', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['print', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['containing', 'CONTAINS', 0.95], ['all', 'ALL', 0.95]]

423
Print all lines in the file containing the string "error"
PRINT(SelectString(LINETOKEN(), CONTAINS(STRING(error)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['containing', 'CONTAINS', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['print', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['containing', 'CONTAINS', 0.95], ['all', 'ALL', 0.95]]

424
Print out any line that mentions "mark"
PRINT(SelectString(LINETOKEN(), CONTAINS(STRING(mark)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['line', 'LINETOKEN', 0.9025], ['mentions', 'CONTAINS', 0.95]]
actual additions -**##**- [['print', 'PRINT', 0.95], ['line', 'LINETOKEN', 0.9025], ['mentions', 'CONTAINS', 0.95]]

425
print every #2 from #1 lines
PRINT(SelectString(LINETOKEN(), ALWAYS(), EVERY(INTEGER(2), STARTFROM(INTEGER(1)))), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['every', 'EVERY', 0.95], ['from', 'STARTFROM', 0.95]]
actual additions -**##**- [['from', 'STARTFROM', 0.95], ['print', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['every', 'EVERY', 0.95]]

426
Print all lines that do not contain "834"
PRINT(SelectString(LINETOKEN(), NOT(CONTAINS(STRING(834))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['not', 'NOT', 0.95], ['contain', 'CONTAINS', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['print', 'PRINT', 0.95], ['not', 'NOT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['contain', 'CONTAINS', 0.95], ['all', 'ALL', 0.95]]

427
Print the last #10 lines of a file
PRINT(SelectString(LINETOKEN(), ALWAYS(), LASTFEW(INTEGER(10))), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['last', 'LASTFEW', 0.95]]
actual additions -**##**- [['print', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['last', 'LASTFEW', 0.95]]

428
Print all lines that matches "107:"
PRINT(SelectString(LINETOKEN(), MATCHES(STRING(107:)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['matches', 'MATCHES', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['print', 'PRINT', 0.95], ['matches', 'MATCHES', 0.95], ['lines', 'LINETOKEN', 0.9025], ['all', 'ALL', 0.95]]

429
print every line which contains the word "java"
PRINT(SelectString(LINETOKEN(), CONTAINS(WORD(STRING(java))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['line', 'LINETOKEN', 0.9025], ['contains', 'CONTAINS', 0.95], ['word', 'WORD', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['word', 'WORD', 0.95], ['print', 'PRINT', 0.95], ['line', 'LINETOKEN', 0.9025], ['contains', 'CONTAINS', 0.95], ['every', 'ALL', 0.95]]

430
Print all words beginning with "C" or beginning with "E"
PRINT(SelectString(WORDTOKEN(), OR(STARTSWITH(STRING(C)), STARTSWITH(STRING(E))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['or', 'OR', 0.95], ['beginning', 'STARTSWITH', 0.9025], ['beginning', 'STARTSWITH', 0.9025], ['all', 'ALL', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['beginning', 'STARTSWITH', 0.9025], ['print', 'PRINT', 0.95], ['or', 'OR', 0.95], ['all', 'ALL', 0.95]]

431
Print all records after "107" on every line
PRINT(SelectString(LINETOKEN(), AFTER(STRING(107)), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['print', 'PRINT', 0.95], ['line', 'LINETOKEN', 0.9025], ['after', 'AFTER', 0.95], ['all', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['print', 'PRINT', 0.95], ['line', 'LINESCOPE', 0.95], ['all', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

432
Print all lines starting with an "a" or starting with "A"
PRINT(SelectString(LINETOKEN(), OR(STARTSWITH(STRING(a)), STARTSWITH(STRING(A))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['or', 'OR', 0.95], ['starting', 'STARTSWITH', 0.855], ['starting', 'STARTSWITH', 0.855], ['all', 'ALL', 0.95]]
actual additions -**##**- [['starting', 'STARTSWITH', 0.855], ['print', 'PRINT', 0.95], ['or', 'OR', 0.95], ['lines', 'LINETOKEN', 0.9025], ['all', 'ALL', 0.95]]

433
Print only the first #5 characters
PRINT(SelectString(CHARTOKEN(), ALWAYS(), FIRSTFEW(INTEGER(5))), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['characters', 'CHARTOKEN', 0.95], ['first', 'FIRSTFEW', 0.95]]
actual additions -**##**- [['print', 'PRINT', 0.95], ['first', 'FIRSTFEW', 0.95], ['characters', 'CHARTOKEN', 0.95]]

434
Extract all numbers
PRINT(SelectString(NUMBERTOKEN(), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['extract', 'PRINT', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['all', 'ALL', 0.95]]
actual additions -**##**- [['extract', 'PRINT', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['all', 'ALL', 0.95]]

435
Print all the words enclosed in "<" and ">"
PRINT(SelectString(WORDTOKEN(), BETWEEN(STRING(<), TO(STRING(>))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['enclosed', 'BETWEEN', 0.95], ['and', 'TO', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['and', 'TO', 0.95], ['print', 'PRINT', 0.95], ['enclosed', 'BETWEEN', 0.95], ['all', 'ALL', 0.95]]

436
Print the #3rd field of the file and remove the ","
SEQ(PRINT(SelectString(WORDTOKEN(), ALWAYS(), INTEGER(3)), DOCUMENT()), REMOVE(SelectString(STRING(,), ALWAYS(), ALL()), DOCUMENT()))
options for additions -##**##- [['and', 'SEQ', 0.95], ['print', 'PRINT', 0.95], ['field', 'WORDTOKEN', 0.9025], ['remove', 'REMOVE', 0.95]]
actual additions -**##**- [['field', 'WORDTOKEN', 0.9025], ['and', 'SEQ', 0.95], ['remove', 'REMOVE', 0.95], ['print', 'PRINT', 0.95]]

437
Output every symbol between "<" and ">"
PRINT(SelectString(CHARTOKEN(), BETWEEN(STRING(<), TO(STRING(>))), ALL()), DOCUMENT())
options for additions -##**##- [['output', 'PRINT', 0.3], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['output', 'PRINT', 0.3], ['between', 'BETWEEN', 0.95], ['every', 'ALL', 0.95]]

438
Find the first occurrence of "@" and print the next character
PRINT(SelectString(CHARTOKEN(), AFTER(STRING(@)), FIRSTONE()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['character', 'CHARTOKEN', 0.95], ['next', 'AFTER', 0.95], ['first', 'FIRSTONE', 0.95]]
actual additions -**##**- [['print', 'PRINT', 0.95], ['first', 'FIRSTONE', 0.95], ['character', 'CHARTOKEN', 0.95], ['next', 'AFTER', 0.95]]

439
Print everything after "<" and before a ","
PRINT(SelectString(TEXTTOKEN(), AND(AFTER(STRING(<)), BEFORE(STRING(,))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['everything', 'TEXTTOKEN', 0.95], ['and', 'AND', 0.95], ['after', 'AFTER', 0.95], ['before', 'BEFORE', 0.95]]
actual additions -**##**- [['everything', 'TEXTTOKEN', 0.95], ['print', 'PRINT', 0.95], ['before', 'BEFORE', 0.95], ['and', 'AND', 0.95], ['after', 'AFTER', 0.95]]

440
Print every word which starts with a ":"
PRINT(SelectString(WORDTOKEN(), STARTSWITH(STRING(:)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['word', 'WORDTOKEN', 0.95], ['starts', 'STARTSWITH', 0.855], ['every', 'ALL', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['starts', 'STARTSWITH', 0.855], ['print', 'PRINT', 0.95], ['every', 'ALL', 0.95]]

441
Print everything before "=" wherever it is
PRINT(SelectString(TEXTTOKEN(), BEFORE(STRING(=)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['everything', 'TEXTTOKEN', 0.95], ['before', 'BEFORE', 0.95]]
actual additions -**##**- [['everything', 'TEXTTOKEN', 0.95], ['print', 'PRINT', 0.95], ['before', 'BEFORE', 0.95]]

442
Print any word that starts with "player" and is followed somewhere by "team"
PRINT(SelectString(WORDTOKEN(), AND(STARTSWITH(STRING(player)), BEFORE(STRING(team))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['word', 'WORDTOKEN', 0.95], ['and', 'AND', 0.95], ['starts', 'STARTSWITH', 0.855], ['starts', 'BEFORE', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['print', 'PRINT', 0.95], ['starts', 'BEFORE', 0.95], ['and', 'AND', 0.95]]

443
Extract the word following "from"
PRINT(SelectString(WORDTOKEN(), AFTER(STRING(from)), ALL()), DOCUMENT())
options for additions -##**##- [['extract', 'PRINT', 0.95], ['word', 'WORDTOKEN', 0.95], ['following', 'AFTER', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['extract', 'PRINT', 0.95], ['following', 'AFTER', 0.95]]

444
Print characters between "<" and ">"
PRINT(SelectString(CHARTOKEN(), BETWEEN(STRING(<), TO(STRING(>))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['characters', 'CHARTOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['print', 'PRINT', 0.95], ['characters', 'CHARTOKEN', 0.95], ['between', 'BETWEEN', 0.95]]

445
Print words which are not in between "/*" and "*/"
PRINT(SelectString(WORDTOKEN(), NOT(BETWEEN(STRING(/*), TO(STRING(*/)))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['not', 'NOT', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['and', 'TO', 0.95], ['print', 'PRINT', 0.95], ['not', 'NOT', 0.95], ['between', 'BETWEEN', 0.95]]

446
Print a line if it contains "<img"
PRINT(SelectString(LINETOKEN(), CONTAINS(STRING(<img)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['line', 'LINETOKEN', 0.9025], ['contains', 'CONTAINS', 0.95]]
actual additions -**##**- [['print', 'PRINT', 0.95], ['line', 'LINETOKEN', 0.9025], ['contains', 'CONTAINS', 0.95]]

447
Print words which follow "=" or follow "='"
PRINT(SelectString(WORDTOKEN(), OR(AFTER(STRING(=)), AFTER(STRING(='))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['or', 'OR', 0.95], ['follow', 'AFTER', 0.95], ['follow', 'AFTER', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['print', 'PRINT', 0.95], ['or', 'OR', 0.95], ['follow', 'AFTER', 0.95]]

448
Print all numbers in the file
PRINT(SelectString(NUMBERTOKEN(), ALWAYS(), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['all', 'ALL', 0.95]]
actual additions -**##**- [['print', 'PRINT', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['all', 'ALL', 0.95]]

449
List all words that begin with "<link"
PRINT(SelectString(WORDTOKEN(), STARTSWITH(STRING(<link)), ALL()), DOCUMENT())
options for additions -##**##- [['list', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['begin', 'STARTSWITH', 0.9025], ['all', 'ALL', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['begin', 'STARTSWITH', 0.9025], ['list', 'PRINT', 0.95], ['all', 'ALL', 0.95]]

450
Print words which appear directly before "="
PRINT(SelectString(WORDTOKEN(), BEFORE(STRING(=)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['before', 'BEFORE', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['print', 'PRINT', 0.95], ['before', 'BEFORE', 0.95]]

451
Print words in between "%" and "%" characters
PRINT(SelectString(WORDTOKEN(), BETWEEN(STRING(%), TO(STRING(%))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['and', 'TO', 0.95], ['print', 'PRINT', 0.95], ['between', 'BETWEEN', 0.95]]

452
Print line containing "soccer" and is preceded by "play"
PRINT(SelectString(LINETOKEN(), AND(CONTAINS(STRING(soccer)), AFTER(STRING(play))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['line', 'LINETOKEN', 0.9025], ['and', 'AND', 0.95], ['containing', 'CONTAINS', 0.95], ['preceded', 'AFTER', 0.95]]
actual additions -**##**- [['print', 'PRINT', 0.95], ['line', 'LINETOKEN', 0.9025], ['containing', 'CONTAINS', 0.95], ['and', 'AND', 0.95], ['preceded', 'AFTER', 0.95]]

453
Print text between "case" and "story"
PRINT(SelectString(TEXTTOKEN(), BETWEEN(STRING(case), TO(STRING(story))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['text', 'TEXTTOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['text', 'TEXTTOKEN', 0.95], ['print', 'PRINT', 0.95], ['between', 'BETWEEN', 0.95]]

454
Print text following "<a href="
PRINT(SelectString(TEXTTOKEN(), AFTER(STRING(<a href=)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['text', 'TEXTTOKEN', 0.95], ['following', 'AFTER', 0.95]]
actual additions -**##**- [['text', 'TEXTTOKEN', 0.95], ['print', 'PRINT', 0.95], ['following', 'AFTER', 0.95]]

455
Print lines which includes "[player]" and includes "[team]"
PRINT(SelectString(LINETOKEN(), AND(CONTAINS(STRING([player])), CONTAINS(STRING([team]))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['and', 'AND', 0.95], ['includes', 'CONTAINS', 0.4275], ['includes', 'CONTAINS', 0.4275]]
actual additions -**##**- [['print', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['includes', 'CONTAINS', 0.4275], ['and', 'AND', 0.95]]

456
Print data between "<url>" and "</url>"
PRINT(SelectString(TEXTTOKEN(), BETWEEN(STRING(<url>), TO(STRING(</url>))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['data', 'TEXTTOKEN', 0.3], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['data', 'TEXTTOKEN', 0.3], ['print', 'PRINT', 0.95], ['between', 'BETWEEN', 0.95]]

457
Print characters in between ">" and "<"
PRINT(SelectString(CHARTOKEN(), BETWEEN(STRING(>), TO(STRING(<))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['characters', 'CHARTOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['print', 'PRINT', 0.95], ['characters', 'CHARTOKEN', 0.95], ['between', 'BETWEEN', 0.95]]

458
Print the word unless it ends in ".net"
PRINT(SelectString(WORDTOKEN(), NOT(ENDSWITH(STRING(.net))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['word', 'WORDTOKEN', 0.95], ['unless', 'NOT', 0.95], ['ends', 'ENDSWITH', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['print', 'PRINT', 0.95], ['unless', 'NOT', 0.95], ['ends', 'ENDSWITH', 0.95]]

459
Print all words unless they begin with "user"
PRINT(SelectString(WORDTOKEN(), NOT(STARTSWITH(STRING(user))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['unless', 'NOT', 0.95], ['begin', 'STARTSWITH', 0.9025], ['all', 'ALL', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['begin', 'STARTSWITH', 0.9025], ['print', 'PRINT', 0.95], ['unless', 'NOT', 0.95], ['all', 'ALL', 0.95]]

460
Print lines that do not begin with "/admin"
PRINT(SelectString(LINETOKEN(), NOT(STARTSWITH(STRING(/admin))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['not', 'NOT', 0.95], ['begin', 'STARTSWITH', 0.9025]]
actual additions -**##**- [['begin', 'STARTSWITH', 0.9025], ['print', 'PRINT', 0.95], ['not', 'NOT', 0.95], ['lines', 'LINETOKEN', 0.9025]]

461
Print words in between "[[[" and "]]]"
PRINT(SelectString(WORDTOKEN(), BETWEEN(STRING([[[), TO(STRING(]]]))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['and', 'TO', 0.95], ['print', 'PRINT', 0.95], ['between', 'BETWEEN', 0.95]]

462
Print the #2nd word in each line
PRINT(SelectString(WORDTOKEN(), ALWAYS(), INTEGER(2)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['print', 'PRINT', 0.95], ['word', 'WORDTOKEN', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['print', 'PRINT', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]

463
Print words containing "/admin" and containing "/news"
PRINT(SelectString(WORDTOKEN(), AND(CONTAINS(STRING(/admin)), CONTAINS(STRING(/news))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['and', 'AND', 0.95], ['containing', 'CONTAINS', 0.95], ['containing', 'CONTAINS', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['print', 'PRINT', 0.95], ['containing', 'CONTAINS', 0.95], ['and', 'AND', 0.95]]

464
Print a line if it contains "*"
PRINT(SelectString(LINETOKEN(), CONTAINS(STRING(*)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['line', 'LINETOKEN', 0.9025], ['contains', 'CONTAINS', 0.95]]
actual additions -**##**- [['print', 'PRINT', 0.95], ['line', 'LINETOKEN', 0.9025], ['contains', 'CONTAINS', 0.95]]

465
Print text between "[oz]" and "[/oz]"
PRINT(SelectString(TEXTTOKEN(), BETWEEN(STRING([oz]), TO(STRING([/oz]))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['text', 'TEXTTOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['text', 'TEXTTOKEN', 0.95], ['print', 'PRINT', 0.95], ['between', 'BETWEEN', 0.95]]

466
Print words beginning with "http://"
PRINT(SelectString(WORDTOKEN(), STARTSWITH(STRING(http://)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['beginning', 'STARTSWITH', 0.9025]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['beginning', 'STARTSWITH', 0.9025], ['print', 'PRINT', 0.95]]

467
Print each line starting with the first "/"
PRINT(SelectString(LINETOKEN(), STARTSWITH(STRING(/)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['line', 'LINETOKEN', 0.9025], ['starting', 'STARTSWITH', 0.855], ['each', 'ALL', 0.95]]
actual additions -**##**- [['starting', 'STARTSWITH', 0.855], ['print', 'PRINT', 0.95], ['line', 'LINETOKEN', 0.9025], ['each', 'ALL', 0.95]]

468
Print a word if it ends with ".com"
PRINT(SelectString(WORDTOKEN(), ENDSWITH(STRING(.com)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['word', 'WORDTOKEN', 0.95], ['ends', 'ENDSWITH', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['print', 'PRINT', 0.95], ['ends', 'ENDSWITH', 0.95]]

469
Only print what follows "Main Text"
PRINT(SelectString(TEXTTOKEN(), AFTER(STRING(Main Text)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['what', 'TEXTTOKEN', 0.95], ['follows', 'AFTER', 0.95]]
actual additions -**##**- [['what', 'TEXTTOKEN', 0.95], ['print', 'PRINT', 0.95], ['follows', 'AFTER', 0.95]]

470
Print words between "'" and "'"
PRINT(SelectString(WORDTOKEN(), BETWEEN(STRING('), TO(STRING('))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['and', 'TO', 0.95], ['print', 'PRINT', 0.95], ['between', 'BETWEEN', 0.95]]

471
Print numbers between "<" and ">"
PRINT(SelectString(NUMBERTOKEN(), BETWEEN(STRING(<), TO(STRING(>))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['print', 'PRINT', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['between', 'BETWEEN', 0.95]]

472
Print text after "ID: " in each line
PRINT(SelectString(TEXTTOKEN(), AFTER(STRING(ID: )), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['print', 'PRINT', 0.95], ['text', 'TEXTTOKEN', 0.95], ['after', 'AFTER', 0.95], ['each', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['text', 'TEXTTOKEN', 0.95], ['print', 'PRINT', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95], ['after', 'AFTER', 0.95]]

473
Print every instance of a word immediately following "RFA"
PRINT(SelectString(WORDTOKEN(), AFTER(STRING(RFA)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['word', 'WORDTOKEN', 0.95], ['following', 'AFTER', 0.95], ['every', 'ALL', 0.95]]
actual additions -**##**- [['word', 'WORDTOKEN', 0.95], ['print', 'PRINT', 0.95], ['every', 'ALL', 0.95], ['following', 'AFTER', 0.95]]

474
Do not print words that end in ".aspx"
PRINT(SelectString(WORDTOKEN(), NOT(ENDSWITH(STRING(.aspx))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['not', 'NOT', 0.95], ['end', 'ENDSWITH', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['print', 'PRINT', 0.95], ['not', 'NOT', 0.95], ['end', 'ENDSWITH', 0.95]]

475
Print words immediately preceded by "public"
PRINT(SelectString(WORDTOKEN(), AFTER(STRING(public)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['preceded', 'AFTER', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['print', 'PRINT', 0.95], ['preceded', 'AFTER', 0.95]]

476
Print numbers that are immediately followed by the word "minutes"
PRINT(SelectString(NUMBERTOKEN(), BEFORE(WORD(STRING(minutes))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['are', 'BEFORE', 0.45], ['word', 'WORD', 0.95]]
actual additions -**##**- [['word', 'WORD', 0.95], ['print', 'PRINT', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['are', 'BEFORE', 0.45]]

477
Only print words which end in ".jpg" and include "mine.com"
PRINT(SelectString(WORDTOKEN(), AND(ENDSWITH(STRING(.jpg)), CONTAINS(STRING(mine.com))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['and', 'AND', 0.95], ['end', 'ENDSWITH', 0.95], ['include', 'CONTAINS', 0.40612499999999996]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['print', 'PRINT', 0.95], ['end', 'ENDSWITH', 0.95], ['include', 'CONTAINS', 0.40612499999999996], ['and', 'AND', 0.95]]

478
Print words that do not contain "k"
PRINT(SelectString(WORDTOKEN(), NOT(CONTAINS(STRING(k))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['not', 'NOT', 0.95], ['contain', 'CONTAINS', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['print', 'PRINT', 0.95], ['not', 'NOT', 0.95], ['contain', 'CONTAINS', 0.95]]

479
Print words beginning with "r"
PRINT(SelectString(WORDTOKEN(), STARTSWITH(STRING(r)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['beginning', 'STARTSWITH', 0.9025]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['beginning', 'STARTSWITH', 0.9025], ['print', 'PRINT', 0.95]]

480
Print only lines that match "that's why"
PRINT(SelectString(LINETOKEN(), MATCHES(STRING(that's why)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['match', 'MATCHES', 0.95]]
actual additions -**##**- [['print', 'PRINT', 0.95], ['match', 'MATCHES', 0.95], ['lines', 'LINETOKEN', 0.9025]]

481
Print all words containing the letter "a"
PRINT(SelectString(WORDTOKEN(), CONTAINS(STRING(a)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['containing', 'CONTAINS', 0.95], ['all', 'ALL', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['print', 'PRINT', 0.95], ['containing', 'CONTAINS', 0.95], ['all', 'ALL', 0.95]]

482
Only print words which include "@"
PRINT(SelectString(WORDTOKEN(), CONTAINS(STRING(@)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['include', 'CONTAINS', 0.40612499999999996]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['print', 'PRINT', 0.95], ['include', 'CONTAINS', 0.40612499999999996]]

483
Print words which include "article"
PRINT(SelectString(WORDTOKEN(), CONTAINS(STRING(article)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['include', 'CONTAINS', 0.40612499999999996]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['print', 'PRINT', 0.95], ['include', 'CONTAINS', 0.40612499999999996]]

484
Print characters between "http://" and ".com"
PRINT(SelectString(CHARTOKEN(), BETWEEN(STRING(http://), TO(STRING(.com))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['characters', 'CHARTOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['print', 'PRINT', 0.95], ['characters', 'CHARTOKEN', 0.95], ['between', 'BETWEEN', 0.95]]

485
Print the first #4 words in each line
PRINT(SelectString(WORDTOKEN(), ALWAYS(), FIRSTFEW(INTEGER(4))), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['print', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['first', 'FIRSTFEW', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['print', 'PRINT', 0.95], ['line', 'LINESCOPE', 0.95], ['first', 'FIRSTFEW', 0.95], ['each', 'ALL', 0.95]]

486
Print data between a "-" and an "*"
PRINT(SelectString(TEXTTOKEN(), BETWEEN(STRING(-), TO(STRING(*))), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['print', 'PRINT', 0.95], ['between', 'BETWEEN', 0.95]]

487
Print the last number in each line
PRINT(SelectString(NUMBERTOKEN(), ALWAYS(), LASTONE()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['print', 'PRINT', 0.95], ['number', 'NUMBERTOKEN', 0.9025], ['last', 'LASTONE', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['print', 'PRINT', 0.95], ['number', 'NUMBERTOKEN', 0.9025], ['line', 'LINESCOPE', 0.95], ['last', 'LASTONE', 0.95], ['each', 'ALL', 0.95]]

488
Print lines that begin with "$result"
PRINT(SelectString(LINETOKEN(), STARTSWITH(STRING($result)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025], ['begin', 'STARTSWITH', 0.9025]]
actual additions -**##**- [['begin', 'STARTSWITH', 0.9025], ['print', 'PRINT', 0.95], ['lines', 'LINETOKEN', 0.9025]]

489
Print the #5th field in each line
PRINT(SelectString(WORDTOKEN(), ALWAYS(), INTEGER(5)), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['print', 'PRINT', 0.95], ['field', 'WORDTOKEN', 0.9025], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['field', 'WORDTOKEN', 0.9025], ['print', 'PRINT', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]

490
Print words in the file consisting of numbers
PRINT(SelectString(WORDTOKEN(), CONTAINS(NUMBERTOKEN()), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['consisting', 'CONTAINS', 0.3], ['numbers', 'NUMBERTOKEN', 0.9025]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['print', 'PRINT', 0.95], ['numbers', 'NUMBERTOKEN', 0.9025], ['consisting', 'CONTAINS', 0.3]]

491
Print words which match "NAME"
PRINT(SelectString(WORDTOKEN(), MATCHES(STRING(NAME)), ALL()), DOCUMENT())
options for additions -##**##- [['print', 'PRINT', 0.95], ['words', 'WORDTOKEN', 0.95], ['match', 'MATCHES', 0.95]]
actual additions -**##**- [['words', 'WORDTOKEN', 0.95], ['print', 'PRINT', 0.95], ['match', 'MATCHES', 0.95]]

492
Print what is on each line between "&q" and the next "&"
PRINT(SelectString(TEXTTOKEN(), BETWEEN(STRING(&q), TO(STRING(&))), ALL()), IterationScope(LINESCOPE(), ALWAYS(), ALL()))
options for additions -##**##- [['print', 'PRINT', 0.95], ['what', 'TEXTTOKEN', 0.95], ['between', 'BETWEEN', 0.95], ['and', 'TO', 0.95], ['each', 'ALL', 0.95], ['line', 'LINESCOPE', 0.95], ['each', 'ALL', 0.95]]
actual additions -**##**- [['and', 'TO', 0.95], ['what', 'TEXTTOKEN', 0.95], ['print', 'PRINT', 0.95], ['line', 'LINESCOPE', 0.95], ['between', 'BETWEEN', 0.95], ['each', 'ALL', 0.95]]

